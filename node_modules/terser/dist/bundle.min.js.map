{"version":3,"sources":["../lib/utils.js","../lib/parse.js","../lib/ast.js","../lib/transform.js","../lib/output.js","../lib/scope.js","../lib/compress/index.js","../tools/domprops.js","../lib/propmangle.js","../lib/minify.js","../lib/sourcemap.js","../tools/node.js","../lib/mozilla-ast.js"],"names":["characters","str","split","member","name","array","includes","find_if","func","i","n","length","DefaultsError","Error","[object Object]","msg","defs","super","this","message","defaults","args","croak","ret","HOP","noop","return_false","return_true","return_this","return_null","MAP","a","f","backwards","top","doit","val","is_last","Last","v","AtTop","Splice","push","apply","slice","reverse","skip","Array","isArray","concat","at_top","splice","last","push_uniq","el","string_template","text","props","replace","p","remove","mergeSort","cmp","_ms","m","Math","floor","left","right","b","r","ai","bi","merge","makePredicate","words","Set","all","predicate","map_add","map","key","value","has","get","set","obj","prop","Object","prototype","hasOwnProperty","call","first_in_statement","stack","node","parent","AST_Statement","body","AST_Sequence","expressions","TYPE","expression","AST_Dot","AST_Sub","AST_Conditional","condition","AST_Binary","AST_UnaryPostfix","keep_name","keep_setting","RegExp","test","KEYWORDS","KEYWORDS_ATOM","RESERVED_WORDS","KEYWORDS_BEFORE_EXPRESSION","OPERATOR_CHARS","RE_NUM_LITERAL","RE_HEX_NUMBER","RE_OCT_NUMBER","RE_ES6_OCT_NUMBER","RE_BIN_NUMBER","RE_DEC_NUMBER","OPERATORS","WHITESPACE_CHARS","NEWLINE_CHARS","PUNC_AFTER_EXPRESSION","PUNC_BEFORE_EXPRESSION","PUNC_CHARS","UNICODE","ID_Start","ID_Continue","get_full_char","pos","char","charAt","is_surrogate_pair_head","next","is_surrogate_pair_tail","prev","code","charCodeAt","is_digit","is_identifier_start","ch","is_identifier_char","is_identifier_string","JS_Parse_Error","filename","line","col","js_error","is_token","token","type","EX_EOF","tokenizer","$TEXT","html5_comments","shebang","S","tokpos","tokline","tokcol","newline_before","regex_allowed","brace_counter","template_braces","comments_before","directives","directive_stack","peek","signal_eof","in_string","forward","looking_at","substr","find","what","indexOf","start_token","prev_was_dot","previous_token","is_comment","UNARY_POSTFIX","endline","endcol","endpos","nlb","file","raw","substring","comments_after","AST_Token","skip_whitespace","parse_error","err","read_num","prefix","has_e","after_e","has_x","has_dot","num","pred","read_while","next_token","has_directive","valid","parseInt","parseFloat","parse_js_number","isNaN","read_escaped_char","strict_hex","template_string","String","fromCharCode","hex_bytes","result","strict_octal","read_octal_escape_sequence","digit","read_string","with_eof_error","quote","tok","read_template_characters","begin","content","end","tmp","pop","skip_line_comment","find_eol","skip_multiline_comment","surrogates","get_full_char_length","read_name","escaped","read_escaped_identifier_char","read_regexp","source","prev_backslash","in_class","mods","regexp","raw_source","e","read_operator","grow","op","bigger","handle_slash","eof_error","cont","x","ex","force_regexp","word","context","nc","add_directive","directive","undefined","push_directives_stack","pop_directives_stack","UNARY_PREFIX","ASSIGNMENT","PRECEDENCE","j","ATOMIC_START_TOKEN","parse","options","bare_returns","ecma","module","strict","toplevel","input","peeked","in_function","in_async","in_generator","in_directives","in_loop","labels","is","ctx","token_error","unexpected","expect_token","expect","punc","has_newline_before","comment","can_insert_semicolon","is_in_generator","is_in_async","semicolon","optional","parenthesised","exp","embed_tokens","parser","start","expr","arguments","handle_regexp","statement","is_export_default","is_for_body","is_if_body","dir","stat","simple_statement","AST_String","AST_Directive","function_","AST_Defun","imported_name","imported_names","as_symbol","AST_SymbolImport","map_names","mod_str","AST_Import","module_name","import_","label","AST_Label","l","AST_IterationStatement","references","forEach","ref","AST_Continue","AST_LabeledStatement","labeled_statement","AST_BlockStatement","block_","AST_EmptyStatement","break_cont","AST_Break","AST_Debugger","AST_Do","AST_While","for_await_error","await_tok","init","var_","let_","const_","is_in","is_of","AST_Definitions","definitions","is_assignable","to_destructuring","AST_Destructuring","AST_ForIn","object","for_in","is_await","lhs","AST_ForOf","await","for_of","step","AST_For","regular_for","for_","class_","AST_DefClass","cond","belse","AST_If","alternative","if_","AST_Return","AST_Switch","switch_body_","AST_Throw","bcatch","bfinally","parameter","AST_SymbolCatch","AST_Catch","argname","AST_Finally","AST_Try","try_","AST_With","is_default","exported_names","exported_value","exported_definition","AST_Export","AST_Lambda","AST_SimpleStatement","export_","ldef","AST_LabelRef","thedef","arrow_function","argnames","is_async","_function_body","AST_Arrow","async","ctor","is_generator_property","in_statement","is_generator","AST_SymbolDefun","AST_SymbolLambda","AST_Function","AST_Accessor","AST_SymbolDeclaration","track_used_binding_identifiers","is_parameter","parameters","duplicate","default_assignment","spread","strict_mode","tracker","add_parameter","check_strict","add","mark_default_assignment","mark_spread","mark_strict_mode","is_strict","used_parameters","symbol_type","param","expand","binding_element","AST_DefaultAssign","operator","AST_Expansion","expand_token","elements","first","is_expand","first_token","AST_SymbolFunarg","AST_Hole","names","is_array","AST_ObjectKeyVal","property_token","property","as_property_name","block","generator","loop","current_generator","current_async","params","_verify_symbol","cur","branch","AST_Case","AST_Default","vardefs","no_in","kind","def","sym_type","AST_SymbolVar","AST_SymbolConst","AST_SymbolLet","AST_VarDef","AST_Var","AST_Let","AST_Const","as_atom_node","_make_symbol","AST_SymbolRef","AST_Number","AST_RegExp","AST_False","AST_True","AST_Null","to_fun_args","_","__","default_seen_above","insert_default","default_value","AST_Object","properties","AST_Array","AST_Assign","expr_atom","allow_calls","allow_arrows","subscripts","AST_NewTarget","newexp","expr_list","AST_New","mark_pure","new_","exprs","maybe_sequence","spread_token","invalid_sequence","trailing_comma","params_or_seq_","AST_Call","len","unshift","comments_before_length","array_","object_or_destructuring_","cls","AST_ClassExpression","tagged","segments","AST_TemplateSegment","AST_TemplateString","closing","allow_trailing_comma","allow_empty","create_accessor","concise","concise_method_or_getset","AST_Node","KindOfClass","method","class_name","extends_","AST_SymbolDefClass","AST_SymbolClass","extends","is_class","get_ast","AST_SymbolMethod","is_static","AST_ConciseMethod","static","AST_ObjectGetter","AST_ObjectSetter","map_name","is_import","make_symbol","foreign_name","foreign_type","AST_SymbolImportForeign","AST_SymbolExportForeign","AST_SymbolExport","AST_NameMapping","map_nameAsterisk","AST_This","AST_Super","sym","noerror","comments","pure","call_args","AST_PrefixedTemplateString","maybe_unary","AST_Await","make_unary","AST_UnaryPrefix","expr_op","min_prec","prec","maybe_conditional","expr_ops","yes","consequent","AST_PropAccess","AST_ObjectProperty","maybe_assign","star","has_expression","AST_Yield","is_star","_yield_expression","commas","AST_Toplevel","DEFNODE","methods","base","self_props","PROPS","proto","initialize","Function","BASE","SUBCLASSES","CTOR","SELF_PROPS","DEFMETHOD","_clone","deep","self","clone","transform","TreeTransformer","$documentation","$propdoc","_walk","visitor","_visit","walk","warn_function","warn","txt","walk_body","clone_block_scope","block_scope","AST_Block","AST_StatementWithBody","TreeWalker","AST_LoopControl","AST_DWLoop","AST_Scope","variables","functions","uses_with","uses_eval","parent_scope","enclosed","cname","get_defun_scope","is_block_scope","Map","pinned","globals","wrap_commonjs","wrapped_tl","wrap_enclose","args_values","index","join","uses_arguments","args_as_names","out","all_symbols","AST_Symbol","seg","AST_Jump","AST_Exit","AST_SwitchBranch","name_import","name_export","AST_Unary","AST_Class","scope","AST_SymbolBlockDeclaration","AST_Constant","getValue","literal","AST_Atom","AST_NaN","AST_Undefined","AST_Infinity","AST_Boolean","callback","visit","create","before","after","descend","getPrototypeOf","find_parent","st","loopcontrol_target","tw","in_list","y","do_list","list","EXPECT_DIRECTIVE","CODE_LINE_BREAK","CODE_SPACE","is_some_comments","OutputStream","readonly","ascii_only","beautify","braces","ie8","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","quote_keys","quote_style","safari10","semicolons","shorthand","source_map","webkit","width","wrap_iife","comment_filter","regex_pos","lastIndexOf","indentation","current_col","current_line","current_pos","OUTPUT","to_utf8","identifier","get_full_char_code","toString","s","encode_string","dq","sq","quote_single","quote_double","make_string","mapping_token","mapping_name","has_parens","might_need_space","might_need_semicolon","might_add_newline","need_newline_indented","need_space","newline_insert","mappings","do_add_mapping","mapping","cline","ccol","ensure_line_len","delta","requireSemicolonChars","print","indent","space","half","back","repeat","with_indent","next_indent","save_indentation","newline","force_semicolon","has_nlb","current_width","should_break","comma","colon","print_name","make_name","print_string","escape_directive","encoded","print_template_string_chars","with_block","with_parens","with_square","add_mapping","option","opt","prepend_comments","_dumped","shift","filter","last_nlb","c","append_comments","tail","insert","push_node","pop_node","SymbolDef","orig","eliminated","replaced","global","export","mangled_name","undeclared","id","next_id","DEFPRINT","nodetype","in_directive","active_scope","use_asm","PARENS","display_body","is_toplevel","output","allow_directives","stmt","print_braced_empty","print_braced","parenthesize_for_noin","noin","parens","print_property_name","make_num","force_statement","make_block","need_constructor_parens","toLowerCase","exec","best","best_of","DEFMAP","stream","force_parens","_codegen","add_source_map","needs_parens","po","pp","so","sp","p1","_do_print_body","nokeyword","arg","_do_print","tag","parenthesize_tag","is_tagged","make_then","definition","get_name","allowShortHand","_print_getter_setter","MASK_EXPORT_DONT_MANGLE","MASK_EXPORT_WANT_MANGLE","next_mangled","ext","base54","reserved","unmangleable","eval","keep_fnames","keep_classnames","mangle","cache","redefined","defun","in_destructuring","for_scopes","save_scope","init_scope_vars","save_defun","save_labels","delete","def_function","mark_export","def_variable","destructuring","mark_enclosed","find_variable","reference","level","exported","def_global","refs","g","d","symbol","mangled_names","tricky_def","tricky_name","_default_mangler_options","lname","to_mangle","collect","save_nesting","avoid","to_avoid","add_def","reset","sort","find_colliding_names","rename","next_name","_print","consider","skip_string","tail_node","print_to_string","chars","frequency","leading","digits","compare","Compressor","false_by_default","arrows","booleans","booleans_as_integers","collapse_vars","comparisons","computed_props","conditionals","dead_code","drop_console","drop_debugger","evaluate","global_defs","hoist_funs","hoist_props","hoist_vars","if_return","inline","join_vars","keep_fargs","keep_infinity","loops","negate_iife","passes","pure_getters","pure_funcs","reduce_funcs","reduce_vars","sequences","side_effects","switches","top_retain","typeofs","unsafe","unsafe_arrows","unsafe_comps","unsafe_Function","unsafe_math","unsafe_methods","unsafe_proto","unsafe_regexp","unsafe_undefined","unused","warnings","funcs","vars","sequences_limit","warnings_produced","count","exposed","in_boolean_context","compress","resolve_defines","process_expression","min_count","stopping","pass","figure_out_scope","reset_opt_flags","info","clear_warnings","_squeezed","was_scope","hoist_properties","hoist_declarations","optimize","drop_unused","def_optimize","optimizer","compressor","_optimized","read_property","get_value","make_node_from_constant","fixed_value","is_modified","immutable","is_lhs","is_expr_pure","contains_this","is_func_expr","is_lhs_read_only","is_immutable","is_ref_of","make_node","make_sequence","reduce","merge_sequence","isFinite","maintain_this_binding","as_statement_array","thing","is_empty","can_be_evicted_from_block","loop_body","is_iife_call","is_undeclared_ref","tt","drop_side_effect_free","def_reduce_vars","reset_def","assignments","chained","direct_access","fixed","recursive_refs","should_replace","single_use","reset_variables","safe_ids","mark","loop_ids","reset_block_variables","safe","safe_to_read","safe_to_assign","mark_escaped","depth","is_constant","is_constant_expression","lazy_op","suppressor","mark_def_node","inlined","save_ids","mark_func_expr","iife","eq","saved_loop","has_break_or_continue","recursive_ref","ref_once","_top","global_names","def_is_string","identifier_atom","is_identifier_atom","tighten_body","statements","in_try","find_loop_scope_try","CHANGED","max_iter","eliminate_spurious_blocks","eliminate_dead_code","handle_if_return","sequencesize","sequencesize_2","join_consecutive_vars","collapse","candidates","stat_index","scanner","abort","hit","hit_stack","hit_index","handle_custom_scan_order","stop_after","find_stop","write_only","lvalues","equivalent_to","replace_all","is_declared","stop_if_hit","lhs_local","can_replace","value_def","candidate","funarg","may_modify","may_throw_on_access","may_throw","has_side_effects","side_effects_external","multi_replacer","extract_args","extract_candidates","get_lhs","get_lvalues","is_lhs_local","value_has_side_effects","replace_all_symbols","remove_candidate","has_overlapping_symbol","fn","fn_strict","found","scan_this","referenced","var_def","mangleable_var","get_rvalue","min","seen_dirs","multiple_if_returns","has_multiple_if_returns","in_lambda","next_index","ab","can_merge_flow","aborts","negate","as_statement_array_with_return","extract_functions","prev_index","lct","is_return_void","declarations_only","has_quit","extract_declarations_from_unreachable_code","seq","push_seq","to_simple_statement","decls","cons_seq","alt","join_object_assignments","defn","trimmed","diff","extract_object_assignments","target","remove_initializers","is_undefined","def_may_throw_on_access","_dot_throw","def_is_boolean","unary_bool","binary_bool","is_boolean","def_is_number","unary","binary","is_number","is_string","unary_side_effects","best_of_expression","ast1","ast2","convert_to_predicate","keys","def_find_defs","_find_defs","child","suffix","defines","to_node","object_fns","native_fns","Boolean","Number","static_fns","def_eval","_eval","unaryPrefix","element","non_converting_unary","non_converting_binary","pow","global_objs","static_values","aa","first_arg","static_value","static_fn","native_fn","constructor","def_negate","basic_negation","negated","global_pure_fns","def_has_side_effects","any","is_call_pure","def_may_throw","def_is_constant_expression","all_refs_local","scope_def","block_aborts","opt_AST_Lambda","drop_funcs","drop_vars","assign_as_unused","in_use_ids","fixed_ids","var_defs_by_id","initializations","destructuring_value","node_def","in_export","destructuring_cache","scan_ref_scoped","in_use","trim","__unused","unreferenced","template","drop_block","head","is_destructure","var_defs","assign","dirs","hoisted","vars_found","var_decl","to_assignments","varNames","var_names","_var_names","defs_by_id","make_sym","new_var","make_var_name","def_drop_side_effect_free","nodes","changed","values","pure_prop_access_globals","retain_top_func","if_break_in_loop","is_break","drop_it","rest","self_condition_length","negated_length","negated_is_best","default_branch","exact_match","decl","eliminate_branch","default_index","has_break","varDef","inline_array_like_spread","simple_args","is_func","EXIT","separator","consts","ast","fun","comp","compute_char_frequency","mangle_names","is_regular_func","can_inline","return_value","can_flatten_body","block_scoped","variable","safe_to_inject","can_inject_vars","can_inject_args","arg_vals_outer_refs","value_walker","scope_outer_refs","size","can_inject_args_values","is_reachable","can_inject_symbols","append_var","flatten_args","lines","flatten_vars","flatten_fn","ev","trim_right_for_undefined","lift_sequences","commutativeOperators","is_atomic","reachable","find_ref","scan_scope","reversible","is_strict_comparison","combined","ll","rr","truthy","falsy","lr","associative","reversed","within_array_or_object_literal","defun_def","lambda_def","value_length","has_symbol_ref","name_length","overhead","undef","ASSIGN_OPS","ASSIGN_OPS_COMMUTATIVE","safe_to_flatten","literals_in_boolean_context","lift_key","evaluateRight","arg_index","single_arg_diff","in_bool","is_true","is_false","booleanize","OPT_ARGUMENTS","sub","flatten_object","retValue","FLATTEN","flatten","k","optimized","has_special_symbol","segment","arrow","ancestors","is_destructuring_export_decl","keep","elem","should_retain","domprops","reserve_quoted_keys","addStrings","mangle_properties","reserved_option","builtins","debug","keep_quoted","only_cache","regex","objects","global_ref","new_global","Date","Symbol","ArrayBuffer","DataView","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","EvalError","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","JSON","Promise","Proxy","RangeError","ReferenceError","Reflect","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakSet","getOwnPropertyNames","find_builtins","debug_name_suffix","names_to_mangle","keep_quoted_strict","root","mangleStrings","can_mangle","should_mangle","mangled","debug_mangled","to_ascii","atob","b64","Buffer","from","to_base64","btoa","set_shorthand","init_cache","map_from_object","to_json","minify","files","match","quoted_props","timings","enclose","nameCache","sourceMap","wrap","now","includeSources","url","warning","orig_line_diff","dest_line_diff","MOZ_SourceMap","SourceMapGenerator","sourceRoot","orig_map","SourceMapConsumer","sources","sourceContent","sourceContentFor","setSourceContent","gen_line","gen_col","orig_line","orig_col","originalPositionFor","column","addMapping","generated","original","stringify","toJSON","SourceMap","total","error","infer_options","normalize_directives","MOZ_TO_ME","Program","M","my_start_token","my_end_token","from_moz","ArrayPattern","elm","ObjectPattern","AssignmentPattern","Type","FROM_MOZ_STACK","SpreadElement","argument","RestElement","TemplateElement","cooked","TemplateLiteral","quasis","TaggedTemplateExpression","quasi","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ExpressionStatement","TryStatement","handlers","handler","guardedHandlers","finalizer","Property","computed","MethodDefinition","ArrayExpression","ObjectExpression","SequenceExpression","MemberExpression","SwitchCase","VariableDeclaration","declarations","ImportDeclaration","specifiers","specifier","imported","local","ExportAllDeclaration","ExportNamedDeclaration","declaration","ExportDefaultDeclaration","Literal","rx","pattern","flags","MetaProperty","meta","Identifier","raw_token","moznode","loc","range","moztype","mytype","propmap","moz_to_me","me_to_moz","moz","how","my","to_moz","to_moz_block","to_moz_scope","def_to_moz","UpdateExpression","UnaryExpression","ClassDeclaration","ClassExpression","superClass","to_moz_in_destructuring","guard","name_mapping","isComputed","string_or_num","to_mozilla_ast","mynode","from_mozilla_ast","save_stack","TO_MOZ_STACK","0","component"],"mappings":"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ACA,uBACA,gBACA,YACA,aACA,uBACA,mBACA,yBACA,OACA,yBACA,WACA,QACA,cACA,kBACA,gBACA,iBACA,uBACA,qBACA,kBACA,gBACA,YACA,OACA,OACA,eACA,YACA,YACA,YACA,OACA,wBACA,iBACA,cACA,eACA,OACA,oBACA,UACA,WACA,iBACA,kBACA,oBACA,mBACA,OACA,YACA,UACA,kBACA,MACA,eACA,qBACA,SACA,eACA,WACA,gBACA,QACA,SACA,UACA,oBACA,mBACA,oBACA,kBACA,eACA,iBACA,gCACA,gCACA,gCACA,+BACA,6BACA,aACA,iBACA,iBACA,iBACA,qBACA,eACA,qBACA,MACA,iBACA,iBACA,mBACA,sBACA,kBACA,2BACA,kBACA,gBACA,kBACA,mBACA,eACA,qBACA,mBACA,cACA,oBACA,UACA,cACA,sBACA,eACA,gBACA,kBACA,iBACA,WACA,eACA,0BACA,mBACA,kBACA,WACA,SACA,cACA,aACA,UACA,gBACA,UACA,UACA,kBACA,wBACA,sBACA,oBACA,yBACA,uBACA,wBACA,oBACA,qBACA,uBACA,sBACA,mBACA,WACA,SACA,YACA,SACA,cACA,UACA,aACA,eACA,SACA,SACA,aACA,SACA,iBACA,kBACA,sBACA,SACA,SACA,UACA,WACA,eACA,aACA,eACA,cACA,cACA,cACA,QACA,YACA,cACA,aACA,aACA,aACA,WACA,YACA,YACA,aACA,gBACA,kBACA,iBACA,iBACA,iBACA,cACA,UACA,iBACA,SACA,WACA,WACA,SACA,YACA,iBACA,kBACA,wBACA,SACA,KACA,iBACA,gBACA,2BACA,gBACA,oBACA,sBACA,gBACA,aACA,iBACA,YACA,iBACA,aACA,WACA,eACA,UACA,mBACA,UACA,cACA,gBACA,UACA,SACA,YACA,cACA,eACA,iBACA,WACA,WACA,OACA,YACA,gBACA,mBACA,aACA,mBACA,oBACA,kBACA,oBACA,aACA,cACA,gBACA,2BACA,aACA,kBACA,iBACA,iBACA,kBACA,eACA,WACA,uBACA,SACA,yBACA,gBACA,iCACA,6BACA,iCACA,8BACA,4CACA,8BACA,qBACA,YACA,WACA,eACA,oBACA,sBACA,YACA,oBACA,YACA,WACA,mBACA,UACA,UACA,cACA,kBACA,aACA,qBACA,uBACA,gBACA,eACA,eACA,sBACA,iBACA,iBACA,kBACA,wBACA,+BACA,uBACA,4BACA,8BACA,0BACA,yBACA,0BACA,2BACA,yBACA,4BACA,wBACA,0BACA,0BACA,yBACA,4BACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,gBACA,aACA,aACA,eACA,mBACA,kBACA,YACA,cACA,WACA,mBACA,oBACA,oBACA,oBACA,WACA,gBACA,mBACA,oBACA,eACA,uBACA,6BACA,qBACA,eACA,eACA,sBACA,iBACA,iBACA,eACA,cACA,WACA,iBACA,gBACA,gBACA,gBACA,sBACA,cACA,WACA,cACA,aACA,eACA,gBACA,eACA,gBACA,qBACA,iBACA,eACA,WACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,eACA,eACA,WACA,sBACA,WACA,gBACA,eACA,cACA,cACA,mBACA,cACA,sBACA,WACA,gBACA,WACA,eACA,WACA,cACA,eACA,WACA,cACA,kBACA,mBACA,WACA,cACA,oBACA,kBACA,WACA,oBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,WACA,eACA,iBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,mBACA,mBACA,oBACA,kBACA,sBACA,4BACA,oBACA,WACA,aACA,kBACA,gBACA,mBACA,iBACA,eACA,iBACA,gBACA,cACA,cACA,cACA,eACA,qBACA,oBACA,oBACA,WACA,uBACA,eACA,WACA,cACA,gBACA,eACA,WACA,qBACA,gBACA,mBACA,mBACA,eACA,eACA,eACA,eACA,kBACA,WACA,aACA,eACA,WACA,oBACA,cACA,iBACA,YACA,WACA,qBACA,qBACA,mBACA,WACA,aACA,gBACA,oBACA,uBACA,sBACA,sBACA,sBACA,yBACA,uBACA,sBACA,uBACA,sBACA,wBACA,0BACA,yBACA,4BACA,yBACA,4BACA,sBACA,qBACA,qBACA,qBACA,uBACA,wBACA,WACA,6BACA,iCACA,kCACA,kCACA,8BACA,mCACA,4BACA,2BACA,2BACA,4BACA,2BACA,2BACA,mCACA,kCACA,6BACA,6BACA,6BACA,2BACA,qBACA,qBACA,6BACA,wBACA,qBACA,0BACA,qBACA,kCACA,2BACA,yBACA,mBACA,sBACA,0BACA,gCACA,qBACA,oBACA,4BACA,wBACA,0BACA,oBACA,sBACA,sBACA,yBACA,0BACA,wBACA,wBACA,2BACA,8BACA,qBACA,mBACA,sBACA,0BACA,wBACA,0BACA,0BACA,wBACA,oCACA,kCACA,iCACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,2BACA,wBACA,qBACA,6BACA,uBACA,wBACA,qBACA,wBACA,wBACA,0BACA,oCACA,kCACA,sBACA,4BACA,yBACA,oBACA,qBACA,4BACA,qBACA,yBACA,uBACA,sBACA,sBACA,yBACA,2BACA,0BACA,oBACA,wBACA,uBACA,sBACA,4BACA,6BACA,0BACA,+BACA,4BACA,4BACA,qBACA,6BACA,6BACA,4BACA,0BACA,uBACA,qBACA,qBACA,sBACA,6BACA,wBACA,sBACA,qBACA,yBACA,wBACA,wBACA,0BACA,yBACA,qBACA,sBACA,yBACA,2BACA,uBACA,wBACA,wBACA,wBACA,oBACA,4BACA,sBACA,qBACA,wBACA,wBACA,6BACA,qBACA,qBACA,oBACA,qBACA,uBACA,wBACA,yBACA,WACA,WACA,cACA,OACA,YACA,cACA,WACA,YACA,YACA,eACA,cACA,eACA,mBACA,uBACA,WACA,OACA,iBACA,YACA,sBACA,4BACA,mBACA,oBACA,yBACA,uBACA,gBACA,2BACA,WACA,mBACA,eACA,YACA,yBACA,IACA,uBACA,+BACA,eACA,QACA,eACA,QACA,aACA,eACA,cACA,wBACA,UACA,QACA,aACA,QACA,uBACA,UACA,eACA,SACA,kBACA,QACA,aACA,YACA,QACA,iBACA,cACA,cACA,WACA,UACA,UACA,gBACA,mBACA,gBACA,cACA,iBACA,0BACA,QACA,aACA,aACA,aACA,aACA,aACA,aACA,QACA,iBACA,2BACA,kBACA,sCACA,cACA,qCACA,qCACA,+CACA,uCACA,sBACA,uBACA,oCACA,oCACA,4CACA,0BACA,QACA,iBACA,aACA,WACA,wBACA,gBACA,OACA,YACA,OACA,YACA,WACA,aACA,aACA,eACA,eACA,aACA,WACA,WACA,WACA,uBACA,SACA,UACA,aACA,WACA,UACA,gBACA,eACA,eACA,oBACA,mBACA,mBACA,gBACA,eACA,mBACA,SACA,wBACA,WACA,YACA,aACA,WACA,aACA,kBACA,OACA,oBACA,oBACA,oBACA,kBACA,mBACA,gBACA,kBACA,sBACA,wBACA,kBACA,oBACA,oBACA,iBACA,qBACA,qBACA,mBACA,kBACA,sBACA,qBACA,oBACA,uBACA,iBACA,eACA,cACA,mBACA,sBACA,kBACA,6BACA,kBACA,mBACA,sBACA,gBACA,kBACA,qBACA,kBACA,oBACA,mBACA,mBACA,qBACA,oBACA,gBACA,mBACA,oBACA,kBACA,iBACA,qBACA,mBACA,kBACA,sBACA,kBACA,mBACA,iBACA,mBACA,oBACA,sBACA,oBACA,wBACA,oBACA,uBACA,mBACA,qBACA,iBACA,sBACA,2BACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,mBACA,0BACA,uBACA,sBACA,mBACA,sBACA,0BACA,sBACA,sBACA,kBACA,mBACA,mBACA,mBACA,qBACA,mBACA,kBACA,UACA,UACA,eACA,aACA,gBACA,gBACA,aACA,gBACA,cACA,YACA,qBACA,cACA,uBACA,aACA,gBACA,iBACA,WACA,cACA,iBACA,iBACA,mBACA,aACA,iBACA,wBACA,OACA,mCACA,iCACA,cACA,OACA,YACA,iBACA,MACA,WACA,WACA,WACA,sBACA,qBACA,wBACA,eACA,yBACA,gCACA,2BACA,wBACA,oBACA,oBACA,gBACA,mBACA,SACA,eACA,QACA,cACA,YACA,WACA,aACA,qBACA,iBACA,aACA,aACA,YACA,SACA,gBACA,OACA,4BACA,WACA,OACA,OACA,UACA,iBACA,gBACA,WACA,QACA,WACA,gBACA,uBACA,gCACA,uBACA,SACA,OACA,SACA,kBACA,uBACA,wBACA,QACA,YACA,aACA,aACA,cACA,OACA,OACA,MACA,SACA,UACA,SACA,QACA,UACA,WACA,YACA,UACA,cACA,iBACA,YACA,kBACA,mBACA,WACA,mCACA,4BACA,+BACA,wBACA,mBACA,0BACA,iCACA,mBACA,YACA,sBACA,qBACA,iCACA,6BACA,oBACA,oBACA,mBACA,sBACA,oBACA,8BACA,sBACA,sBACA,8BACA,sBACA,uBACA,uBACA,aACA,eACA,aACA,YACA,mBACA,YACA,kBACA,oBACA,mBACA,eACA,YACA,YACA,YACA,WACA,YACA,UACA,qBACA,oBACA,oBACA,oBACA,sBACA,mBACA,iBACA,mBACA,qBACA,uBACA,wBACA,qBACA,yBACA,sBACA,uBACA,qBACA,uBACA,2CACA,kCACA,qCACA,iCACA,gCACA,8BACA,2BACA,6BACA,+BACA,kCACA,kCACA,iCACA,gCACA,kCACA,kCACA,gCACA,yBACA,yBACA,yBACA,iCACA,yBACA,0BACA,0BACA,MACA,OACA,kBACA,eACA,8BACA,sBACA,aACA,gBACA,gBACA,uBACA,sBACA,kBACA,oBACA,uBACA,YACA,YACA,iBACA,sBACA,gBACA,cACA,cACA,kCACA,6BACA,mBACA,mBACA,wBACA,iBACA,eACA,cACA,UACA,WACA,gBACA,aACA,mBACA,eACA,oBACA,wBACA,uBACA,uBACA,6BACA,mBACA,wBACA,6BACA,gBACA,wBACA,aACA,wBACA,eACA,oBACA,oBACA,oBACA,iBACA,sBACA,uBACA,iBACA,sBACA,sBACA,sBACA,qBACA,cACA,kBACA,aACA,qBACA,eACA,aACA,eACA,qBACA,sBACA,iBACA,gBACA,eACA,gBACA,qBACA,qBACA,qBACA,iBACA,aACA,wBACA,eACA,yBACA,0BACA,0BACA,aACA,iBACA,eACA,iBACA,cACA,gBACA,yBACA,sBACA,YACA,mBACA,6BACA,8BACA,0BACA,2BACA,gBACA,kBACA,iBACA,uBACA,kBACA,mBACA,cACA,gBACA,iBACA,aACA,mBACA,yBACA,wBACA,yBACA,oBACA,eACA,qBACA,oBACA,gBACA,qBACA,wBACA,wBACA,8BACA,eACA,eACA,gBACA,gBACA,oBACA,kBACA,gBACA,mBACA,iBACA,gBACA,iBACA,UACA,wBACA,yBACA,oBACA,gBACA,cACA,eACA,iBACA,kBACA,oBACA,QACA,MACA,OACA,oBACA,SACA,aACA,cACA,wBACA,cACA,OACA,oBACA,gBACA,QACA,WACA,kBACA,gBACA,mBACA,oBACA,sBACA,SACA,WACA,8BACA,cACA,iCACA,MACA,eACA,YACA,cACA,qBACA,OACA,aACA,eACA,WACA,WACA,eACA,mBACA,SACA,eACA,WACA,MACA,2BACA,2BACA,sBACA,sBACA,sBACA,sBACA,OACA,SACA,UACA,6BACA,6BACA,gBACA,SACA,8BACA,sBACA,sBACA,SACA,iBACA,gBACA,iBACA,YACA,YACA,kBACA,kBACA,oBACA,4BACA,4BACA,mCACA,mCACA,gCACA,gCACA,uCACA,uCACA,qBACA,gCACA,gCACA,qBACA,8BACA,8BACA,qBACA,qBACA,kBACA,kBACA,UACA,oBACA,aACA,KACA,gBACA,SACA,wBACA,sBACA,uBACA,uBACA,oBACA,OACA,oBACA,8BACA,kBACA,sBACA,eACA,mBACA,aACA,SACA,cACA,mBACA,kBACA,qBACA,wBACA,4BACA,oBACA,eACA,SACA,cACA,gBACA,oBACA,wBACA,gBACA,UACA,mBACA,QACA,cACA,mBACA,IACA,YACA,qBACA,iBACA,YACA,gBACA,aACA,WACA,UACA,eACA,0BACA,uBACA,yBACA,0BACA,0BACA,sBACA,+BACA,wBACA,4BACA,qBACA,WACA,yCACA,wBACA,8BACA,yCACA,8BACA,2BACA,SACA,UACA,MACA,SACA,UACA,OACA,QACA,WACA,qBACA,4BACA,sBACA,kBACA,4BACA,iBACA,eACA,wBACA,iBACA,gBACA,QACA,aACA,iBACA,mBACA,OACA,iBACA,SACA,UACA,WACA,aACA,eACA,UACA,2BACA,iBACA,kBACA,yBACA,wBACA,WACA,kBACA,cACA,eACA,mBACA,iBACA,aACA,YACA,eACA,eACA,SACA,gBACA,iBACA,uBACA,mBACA,kBACA,cACA,2BACA,aACA,QACA,UACA,WACA,iBACA,qBACA,eACA,gBACA,yBACA,qBACA,eACA,cACA,wBACA,gBACA,8BACA,YACA,OACA,aACA,eACA,UACA,QACA,SACA,YACA,qBACA,YACA,eACA,iBACA,cACA,qBACA,oBACA,oBACA,+BACA,+BACA,mBACA,0BACA,yBACA,eACA,qBACA,sBACA,eACA,eACA,gBACA,iBACA,0BACA,0BACA,cACA,eACA,qBACA,oBACA,cACA,cACA,aACA,gBACA,gBACA,cACA,wBACA,qBACA,yBACA,WACA,yBACA,oBACA,0BACA,6BACA,mBACA,qBACA,yBACA,qBACA,oBACA,wBACA,oBACA,wBACA,iCACA,kBACA,oBACA,2BACA,sBACA,mBACA,qBACA,WACA,sCACA,mBACA,iBACA,iBACA,oBACA,cACA,aACA,qBACA,yBACA,oBACA,eACA,oBACA,0BACA,gCACA,wBACA,6BACA,8BACA,8BACA,2BACA,yBACA,oBACA,oBACA,oBACA,oBACA,oBACA,2BACA,oBACA,oBACA,wBACA,yBACA,qBACA,yBACA,+BACA,wBACA,mBACA,yBACA,mBACA,iBACA,qBACA,2BACA,yBACA,wBACA,wBACA,0BACA,cACA,qBACA,kBACA,qBACA,qBACA,qBACA,kBACA,kBACA,YACA,gBACA,iBACA,2BACA,kBACA,mBACA,iBACA,YACA,qBACA,yBACA,YACA,gBACA,WACA,iBACA,aACA,mBACA,mBACA,sBACA,4BACA,4BACA,kCACA,kCACA,gCACA,gCACA,sCACA,sCACA,sBACA,gCACA,gCACA,sBACA,8BACA,8BACA,iBACA,sBACA,sBACA,oBACA,WACA,eACA,oBACA,qBACA,yBACA,2BACA,UACA,iBACA,qBACA,gBACA,mBACA,gBACA,iBACA,gBACA,kBACA,mBACA,mBACA,iBACA,kBACA,wBACA,iBACA,qBACA,4BACA,kBACA,eACA,mBACA,eACA,gBACA,kBACA,iBACA,cACA,gBACA,eACA,oBACA,qBACA,oBACA,wBACA,4BACA,gBACA,gBACA,gBACA,gBACA,sBACA,6BACA,yBACA,kCACA,wBACA,yBACA,oBACA,uBACA,oBACA,yBACA,8BACA,+BACA,0BACA,8BACA,6BACA,8BACA,uBACA,2BACA,8BACA,4BACA,0BACA,2BACA,8BACA,0BACA,8BACA,2BACA,mCACA,0CACA,gCACA,kCACA,iCACA,wCACA,qCACA,wCACA,sCACA,qCACA,uCACA,sCACA,gCACA,8BACA,+BACA,gCACA,mCACA,+BACA,wBACA,oBACA,qBACA,qBACA,oBACA,oBACA,wBACA,oBACA,4BACA,oBACA,oBACA,yBACA,8BACA,0BACA,iCACA,0BACA,yBACA,4BACA,qBACA,yBACA,4BACA,uBACA,wBACA,0BACA,iCACA,gCACA,kCACA,6BACA,qBACA,yBACA,kCACA,wBACA,oBACA,iCACA,yBACA,6BACA,sCACA,+BACA,kCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,uBACA,2BACA,0BACA,2BACA,0BACA,wBACA,yBACA,uBACA,uBACA,sBACA,sBACA,sBACA,0BACA,wBACA,mCACA,iCACA,8BACA,kCACA,wBACA,+BACA,qBACA,yBACA,yBACA,yBACA,aACA,aACA,SACA,oBACA,SACA,sBACA,kBACA,+BACA,YACA,gBACA,yBACA,4BACA,qBACA,MACA,aACA,eACA,qBACA,uBACA,2BACA,gBACA,UACA,eACA,SACA,aACA,iBACA,eACA,SACA,cACA,YACA,4BACA,8BACA,8BACA,4BACA,6BACA,+BACA,UACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,aACA,qBACA,2BACA,mBACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,qBACA,6BACA,qBACA,iBACA,iBACA,YACA,UACA,cACA,gBACA,2BACA,WACA,YACA,eACA,iBACA,oBACA,WACA,oBACA,gBACA,cACA,gBACA,OACA,cACA,cACA,YACA,cACA,YACA,eACA,mBACA,gBACA,YACA,aACA,QACA,aACA,YACA,aACA,kBACA,aACA,YACA,UACA,WACA,cACA,eACA,0BACA,wBACA,+BACA,+BACA,mBACA,qCACA,sBACA,iCACA,oBACA,SACA,gBACA,eACA,iBACA,yBACA,yBACA,uBACA,6BACA,cACA,WACA,MACA,kBACA,eACA,mBACA,MACA,cACA,cACA,aACA,oBACA,qBACA,+BACA,qBACA,kBACA,iBACA,iBACA,SACA,UACA,iBACA,cACA,qCACA,oCACA,8BACA,iCACA,8BACA,2BACA,6BACA,2BACA,gBACA,WACA,gBACA,UACA,WACA,gBACA,SACA,YACA,gBACA,mBACA,qBACA,wBACA,uBACA,qBACA,qBACA,iBACA,UACA,UACA,kBACA,cACA,oBACA,mBACA,eACA,oBACA,wBACA,cACA,6BACA,eACA,uBACA,mBACA,uBACA,oBACA,sBACA,uBACA,wBACA,yBACA,kBACA,sBACA,0BACA,gBACA,gBACA,sBACA,6BACA,wBACA,kBACA,oBACA,yBACA,kBACA,wCACA,cACA,mBACA,qBACA,yBACA,wBACA,YACA,aACA,SACA,SACA,cACA,iBACA,4BACA,0BACA,8BACA,uBACA,gBACA,qCACA,iBACA,iBACA,kBACA,kBACA,cACA,gBACA,OACA,SACA,SACA,mBACA,mBACA,mBACA,mBACA,UACA,YACA,gBACA,IACA,QACA,OACA,QACA,MACA,WACA,eACA,+BACA,cACA,SACA,gBACA,aACA,YACA,iBACA,WACA,OACA,QACA,SACA,YACA,SACA,aACA,gBACA,sBACA,oBACA,gBACA,MACA,cACA,eACA,eACA,SACA,aACA,mBACA,YACA,gBACA,aACA,kBACA,YACA,cACA,WACA,cACA,UACA,aACA,WACA,YACA,UACA,kBACA,kBACA,YACA,eACA,WACA,sBACA,aACA,iBACA,kBACA,SACA,YACA,MACA,UACA,QACA,YACA,QACA,gBACA,cACA,aACA,eACA,aACA,YACA,oBACA,aACA,MACA,kBACA,oBACA,QACA,MACA,cACA,UACA,SACA,UACA,WACA,mBACA,YACA,kBACA,SACA,aACA,eACA,UACA,QACA,UACA,UACA,uBACA,gCACA,sBACA,iBACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,iBACA,qBACA,oBACA,oBACA,0BACA,gBACA,qBACA,qBACA,0BACA,mBACA,cACA,MACA,cACA,kBACA,UACA,mBACA,aACA,SACA,eACA,cACA,aACA,aACA,eACA,cACA,aACA,eACA,kBACA,oBACA,UACA,mBACA,QACA,eACA,MACA,QACA,UACA,QACA,YACA,cACA,OACA,QACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,OACA,cACA,eACA,cACA,SACA,aACA,WACA,kBACA,gBACA,qBACA,oBACA,aACA,cACA,gBACA,aACA,iBACA,eACA,cACA,YACA,WACA,cACA,YACA,WACA,aACA,eACA,YACA,WACA,OACA,OACA,UACA,IACA,OACA,sBACA,qBACA,aACA,wBACA,wBACA,kBACA,mBACA,mBACA,oBACA,sBACA,oBACA,kBACA,uBACA,sBACA,iBACA,kBACA,kBACA,mBACA,qBACA,sBACA,sBACA,mBACA,iBACA,WACA,UACA,iBACA,iBACA,WACA,aACA,UACA,UACA,gBACA,UACA,OACA,eACA,iBACA,YACA,WACA,iBACA,eACA,eACA,OACA,gBACA,UACA,eACA,OACA,MACA,aACA,OACA,qBACA,aACA,kBACA,mBACA,cACA,aACA,gBACA,wBACA,YACA,oBACA,QACA,OACA,iBACA,OACA,OACA,OACA,WACA,OACA,YACA,eACA,SACA,gBACA,sBACA,4BACA,6BACA,sBACA,sBACA,kBACA,eACA,eACA,sBACA,sBACA,qBACA,sBACA,qBACA,cACA,oBACA,oBACA,oBACA,gBACA,eACA,qBACA,qBACA,qBACA,iBACA,eACA,aACA,mBACA,yBACA,0BACA,mBACA,mBACA,eACA,eACA,oBACA,yBACA,0BACA,oBACA,oBACA,iBACA,cACA,kBACA,mBACA,cACA,oBACA,oBACA,mBACA,oBACA,mBACA,aACA,kBACA,kBACA,kBACA,eACA,cACA,mBACA,mBACA,mBACA,gBACA,cACA,YACA,iBACA,sBACA,uBACA,iBACA,iBACA,cACA,SACA,eACA,QACA,gBACA,qBACA,iBACA,eACA,cACA,gBACA,SACA,uBACA,aACA,aACA,qBACA,YACA,YACA,aACA,cACA,cACA,kBACA,OACA,UACA,SACA,aACA,cACA,aACA,gBACA,WACA,iBACA,UACA,cACA,SACA,WACA,UACA,aACA,aACA,IACA,OACA,SACA,iBACA,eACA,cACA,kBACA,cACA,cACA,SACA,uBACA,eACA,wBACA,aACA,YACA,SACA,UACA,eACA,cACA,gBACA,oBACA,yBACA,sBACA,OACA,QACA,WACA,OACA,KACA,OACA,YACA,cACA,cACA,QACA,KACA,QACA,QACA,YACA,iBACA,UACA,eACA,mBACA,wBACA,OACA,SACA,WACA,aACA,YACA,eACA,gBACA,wBACA,WACA,eACA,UACA,iBACA,yBACA,oBACA,gBACA,UACA,oBACA,YACA,aACA,WACA,SACA,aACA,OACA,YACA,YACA,UACA,QACA,kBACA,aACA,YACA,aACA,iBACA,gBACA,aACA,gBACA,kBACA,YACA,uBACA,cACA,eACA,eACA,aACA,QACA,aACA,eACA,oBACA,aACA,aACA,cACA,YACA,cACA,UACA,UACA,OACA,YACA,YACA,aACA,WACA,WACA,gBACA,YACA,WACA,UACA,gBACA,QACA,gBACA,YACA,aACA,QACA,YACA,SACA,UACA,MACA,QACA,MACA,OACA,WACA,cACA,WACA,UACA,WACA,gBACA,kBACA,YACA,UACA,QACA,QACA,sBACA,8BACA,aACA,qBACA,4BACA,YACA,YACA,OACA,cACA,aACA,YACA,eACA,aACA,kBACA,kBACA,kBACA,aACA,cACA,UACA,UACA,oBACA,0BACA,UACA,wBACA,0BACA,mBACA,cACA,eACA,aACA,aACA,UACA,gBACA,WACA,qBACA,uBACA,yBACA,uBACA,0BACA,SACA,gBACA,iBACA,iBACA,gBACA,UACA,qBACA,uCACA,kCACA,UACA,aACA,eACA,YACA,aACA,kBACA,UACA,cACA,qBACA,cACA,YACA,WACA,eACA,UACA,kBACA,kBACA,kBACA,oBACA,mBACA,cACA,gBACA,UACA,cACA,cACA,WACA,aACA,UACA,aACA,WACA,0BACA,SACA,gBACA,SACA,kBACA,iBACA,oBACA,gBACA,aACA,uBACA,0BACA,MACA,OACA,QACA,oBACA,gBACA,mBACA,eACA,WACA,kBACA,SACA,iBACA,eACA,kBACA,oBACA,qBACA,eACA,qBACA,qBACA,sBACA,gBACA,sBACA,wBACA,gBACA,2BACA,qBACA,kBACA,mBACA,oBACA,cACA,kBACA,iBACA,yBACA,qBACA,2BACA,gBACA,kBACA,wBACA,cACA,oBACA,mBACA,oBACA,iBACA,aACA,iBACA,qBACA,oBACA,kBACA,cACA,uBACA,uBACA,2BACA,kBACA,+BACA,0BACA,oBACA,mBACA,qBACA,qBACA,oBACA,kBACA,cACA,mBACA,eACA,gBACA,qBACA,cACA,8BACA,gBACA,uBACA,cACA,wBACA,qBACA,iBACA,kBACA,kBACA,kBACA,yBACA,yBACA,4BACA,kCACA,kCACA,wCACA,wCACA,sCACA,sCACA,4CACA,4CACA,4BACA,sCACA,sCACA,4BACA,oCACA,oCACA,4BACA,4BACA,iBACA,gBACA,qBACA,+BACA,wBACA,gBACA,eACA,mBACA,qBACA,mBACA,cACA,cACA,cACA,iBACA,kBACA,gBACA,cACA,kBACA,mBACA,mBACA,eACA,cACA,SACA,MACA,WACA,WACA,UACA,eACA,UACA,WACA,OACA,WACA,cACA,cACA,eACA,gBACA,aACA,eACA,eACA,gBACA,cACA,mBACA,cACA,SACA,QACA,cACA,KACA,KACA,IACA,OACA,UACA,eACA,eACA,UACA,eACA,WACA,UACA,WACA,KACA,QACA,kBACA,UACA,SACA,kBACA,eACA,YACA,qBACA,UACA,UACA,iBACA,iBACA,eACA,sBACA,mBACA,kBACA,gBACA,aACA,eACA,cACA,gBACA,QACA,sBACA,sBACA,mBACA,iBACA,YACA,SACA,eACA,gBACA,aACA,iBACA,aACA,iBACA,oBACA,qBACA,cACA,eACA,oBACA,gBACA,qBACA,YACA,aACA,eACA,cACA,cACA,gBACA,uBACA,WACA,eACA,iBACA,oBACA,QACA,YACA,SACA,SACA,SACA,YACA,YACA,aACA,aACA,YACA,cACA,cACA,aACA,cACA,iBACA,SACA,cACA,eACA,SACA,SACA,mBACA,aACA,aACA,kBACA,SACA,aACA,MACA,UACA,YACA,SACA,UACA,2BACA,WACA,kBACA,aACA,gBACA,UACA,gBACA,UACA,SACA,WACA,WACA,aACA,WACA,UACA,WACA,kBACA,eACA,cACA,UACA,oBACA,cACA,cACA,cACA,2BACA,6BACA,iBACA,aACA,SACA,kBACA,oBACA,oBACA,mBACA,OACA,gBACA,WACA,WACA,YACA,aACA,2BACA,sBACA,eACA,6BACA,oBACA,YACA,oBACA,sBACA,sBACA,qBACA,aACA,qBACA,WACA,OACA,YACA,WACA,SACA,QACA,KACA,KACA,SACA,IACA,WACA,gBACA,cACA,mBACA,WACA,YACA,UACA,QACA,SACA,QACA,cACA,aACA,SACA,mBACA,0BACA,0BACA,UACA,gBACA,SACA,YACA,qBACA,WACA,UACA,UACA,MACA,eACA,aACA,eACA,cACA,YACA,UACA,QACA,WACA,WACA,UACA,YACA,YACA,oBACA,QACA,YACA,SACA,OACA,WACA,QACA,aACA,QACA,YACA,OACA,cACA,sBACA,aACA,iBACA,kBACA,MACA,SACA,yBACA,UACA,YACA,aACA,yBACA,QACA,WACA,+BACA,YACA,SACA,aACA,aACA,eACA,WACA,4BACA,kBACA,cACA,IACA,OACA,eACA,WACA,aACA,0BACA,WACA,QACA,QACA,aACA,UACA,UACA,kBACA,aACA,mBACA,WACA,WACA,kBACA,WACA,QACA,OACA,eACA,YACA,cACA,WACA,WACA,YACA,WACA,SACA,aACA,aACA,cACA,UACA,UACA,OACA,YACA,WACA,WACA,SACA,YACA,aACA,oBACA,YACA,QACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,gBACA,WACA,WACA,aACA,WACA,QACA,QACA,QACA,cACA,gBACA,aACA,eACA,QACA,QACA,QACA,YACA,cACA,OACA,cACA,wBACA,eACA,yBACA,YACA,mBACA,eACA,aACA,iBACA,eACA,0BACA,oBACA,0BACA,yBACA,uBACA,wBACA,cACA,aACA,sBACA,cACA,uBACA,WACA,iBACA,uBACA,cACA,YACA,gBACA,cACA,wBACA,kBACA,uBACA,uBACA,qBACA,sBACA,aACA,YACA,QACA,WACA,MACA,UACA,cACA,OACA,aACA,cACA,aACA,iBACA,aACA,SACA,QACA,UACA,KACA,QACA,cACA,eACA,eACA,0BACA,uBACA,SACA,YACA,SACA,YACA,oBACA,OACA,eACA,gBACA,cACA,YACA,SACA,aACA,oBACA,oBACA,KACA,KACA,OACA,UACA,QACA,iBACA,cACA,iBACA,kBACA,cACA,gBACA,MACA,kBACA,mBACA,kBACA,SACA,wBACA,YACA,cACA,qBACA,oBACA,eACA,iBACA,mBACA,qBACA,iBACA,UACA,aACA,UACA,cACA,wBACA,qBACA,uBACA,wBACA,sBACA,SACA,+BACA,iBACA,uBACA,gBACA,iBACA,6BACA,mBACA,wBACA,mBACA,aACA,uBACA,kBACA,eACA,aACA,qBACA,iBACA,UACA,mBACA,UACA,SACA,0BACA,gCACA,sBACA,cACA,iBACA,yBACA,oBACA,uBACA,yBACA,mBACA,uBACA,aACA,mBACA,mBACA,WACA,eACA,kBACA,aACA,UACA,aACA,aACA,wBACA,yBACA,gBACA,oCACA,uBACA,cACA,cACA,WACA,eACA,WACA,WACA,UACA,sBACA,UACA,WACA,SACA,cACA,kBACA,WACA,qBACA,cACA,cACA,kBACA,aACA,mBACA,WACA,eACA,iBACA,cACA,mBACA,mCACA,mBACA,2BACA,sBACA,wBACA,eACA,qBACA,mBACA,gBACA,uBACA,2BACA,oBACA,oBACA,sBACA,sBACA,sBACA,uBACA,mBACA,iBACA,mBACA,kBACA,aACA,eACA,eACA,kBACA,mBACA,2BACA,oBACA,UACA,oBACA,iBACA,eACA,aACA,eACA,aACA,mBACA,qBACA,2BACA,kBACA,oBACA,eACA,aACA,2BACA,yBACA,eACA,WACA,oBACA,gBACA,iBACA,qBACA,kBACA,yBACA,kBACA,UACA,oBACA,iBACA,eACA,YACA,wBACA,aACA,YACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,aACA,qBACA,eACA,YACA,aACA,mBACA,kBACA,wBACA,0BACA,iBACA,mBACA,UACA,YACA,SACA,cACA,2BACA,6BACA,2BACA,WACA,KACA,oBACA,gBACA,WACA,QACA,QACA,iBACA,WACA,sBACA,MACA,eACA,iBACA,gBACA,gBACA,iBACA,eACA,aACA,WACA,YACA,iBACA,OACA,OACA,UACA,UACA,SACA,SACA,OACA,YACA,OACA,OACA,UACA,kBACA,kBACA,qBACA,OACA,WACA,OACA,WACA,SACA,wBACA,UACA,WACA,YACA,cACA,QACA,QACA,qBACA,oBACA,OACA,KACA,aACA,WACA,YACA,aACA,oBACA,kBACA,mBACA,iBACA,SACA,WACA,UACA,iBACA,YACA,aACA,mBACA,UACA,OACA,OACA,MACA,MACA,kCACA,UACA,WACA,cACA,gBACA,QACA,aACA,UACA,YACA,sBACA,sBACA,OACA,OACA,qBACA,sBACA,qBACA,iBACA,mBACA,uBACA,kBACA,WACA,wBACA,6BACA,gBACA,iBACA,YACA,iBACA,mBACA,sBACA,eACA,oBACA,0BACA,mBACA,iBACA,uBACA,sBACA,oBACA,mBACA,oBACA,gBACA,0BACA,mBACA,oBACA,oBACA,sBACA,yBACA,mBACA,gBACA,gBACA,iBACA,sBACA,cACA,2BACA,4BACA,uBACA,iBACA,cACA,aACA,gBACA,QACA,YACA,cACA,YACA,aACA,QACA,cACA,gBACA,cACA,wBACA,qBACA,qBACA,eACA,aACA,aACA,mBACA,aACA,YACA,aACA,eACA,YACA,iBACA,iBACA,iBACA,WACA,uBACA,UACA,aACA,KACA,OACA,cACA,UACA,6BACA,WACA,2BACA,SACA,cACA,cACA,oBACA,6BACA,gBACA,qBACA,aACA,YACA,UACA,cACA,eACA,WACA,gBACA,WACA,cACA,OACA,aACA,YACA,QACA,cACA,QACA,SACA,gBACA,gBACA,iBACA,kBACA,kBACA,YACA,YACA,qBACA,8BACA,gBACA,iBACA,gBACA,aACA,WACA,WACA,cACA,aACA,YACA,YACA,kBACA,SACA,YACA,UACA,OACA,SACA,WACA,UACA,YACA,WACA,YACA,cACA,WACA,cACA,WACA,OACA,OACA,kBACA,iBACA,KACA,KACA,KACA,KACA,eACA,oBACA,oBACA,UACA,MACA,UACA,SACA,gBACA,kBACA,cACA,UACA,YACA,UACA,WACA,OACA,UACA,OACA,OACA,QACA,SACA,OACA,WACA,YACA,eACA,YACA,mBACA,cACA,YACA,cACA,YACA,qBACA,kBACA,eACA,mBACA,WACA,YACA,YACA,oBACA,WACA,SACA,SACA,aACA,aACA,iBACA,iBACA,iBACA,iBACA,SACA,OACA,cACA,aACA,SACA,eACA,mBACA,iBACA,gBACA,QACA,iBACA,gBACA,oBACA,OACA,cACA,YACA,YACA,UACA,iBACA,aACA,WACA,aACA,SACA,YACA,0BACA,SACA,OACA,YACA,cACA,QACA,OACA,aACA,mBACA,sBACA,kBACA,YACA,iBACA,oBACA,gBACA,WACA,OACA,eACA,iBACA,YACA,SACA,mBACA,YACA,eACA,SACA,gBACA,WACA,cACA,OACA,aACA,MACA,QACA,QACA,OACA,cACA,cACA,WACA,YACA,qBACA,eACA,OACA,UACA,YACA,UACA,MACA,QACA,aACA,YACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,WACA,MACA,UACA,SACA,gBACA,cACA,eACA,aACA,eACA,eACA,aACA,cACA,YACA,cACA,OACA,SACA,aACA,aACA,gBACA,eACA,YACA,eACA,YACA,eACA,cACA,cACA,cACA,QACA,OACA,YACA,mBACA,WACA,YACA,QACA,aACA,cACA,UACA,SACA,kBACA,MACA,aACA,YACA,kBACA,kBACA,0BACA,cACA,cACA,YACA,YACA,iBACA,WACA,WACA,UACA,cACA,QACA,oBACA,eACA,eACA,aACA,YACA,YACA,cACA,SACA,UACA,kBACA,UACA,eACA,kBACA,UACA,SACA,WACA,YACA,MACA,aACA,YACA,cACA,YACA,WACA,WACA,aACA,iBACA,eACA,OACA,SACA,QACA,OACA,SACA,UACA,YACA,gBACA,gBACA,iBACA,cACA,WACA,UACA,YACA,SACA,iBACA,oBACA,cACA,SACA,wBACA,UACA,UACA,mBACA,sBACA,qBACA,0BACA,sBACA,iCACA,mBACA,6BACA,iBACA,aACA,cACA,sBACA,sBACA,6BACA,YACA,UACA,gBACA,mBACA,qBACA,cACA,iBACA,gBACA,gBACA,uBACA,uBACA,YACA,gBACA,eACA,eACA,iBACA,kBACA,cACA,aACA,YACA,2BACA,eACA,kBACA,kBACA,iBACA,iBACA,UACA,eACA,WACA,YACA,qBACA,qBACA,eACA,eACA,YACA,iBACA,gBACA,mBACA,kBACA,SACA,wBACA,qBACA,oBACA,cACA,mBACA,qBACA,uBACA,2BACA,YACA,2BACA,uBACA,wBACA,eACA,qBACA,gBACA,eACA,YACA,eACA,eACA,aACA,uBACA,mBACA,qBACA,cACA,mBACA,uBACA,sBACA,sBACA,4BACA,kBACA,uBACA,uBACA,4BACA,uBACA,qBACA,6BACA,YACA,mBACA,gCACA,uBACA,mBACA,UACA,wBACA,sBACA,qBACA,wBACA,wBACA,oBACA,0BACA,wBACA,mBACA,eACA,WACA,eACA,sBACA,qBACA,mBACA,iBACA,aACA,eACA,SACA,cACA,kBACA,aACA,kBACA,iBACA,iBACA,cACA,aACA,iBACA,sBACA,aACA,aACA,aACA,wBACA,sBACA,sBACA,oBACA,qBACA,2BACA,wBACA,eACA,oBACA,mBACA,gBACA,YACA,iBACA,gBACA,aACA,WACA,uBACA,wBACA,wBACA,uBACA,YACA,0BACA,aACA,cACA,sBACA,iBACA,cACA,SACA,cACA,oBACA,6BACA,eACA,oBACA,mBACA,gBACA,kBACA,gBACA,sBACA,mBACA,6BACA,kBACA,mBACA,mBACA,0BACA,0BACA,sBACA,aACA,mBACA,mBACA,gBACA,oBACA,oBACA,oBACA,oBACA,gBACA,sBACA,sBACA,mBACA,gBACA,gBACA,sBACA,iBACA,iBACA,sBACA,0BACA,mBACA,WACA,gBACA,gBACA,gCACA,+BACA,iCACA,gCACA,cACA,oBACA,mBACA,eACA,oBACA,uBACA,uBACA,6BACA,sBACA,gCACA,eACA,oBACA,aACA,eACA,gBACA,sBACA,SACA,WACA,KACA,aACA,oBACA,YACA,WACA,WACA,eACA,cACA,QACA,IACA,OACA,WACA,YACA,iBACA,QACA,eACA,aACA,gBACA,eACA,WACA,aACA,iBACA,kBACA,YACA,OACA,yBACA,WACA,WACA,eACA,WACA,eACA,SACA,WACA,yBACA,aACA,UACA,OACA,qBACA,WACA,WACA,cACA,WACA,SACA,WACA,UACA,aACA,SACA,WACA,WACA,YACA,YACA,wBACA,eACA,YACA,OACA,cACA,UACA,SACA,MACA,aACA,SACA,mBACA,iBACA,gBACA,kBACA,cACA,mBACA,SACA,aACA,kBACA,YACA,iBACA,cACA,mBACA,UACA,KACA,qBACA,SACA,eACA,aACA,aACA,eACA,YACA,cACA,UACA,UACA,KACA,SACA,WACA,aACA,kBACA,SACA,UACA,aACA,WACA,cACA,aACA,eACA,uBACA,gBACA,aACA,iBACA,eACA,iBACA,sBACA,mBACA,eACA,cACA,qBACA,oBACA,gBACA,gBACA,wBACA,iBACA,iBACA,YACA,SACA,WACA,aACA,WACA,WACA,wBACA,wBACA,0BACA,YACA,mBACA,eACA,WACA,mBACA,uBACA,aACA,UACA,UACA,4BACA,aACA,gBACA,kBACA,SACA,cACA,QACA,kBACA,gBACA,mBACA,oBACA,aACA,eACA,gBACA,iBACA,sBACA,oBACA,0BACA,YACA,gBACA,SACA,YACA,cACA,cACA,aACA,cACA,SACA,mBACA,YACA,cACA,QACA,UACA,UACA,UACA,gBACA,SACA,iBACA,WACA,UACA,YACA,aACA,qBACA,oBACA,kBACA,eACA,iBACA,sBACA,eACA,SACA,iBACA,6BACA,aACA,UACA,YACA,YACA,aACA,UACA,mBACA,mBACA,gBACA,SACA,eACA,mBACA,YACA,cACA,gBACA,uBACA,OACA,SACA,YACA,cACA,eACA,eACA,cACA,aACA,cACA,YACA,eACA,SACA,YACA,cACA,wBACA,uBACA,yBACA,yBACA,wBACA,kBACA,uBACA,sBACA,oBACA,uBACA,iBACA,kBACA,mBACA,iBACA,wBACA,mBACA,yBACA,+BACA,cACA,wBACA,oBACA,kBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,gBACA,kCACA,qBACA,sBACA,YACA,aACA,aACA,YACA,WACA,SACA,sBACA,eACA,aACA,aACA,UACA,UACA,SACA,YACA,sBACA,kBACA,gBACA,iBACA,iBACA,sBACA,qBACA,gBACA,eACA,gBACA,cACA,aACA,aACA,mBACA,eACA,qBACA,iBACA,gBACA,UACA,WACA,cACA,gBACA,6BACA,WACA,WACA,aACA,YACA,eACA,iBACA,WACA,WACA,WACA,YACA,WACA,oBACA,gBACA,SACA,yBACA,aACA,eACA,cACA,gBACA,YACA,UACA,gBACA,SACA,YACA,kBACA,WACA,YACA,YACA,cACA,YACA,eACA,WACA,gBACA,aACA,cACA,eACA,kBACA,WACA,gBACA,kBACA,kBACA,kBACA,kBACA,iBACA,YACA,YACA,uBACA,6BACA,yBACA,iDACA,2BACA,0BACA,mBACA,mBACA,qBACA,kBACA,4BACA,4CACA,4BACA,2BACA,mCACA,wBACA,UACA,SACA,UACA,OACA,aACA,eACA,gBACA,SACA,QACA,gBACA,WACA,MACA,UACA,UACA,QACA,SACA,SACA,UACA,MACA,SACA,cACA,aACA,cACA,SACA,iBACA,UACA,QACA,YACA,cACA,YACA,aACA,UACA,gBACA,iBACA,gBACA,gBACA,eACA,gBACA,eACA,eACA,eACA,WACA,aACA,aACA,YACA,YACA,mBACA,aACA,gBACA,eACA,YACA,YACA,kBACA,gBACA,KACA,KACA,KACA,KACA,MACA,UACA,iBACA,eACA,gBACA,cACA,gBACA,cACA,eACA,aACA,OACA,mBACA,oBACA,oBACA,iBACA,kBACA,kBACA,YACA,QACA,cACA,QACA,cACA,QACA,cACA,aACA,gBACA,YACA,UACA,eACA,SACA,gBACA,aACA,aACA,mBACA,iBACA,eACA,QACA,aACA,kBACA,WACA,eACA,WACA,YACA,OACA,aACA,cACA,cACA,sBACA,WACA,UACA,sBACA,kBACA,mBACA,eACA,QACA,kBACA,cACA,SACA,UACA,cACA,aACA,YACA,cACA,cACA,qBACA,oBACA,qBACA,oBACA,QACA,OACA,QACA,cACA,aACA,cACA,YACA,aACA,cACA,WACA,yBACA,yBACA,aACA,cACA,WACA,OACA,eACA,gBACA,eACA,SACA,UACA,cACA,QACA,iBACA,6BACA,iBACA,gBACA,YACA,qBACA,cACA,SACA,YACA,YACA,YACA,gBACA,MACA,sBACA,kBACA,iBACA,OACA,QACA,QACA,QACA,YACA,YACA,UACA,WACA,SACA,WACA,WACA,gBACA,YACA,cACA,SACA,MACA,WACA,kBACA,YACA,yBACA,yBACA,SACA,UACA,gBACA,sBACA,4BACA,UACA,WACA,YACA,iBACA,oBACA,yBACA,eACA,eACA,gBACA,kBACA,oBACA,aACA,gBACA,iBACA,aACA,QACA,aACA,0BACA,UACA,oBACA,UACA,aACA,UACA,aACA,WACA,SACA,aACA,uBACA,eACA,WACA,eACA,YACA,cACA,gBACA,WACA,YACA,YACA,OACA,mBACA,YACA,MACA,eACA,mBACA,YACA,sBACA,uBACA,oBACA,wBACA,mBACA,oBACA,gBACA,mBACA,QACA,SACA,IACA,KACA,KACA,OACA,aACA,UACA,UACA,SACA,QACA,aACA,WACA,WACA,cACA,gBACA,cACA,iBACA,OACA,QACA,MACA,OACA,oBACA,qBACA,aACA,gBACA,aACA,WACA,aACA,sBACA,aACA,SACA,SACA,WACA,YACA,eACA,YACA,OACA,MACA,gBACA,cACA,gBACA,SACA,cACA,YACA,cACA,OACA,OACA,gBACA,WACA,UACA,SACA,gBACA,gBACA,WACA,UACA,WACA,yBACA,kBACA,0BACA,SACA,MACA,UACA,cACA,gBACA,UACA,iBACA,gBACA,wBACA,wBACA,WACA,SACA,iBACA,oBACA,SACA,kBACA,kBACA,oBACA,sBACA,iBACA,cACA,YACA,sBACA,eACA,eACA,aACA,iBACA,kBACA,oBACA,aACA,kBACA,iBACA,cACA,eACA,aACA,sCACA,qBACA,eACA,cACA,iBACA,yBACA,iCACA,eACA,sBACA,iBACA,gBACA,SACA,UACA,sBACA,eACA,cACA,YACA,cACA,cACA,eACA,eACA,mBACA,iBACA,wBACA,sBACA,cACA,oBACA,8BACA,oBACA,qBACA,eACA,mBACA,WACA,qBACA,mBACA,QACA,iBACA,SACA,WACA,WACA,UACA,WACA,eACA,cACA,gBACA,eACA,eACA,cACA,cACA,UACA,SACA,aACA,SACA,cACA,MACA,UACA,WACA,YACA,kBACA,WACA,QACA,eACA,cACA,gBACA,OACA,cACA,SACA,kBACA,sBACA,mBACA,uBACA,aACA,WACA,eACA,QACA,WACA,UACA,OACA,YACA,eACA,eACA,QACA,UACA,eACA,KACA,KACA,SACA,iBACA,aACA,UACA,OACA,QACA,UACA,cACA,kBACA,sBACA,YACA,SACA,UACA,QACA,YACA,SACA,SACA,mBACA,gBACA,aACA,2BACA,2BACA,YACA,UACA,UACA,UACA,SACA,kBACA,eACA,iBACA,WACA,gBACA,gBACA,cACA,eACA,iBACA,yBACA,aACA,gBACA,aACA,aACA,WACA,YACA,eACA,cACA,UACA,UACA,wBACA,sBACA,qBACA,2BACA,qBACA,0BACA,uBACA,sBACA,aACA,YACA,MACA,gBACA,SACA,OACA,SACA,YACA,uBACA,eACA,kBACA,wBACA,WACA,OACA,WACA,UACA,SACA,oBACA,aACA,qBACA,cACA,mBACA,kBACA,WACA,gBACA,kBACA,wBACA,wBACA,YACA,qBACA,eACA,iBACA,WACA,eACA,OACA,OACA,eACA,aACA,SACA,gBACA,YACA,oBACA,gBACA,YACA,iBACA,MACA,YACA,WACA,eACA,iBACA,mBACA,qBACA,mBACA,8BACA,aACA,WACA,wBACA,iBACA,oBACA,UACA,UACA,eACA,SACA,cACA,eACA,cACA,eACA,eACA,aACA,aACA,gBACA,cACA,WACA,eACA,WACA,WACA,UACA,cACA,UACA,aACA,cACA,cACA,eACA,sBACA,YACA,iBACA,eACA,kBACA,aACA,gBACA,WACA,eACA,iBACA,2BACA,mBACA,kBACA,iBACA,mCACA,WACA,eACA,kBACA,oBACA,cACA,gBACA,cACA,iBACA,cACA,sBACA,YACA,eACA,uBACA,mBACA,eACA,8BACA,YACA,WACA,aACA,oBACA,uBACA,YACA,WACA,WACA,WACA,gBACA,iBACA,kBACA,iBACA,iBACA,mBACA,kBACA,uBACA,UACA,aACA,eACA,eACA,aACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,SACA,iBACA,sBACA,cACA,cACA,aACA,UACA,cACA,eACA,MACA,eACA,aACA,cACA,gBACA,gBACA,aACA,QACA,kBACA,iBACA,QACA,QACA,WACA,YACA,OACA,WACA,YACA,kBACA,qBACA,mBACA,UACA,OACA,iBACA,MACA,kBACA,OACA,OACA,gBACA,QACA,QACA,YACA,QACA,YACA,QACA,QACA,QACA,SACA,OACA,wBACA,cACA,eACA,iBACA,OACA,OACA,SACA,eACA,gBACA,cACA,UACA,OACA,UACA,WACA,YACA,mBACA,mBACA,kBACA,QACA,eACA,aACA,SACA,QACA,YACA,eACA,OACA,MACA,aACA,YACA,SACA,SACA,UACA,SACA,QACA,kBACA,aACA,aACA,UACA,QACA,iBACA,WACA,cACA,iBACA,YACA,aACA,QACA,SACA,gBACA,aACA,YACA,gBACA,gBACA,cACA,sBACA,cACA,sBACA,YACA,oBACA,OACA,WACA,eACA,SACA,SACA,cACA,OACA,aACA,eACA,YACA,2BACA,cACA,kBACA,cACA,cACA,gBACA,qCACA,gCACA,aACA,SACA,SACA,cACA,YACA,SACA,mBACA,oBACA,iBACA,kBACA,oBACA,iBACA,eACA,kBACA,mBACA,gBACA,iBACA,mBACA,gBACA,aACA,cACA,aACA,cACA,QACA,aACA,aACA,aACA,iBACA,cACA,MACA,WACA,UACA,SACA,YACA,SACA,YACA,gBACA,SACA,UACA,SACA,WACA,UACA,MACA,WACA,eACA,mBACA,UACA,gBACA,YACA,WACA,YACA,UACA,SACA,aACA,WACA,iBACA,aACA,aACA,UACA,QACA,QACA,WACA,QACA,eACA,cACA,cACA,MACA,UACA,SACA,OACA,eACA,cACA,MACA,OACA,SACA,gBACA,gBACA,UACA,UACA,MACA,YACA,OACA,aACA,gBACA,gBACA,gBACA,OACA,aACA,cACA,kBACA,wBACA,uBACA,wBACA,cACA,gBACA,iBACA,cACA,iBACA,YACA,gBACA,aACA,gBACA,eACA,cACA,iBACA,sBACA,sBACA,qBACA,4BACA,qBACA,yBACA,sBACA,0BACA,aACA,cACA,kBACA,cACA,mBACA,aACA,eACA,gBACA,aACA,aACA,gBACA,wBACA,OACA,WACA,YACA,QACA,QACA,OACA,UACA,YACA,UACA,YACA,kBACA,SACA,QACA,UACA,SACA,YACA,eACA,YACA,gBACA,UACA,iBACA,iBACA,cACA,cACA,SACA,qBACA,iBACA,oBACA,iBACA,qBACA,oBACA,cACA,WACA,cACA,QACA,WACA,eACA,WACA,cACA,eACA,cACA,cACA,SACA,yBACA,UACA,UACA,MACA,YACA,QACA,kBACA,mBACA,cACA,UACA,QACA,QACA,cACA,eACA,YACA,mBACA,kBACA,kBACA,iBACA,kBACA,iBACA,sBACA,sBACA,aACA,mBACA,sBACA,sBACA,6BACA,kBACA,qBACA,qBACA,2BACA,YACA,gBACA,eACA,eACA,OACA,WACA,YACA,YACA,QACA,WACA,OACA,aACA,eACA,gBACA,QACA,SACA,YACA,WACA,SACA,eACA,cACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,mBACA,mBACA,mBACA,SACA,WACA,eACA,WACA,QACA,iBACA,mBACA,SACA,UACA,YACA,UACA,oBACA,cACA,aACA,2BACA,4BACA,cACA,eACA,UACA,cACA,kBACA,qBACA,UACA,YACA,SACA,iBACA,YACA,iBACA,iBACA,UACA,WACA,SACA,QACA,aACA,YACA,MACA,MACA,MACA,OACA,SACA,iBACA,SACA,aACA,YACA,YACA,eACA,WACA,kBACA,SACA,QACA,QACA,kBACA,oBACA,WACA,QACA,cACA,gBACA,gBACA,wBACA,eACA,UACA,YACA,YACA,SACA,gBACA,eACA,kBACA,oBACA,YACA,YACA,SACA,YACA,SACA,UACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,2BACA,sBACA,WACA,iBACA,gBACA,mBACA,UACA,cACA,cACA,aACA,OACA,UACA,gBACA,aACA,mBACA,WACA,kBACA,kBACA,kBACA,aACA,kBACA,UACA,aACA,QACA,SACA,OACA,SACA,IACA,OACA,OACA,WACA,QACA,gBACA,YACA,eACA,kBACA,uBACA,2BACA,0BACA,0BACA,gCACA,sBACA,2BACA,gCACA,mBACA,qBACA,8BACA,wBACA,2BACA,mBACA,6BACA,uBACA,wBACA,wBACA,yBACA,2BACA,4BACA,4BACA,yBACA,uBACA,+BACA,oBACA,0BACA,0BACA,yBACA,0BACA,yBACA,iBACA,qBACA,gBACA,wBACA,kBACA,gBACA,kBACA,6BACA,yBACA,yBACA,oCACA,6BACA,8BACA,mCACA,mCACA,yBACA,iCACA,wCACA,oCACA,6BACA,wBACA,wBACA,uBACA,uBACA,wBACA,uCACA,0BACA,0BACA,2BACA,mBACA,yBACA,mBACA,yBACA,yBACA,sBACA,oBACA,uBACA,sBACA,4BACA,qBACA,0BACA,eACA,kBACA,oBACA,yBACA,6BACA,mBACA,iBACA,oBACA,uBACA,mBACA,uBACA,8BACA,kBACA,yBACA,qBACA,aACA,uBACA,wBACA,wBACA,oBACA,sBACA,4BACA,oBACA,yBACA,0BACA,2BACA,oBACA,uBACA,uBACA,0BACA,sBACA,8BACA,0BACA,0BACA,0BACA,2BACA,kCACA,qBACA,oCACA,mBACA,iCACA,cACA,sBACA,0BACA,0BACA,+BACA,+BACA,oBACA,2BACA,yBACA,uBACA,kBACA,wBACA,mBACA,wBACA,2BACA,2BACA,iCACA,YACA,0BACA,mBACA,8BACA,wBACA,sCACA,iBACA,WACA,SACA,aACA,aACA,cACA,cACA,QACA,cACA,aACA,YACA,SACA,QACA,cACA,aACA,eACA,SACA,kBACA,aACA,eACA,YACA,YACA,cACA,WACA,OACA,UACA,QACA,UACA,cACA,IACA,KACA,KACA,mBACA,cACA,gBACA,aACA,UACA,UACA,WACA,IACA,KACA,KACA,mBACA,SACA,IACA,UACA,SACA,OACA,aACA,kBC73KJ,SAASC,GAAoBjF,EAAK/Y,GAC9B,SAAS5Z,EAAIza,GACTiD,EAAUoxB,EAAUr0B,GAGxBotC,EAAIvnB,KAAK,IAAIS,GAAW,SAAS5gB,GACzBA,aAAgBqW,IAAoBrW,EAAKmI,MACzC4M,EAAI/U,EAAKb,KACFa,aAAgBke,IAAsBle,EAAKmI,MAClD4M,EAAI/U,EAAKb,IAAI7E,MACN0F,aAAgBS,IACvBmsC,GAAW5sC,EAAKuW,SAAUxB,MAKtC,SAAS63B,GAAW5sC,EAAM+U,GACtB/U,EAAKmgB,KAAK,IAAIS,GAAW,SAAS5gB,GAS9B,OARIA,aAAgBI,GAChBwsC,GAAW5sC,EAAK4xB,YAAa7c,GACtB/U,aAAgB8N,GACvBiH,EAAI/U,EAAKZ,OACFY,aAAgBU,KACvBksC,GAAW5sC,EAAKge,WAAYjJ,GAC5B63B,GAAW5sC,EAAK2R,YAAaoD,KAE1B,KAIf,SAAS83B,GAAkBnF,EAAKv8B,GAW5B,IAAI2hC,GAVJ3hC,EAAU7P,EAAS6P,EAAS,CACxB4hC,UAAU,EACV9d,MAAO,KACP+d,OAAO,EACPC,aAAa,EACbC,YAAY,EACZC,MAAO,KACPxe,SA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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Binary,\n    AST_Conditional,\n    AST_Dot,\n    AST_Sequence,\n    AST_Statement,\n    AST_Sub,\n    AST_UnaryPostfix,\n} from \"./ast.js\";\n\nfunction characters(str) {\n    return str.split(\"\");\n}\n\nfunction member(name, array) {\n    return array.includes(name);\n}\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n}\n\nclass DefaultsError extends Error {\n    constructor(msg, defs) {\n        super();\n\n        this.name = \"DefaultsError\";\n        this.message = msg;\n        this.defs = defs;\n    }\n}\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (HOP(ret, i) && !HOP(defs, i))\n        throw new DefaultsError(\"`\" + i + \"` is not a supported option\", defs);\n    for (var i in defs) if (HOP(defs, i)) {\n        ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n    }\n    return ret;\n}\n\nfunction merge(obj, ext) {\n    var count = 0;\n    for (var i in ext) if (HOP(ext, i)) {\n        obj[i] = ext[i];\n        count++;\n    }\n    return count;\n}\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function() {\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            } else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        }\n        if (Array.isArray(a)) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        } else {\n            for (i in a) if (HOP(a, i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    }\n    MAP.at_top = function(val) { return new AtTop(val); };\n    MAP.splice = function(val) { return new Splice(val); };\n    MAP.last = function(val) { return new Last(val); };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val; }\n    function Splice(val) { this.v = val; }\n    function Last(val) { this.v = val; }\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (!array.includes(el))\n        array.push(el);\n}\n\nfunction string_template(text, props) {\n    return text.replace(/{(.+?)}/g, function(str, p) {\n        return props && props[p];\n    });\n}\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n}\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    }\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    }\n    return _ms(array);\n}\n\nfunction makePredicate(words) {\n    if (!Array.isArray(words)) words = words.split(\" \");\n\n    return new Set(words);\n}\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n}\n\nfunction map_add(map, key, value) {\n    if (map.has(key)) {\n        map.get(key).push(value);\n    } else {\n        map.set(key, [ value ]);\n    }\n}\n\nfunction map_from_object(obj) {\n    var map = new Map();\n    for (var key in obj) {\n        if (HOP(obj, key) && key.charAt(0) === \"$\") {\n            map.set(key.substr(1), obj[key]);\n        }\n    }\n    return map;\n}\n\nfunction map_to_object(map) {\n    var obj = Object.create(null);\n    map.forEach(function (value, key) {\n        obj[\"$\" + key] = value;\n    });\n    return obj;\n}\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    var node = stack.parent(-1);\n    for (var i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Sequence      && p.expressions[0] === node) ||\n            (p.TYPE == \"Call\"               && p.expression === node ) ||\n            (p instanceof AST_Dot           && p.expression === node ) ||\n            (p instanceof AST_Sub           && p.expression === node ) ||\n            (p instanceof AST_Conditional   && p.condition === node  ) ||\n            (p instanceof AST_Binary        && p.left === node       ) ||\n            (p instanceof AST_UnaryPostfix  && p.expression === node )\n        ) {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n\nfunction keep_name(keep_setting, name) {\n    return keep_setting === true\n        || (keep_setting instanceof RegExp && keep_setting.test(name));\n}\n\nexport {\n    all,\n    characters,\n    defaults,\n    find_if,\n    first_in_statement,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    map_from_object,\n    map_to_object,\n    MAP,\n    member,\n    merge,\n    mergeSort,\n    noop,\n    push_uniq,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    characters,\n    defaults,\n    find_if,\n    HOP,\n    makePredicate,\n} from \"./utils.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum implements import interface package private protected public static super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"**\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"**=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"||\"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /[0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n};\n\nfunction get_full_char(str, pos) {\n    var char = str.charAt(pos);\n    if (is_surrogate_pair_head(char)) {\n        var next = str.charAt(pos + 1);\n        if (is_surrogate_pair_tail(next)) {\n            return char + next;\n        }\n    }\n    if (is_surrogate_pair_tail(char)) {\n        var prev = str.charAt(pos - 1);\n        if (is_surrogate_pair_head(prev)) {\n            return prev + char;\n        }\n    }\n    return char;\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i))) {\n            if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                surrogates++;\n                i++;\n            }\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Start.test(ch) || code == 36 || code == 95;\n}\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Continue.test(ch)\n        || code == 36\n        || code == 95\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n    ;\n}\n\nfunction is_identifier_string(str) {\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n}\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n}\n\nclass JS_Parse_Error extends Error {\n    constructor(message, filename, line, col, pos) {\n        super();\n\n        this.name = \"SyntaxError\";\n        this.message = message;\n        this.filename = filename;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n    }\n}\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); }\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS.has(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    }\n\n    function forward(i) {\n        while (i-- > 0) next();\n    }\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    }\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS.has(ch))\n                return i;\n        }\n        return -1;\n    }\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    }\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    }\n\n    var prev_was_dot = false;\n    var previous_token = null;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX.has(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value))) ||\n                           (type == \"arrow\");\n        if (type == \"punc\" && value == \".\") {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            ret.comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        ret = new AST_Token(ret);\n        if (!is_comment) previous_token = ret;\n        return ret;\n    }\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS.has(peek()))\n            next();\n    }\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    }\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    }\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\";\n        var num = read_while(function(ch, i) {\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don't return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    }\n\n    function read_escaped_char(in_string, strict_hex, template_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2, strict_hex)); // \\x\n          case 117 : // \\u\n            if (peek() == \"{\") {\n                next(true);\n                if (peek() === \"}\")\n                    parse_error(\"Expecting hex-character between {}\");\n                while (peek() == \"0\") next(true); // No significance\n                var result, length = find(\"}\", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn't 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n                    parse_error(\"Unicode reference out of bounds\");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4, strict_hex));\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (ch >= \"0\" && ch <= \"7\") {\n            if (template_string && strict_hex) {\n                parse_error(\"Octal escape sequences are not allowed in template strings\");\n            }\n            return read_octal_escape_sequence(ch, strict_hex);\n        }\n        return ch;\n    }\n\n    function read_octal_escape_sequence(ch, strict_octal) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal)\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n, strict_hex) {\n        var num = 0;\n        for (; n > 0; --n) {\n            if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n                return parseInt(num, 16) || \"\";\n            }\n            var digit = next(true);\n            if (isNaN(parseInt(digit, 16)))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num += digit;\n        }\n        return parseInt(num, 16);\n    }\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function() {\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true, true);\n            else if (ch == \"\\r\" || ch == \"\\n\") parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error(\"Unterminated template\", function(begin) {\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = \"\", raw = \"\", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != \"`\") {\n            if (ch == \"\\r\") {\n                if (peek() == \"\\n\") ++S.pos;\n                ch = \"\\n\";\n            } else if (ch == \"$\" && peek() == \"{\") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n                tok.begin = begin;\n                tok.raw = raw;\n                tok.end = false;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == \"\\\\\") {\n                var tmp = S.pos;\n                var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n                ch = read_escaped_char(true, !prev_is_tag, true);\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        tok.begin = begin;\n        tok.raw = raw;\n        tok.end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    }\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function() {\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\");\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.newline_before = S.newline_before || text.includes(\"\\n\");\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error(\"Unterminated identifier name\", function() {\n        var name, ch, escaped = false;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== \"u\") {\n                parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n            }\n            return read_escaped_char(false, true);\n        };\n\n        // Read first character (ID_Start)\n        if ((name = peek()) === \"\\\\\") {\n            name = read_escaped_identifier_char();\n            if (!is_identifier_start(name)) {\n                parse_error(\"First identifier char is an invalid identifier char\");\n            }\n        } else if (is_identifier_start(name)) {\n            next();\n        } else {\n            return \"\";\n        }\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === \"\\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error(\"Invalid escaped identifier char\");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name += ch;\n        }\n        if (RESERVED_WORDS.has(name) && escaped) {\n            parse_error(\"Escaped characters are not allowed in keywords\");\n        }\n        return name;\n    });\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS.has(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        var mods = read_name();\n        try {\n            var regexp = new RegExp(source, mods);\n            regexp.raw_source = \"/\" + source + \"/\" + mods;\n            return token(\"regexp\", regexp);\n        } catch(e) {\n            parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS.has(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        }\n        return token(\"operator\", grow(prefix || next()));\n    }\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    }\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === \">\") {\n            next();\n            return token(\"arrow\", \"=>\");\n        } else {\n            return read_operator(\"=\");\n        }\n    }\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(\".\");\n        }\n        if (peek() === \".\") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token(\"expand\", \"...\");\n        }\n\n        return token(\"punc\", \".\");\n    }\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM.has(word) ? token(\"atom\", word)\n            : !KEYWORDS.has(word) ? token(\"name\", word)\n            : OPERATORS.has(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    }\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    }\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string();\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS.has(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    }\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    };\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    };\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    };\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    };\n\n    return next_token;\n\n}\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret) {\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"],\n        [\"**\"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ \"atom\", \"num\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : 8,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        module         : false,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    }\n\n    function peek() { return S.peeked || (S.peeked = S.input()); }\n\n    function next() {\n        S.prev = S.token;\n\n        if (!S.peeked) peek();\n        S.token = S.peeked;\n        S.peeked = null;\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    }\n\n    function prev() {\n        return S.prev;\n    }\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    }\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    }\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    }\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    }\n\n    function expect(punc) { return expect_token(\"punc\", punc); }\n\n    function has_newline_before(token) {\n        return token.nlb || !all(token.comments_before, function(comment) {\n            return !comment.nlb;\n        });\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n    }\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    }\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    }\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser.apply(null, arguments);\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    }\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    }\n\n    var statement = embed_tokens(function(is_export_default, is_for_body, is_if_body) {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (!S.token.raw.includes(\"\\\\\")\n                    && (is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\")\n                        || has_newline_before(token)\n                        || is_token(token, \"eof\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n          case \"template_head\":\n          case \"num\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n                next();\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\")) {\n                next();\n                var node = import_();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(function() { return statement(false, true); })\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"class\":\n                next();\n                if (is_for_body) {\n                    croak(\"classes are not allowed as the body of a loop\");\n                }\n                if (is_if_body) {\n                    croak(\"classes are not allowed as the body of an if\");\n                }\n                return class_(AST_DefClass);\n\n              case \"function\":\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (has_newline_before(S.token))\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"let\":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case \"const\":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case \"export\":\n                if (!is_token(peek(), \"punc\", \"(\")) {\n                    next();\n                    var node = export_();\n                    if (is(\"punc\", \";\")) semicolon();\n                    return node;\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === \"await\" && is_in_async()) {\n            token_error(S.prev, \"await cannot be used as label inside async function\");\n        }\n        if (find_if(function(l) { return l.name == label.name; }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref) {\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    }\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    }\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l) { return l.name == label.name; }, S.labels);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        } else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    }\n\n    function for_() {\n        var for_await_error = \"`for await` invalid in this context\";\n        var await_tok = S.token;\n        if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n            if (!is_in_async()) {\n                token_error(await_tok, for_await_error);\n            }\n            next();\n        } else {\n            await_tok = false;\n        }\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init =\n                is(\"keyword\", \"var\") ? (next(), var_(true)) :\n                is(\"keyword\", \"let\") ? (next(), let_(true)) :\n                is(\"keyword\", \"const\") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is(\"operator\", \"in\");\n            var is_of = is(\"name\", \"of\");\n            if (await_tok && !is_of) {\n                token_error(await_tok, for_await_error);\n            }\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    token_error(init.start, \"Invalid left-hand side in for..in loop\");\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init, !!await_tok);\n                }\n            }\n        } else if (await_tok) {\n            token_error(await_tok, for_await_error);\n        }\n        return regular_for(init);\n    }\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_of(init, is_await) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForOf({\n            await  : is_await,\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak(\"Unexpected newline before arrow (=>)\");\n        }\n\n        expect_token(\"arrow\", \"=>\");\n\n        var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n        var end =\n            body instanceof Array && body.length ? body[body.length - 1].end :\n            body instanceof Array ? start :\n                body.end;\n\n        return new AST_Arrow({\n            start    : start,\n            end      : end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        var start = S.token;\n\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is(\"operator\", \"*\");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function track_used_binding_identifiers(is_parameter, strict) {\n        var parameters = new Set();\n        var duplicate = false;\n        var default_assignment = false;\n        var spread = false;\n        var strict_mode = !!strict;\n        var tracker = {\n            add_parameter: function(token) {\n                if (parameters.has(token.value)) {\n                    if (duplicate === false) {\n                        duplicate = token;\n                    }\n                    tracker.check_strict();\n                } else {\n                    parameters.add(token.value);\n                    if (is_parameter) {\n                        switch (token.value) {\n                          case \"arguments\":\n                          case \"eval\":\n                          case \"yield\":\n                            if (strict_mode) {\n                                token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                            }\n                            break;\n                          default:\n                            if (RESERVED_WORDS.has(token.value)) {\n                                unexpected();\n                            }\n                        }\n                    }\n                }\n            },\n            mark_default_assignment: function(token) {\n                if (default_assignment === false) {\n                    default_assignment = token;\n                }\n            },\n            mark_spread: function(token) {\n                if (spread === false) {\n                    spread = token;\n                }\n            },\n            mark_strict_mode: function() {\n                strict_mode = true;\n            },\n            is_strict: function() {\n                return default_assignment !== false || spread !== false || strict_mode;\n            },\n            check_strict: function() {\n                if (tracker.is_strict() && duplicate !== false) {\n                    token_error(duplicate, \"Parameter \" + duplicate.value + \" was used already\");\n                }\n            }\n        };\n\n        return tracker;\n    }\n\n    function parameters(params) {\n        var start = S.token;\n        var used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n\n        expect(\"(\");\n\n        while (!is(\"punc\", \")\")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n        }\n        if (is(\"expand\", \"...\")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is(\"operator\", \"=\") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: \"=\",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is(\"punc\", \")\")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(false, S.input.has_directive(\"use strict\"));\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is(\"punc\", \"[\")) {\n            next();\n            while (!is(\"punc\", \"]\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"punc\")) {\n                    switch (S.token.value) {\n                      case \",\":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case \"]\": // Trailing comma after last element\n                        break;\n                      case \"[\":\n                      case \"{\":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is(\"name\")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak(\"Invalid function parameter\");\n                }\n                if (is(\"operator\", \"=\") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"]\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect(\"]\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is(\"punc\", \"{\")) {\n            next();\n            while (!is(\"punc\", \"}\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is(\"punc\", \"}\")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(\":\");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"}\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                } else if (is(\"operator\", \"=\")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect(\"}\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is(\"name\")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak(\"Invalid function parameter\");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect(\"(\");\n        while (!is(\"punc\", \")\")) {\n            if (spread_token) unexpected(spread_token);\n            if (is(\"expand\", \"...\")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\")) {\n                    if (options.ecma < 8) unexpected();\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(\")\");\n        if (allow_arrows && is(\"arrow\", \"=>\")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = expression(false);\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be \"await\" and not be interpreted as an identifier\n        if (!is_in_async()) {\n            croak(\"Unexpected await expression outside async function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            start: prev(),\n            end: S.token,\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak(\"Unexpected yield expression outside generator function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var start = S.token;\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn't allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value))) {\n            has_expression = false;\n\n        } else if (is(\"operator\", \"*\")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            start      : start,\n            is_star    : star,\n            expression : has_expression ? expression() : null,\n            end        : prev()\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(false, false, true), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement(false, false, true);\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    }\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    }\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            } else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            } else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    }\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            if (is(\"punc\", \"{\")) {\n                var name = null;\n            } else {\n                expect(\"(\");\n                var name = parameter(undefined, AST_SymbolCatch);\n                expect(\")\");\n            }\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    }\n\n    function vardefs(no_in, kind) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === \"var\" ? AST_SymbolVar :\n                kind === \"const\" ? AST_SymbolConst :\n                kind === \"let\" ? AST_SymbolLet : null;\n            if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined ,sym_type),\n                    value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is(\"operator\", \"=\")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === \"const\"\n                            ? croak(\"Missing initializer in const declaration\") : null,\n                    end   : prev()\n                });\n                if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n            }\n            a.push(def);\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    }\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, \"var\"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, \"let\"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, \"const\"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        if (is(\"punc\", \".\")) {\n            next();\n            expect_token(\"name\", \"target\");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\", options.ecma >= 8);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        mark_pure(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    }\n\n    function to_fun_args(ex, _, __, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: \"=\",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        };\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value, 0, [ex.key]);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(to_fun_args);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, undefined, undefined, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left, 0, [ex.left]);\n            return ex;\n        } else {\n            croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        var peeked;\n        var async = is(\"name\", \"async\")\n            && (peeked = peek()).value != \"[\"\n            && peeked.type != \"arrow\"\n            && as_atom_node();\n        if (is(\"punc\")) {\n            switch (S.token.value) {\n              case \"(\":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is(\"arrow\", \"=>\")) {\n                    return arrow_function(start, exprs.map(to_fun_args), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    var len = start.comments_before.length;\n                    [].unshift.apply(ex.start.comments_before, start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    start.comments_before_length = len;\n                    if (len == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    [].push.apply(ex.end.comments_after, end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) mark_pure(ex);\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is(\"keyword\", \"class\")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(template_string(false), allow_calls);\n        }\n        if (ATOMIC_START_TOKEN.has(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string(tagged) {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: S.token.raw,\n            value: S.token.value,\n            end: S.token\n        }));\n        while (S.token.end === false) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            if (!is_token(\"template_substitution\")) {\n                unexpected();\n            }\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: S.token.raw,\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is(\"expand\", \"...\")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    }\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function(is_generator, is_async) {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect(\"{\");\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == \"expand\") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is(\"punc\", \":\")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is(\"operator\", \"=\")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: \"=\",\n                    right: expression(false),\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : \"\" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive(\"use strict\");\n\n        if (S.token.type == \"name\" && S.token.value != \"extends\") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            unexpected();\n        }\n\n        if (S.token.value == \"extends\") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect(\"{\");\n\n        if (is(\"punc\", \";\")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is(\"punc\", \"}\")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            if (is(\"punc\", \";\")) { next(); }\n        }\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        var get_ast = function(name, token) {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new AST_SymbolMethod({\n                    start: token,\n                    name: \"\" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var property_token = start;\n        if (is_class && name === \"static\" && !is(\"punc\", \"(\")) {\n            is_static = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === \"async\" && !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\")) {\n            is_async = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === null) {\n            is_generator = true;\n            property_token = S.token;\n            name = as_property_name();\n            if (name === null) {\n                unexpected();\n            }\n        }\n        if (is(\"punc\", \"(\")) {\n            name = get_ast(name, start);\n            var node = new AST_ConciseMethod({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n        property_token = S.token;\n        if (name == \"get\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectGetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        } else if (name == \"set\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectSetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n    }\n\n    function import_() {\n        var start = prev();\n        var imported_name;\n        var imported_names;\n        if (is(\"name\")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is(\"punc\", \",\")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token(\"name\", \"from\");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \"string\") {\n            unexpected();\n        }\n        next();\n        return new AST_Import({\n            start: start,\n            imported_name: imported_name,\n            imported_names: imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            end: S.token,\n        });\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type) {\n            return new type({\n                name: as_property_name(),\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type);\n        } else {\n            name = make_symbol(type);\n        }\n        if (is(\"name\", \"as\")) {\n            next();  // The \"as\" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        });\n    }\n\n    function map_nameAsterisk(is_import, name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var end = prev();\n\n        name = name || new type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        foreign_name = new foreign_type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        });\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is(\"punc\", \"{\")) {\n            next();\n            names = [];\n            while (!is(\"punc\", \"}\")) {\n                names.push(map_name(is_import));\n                if (is(\"punc\", \",\")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is(\"operator\", \"*\")) {\n            var name;\n            next();\n            if (is_import && is(\"name\", \"as\")) {\n                next();  // The \"as\" word\n                name = as_symbol(is_import ? AST_SymbolImport : AST_SymbolExportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is(\"keyword\", \"default\")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is(\"name\", \"from\")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \"string\") {\n                    unexpected();\n                }\n                next();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is(\"punc\", \"{\")\n            || is_default\n                && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\"))\n                && is_token(peek(), \"punc\")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n            exported_definition = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"punc\":\n            if (tmp.value === \"[\") {\n                next();\n                var ex = expression(false);\n                expect(\"]\");\n                return ex;\n            } else unexpected(tmp);\n          case \"operator\":\n            if (tmp.value === \"*\") {\n                next();\n                return null;\n            }\n            if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n                unexpected(tmp);\n            }\n          case \"name\":\n            if (tmp.value == \"yield\") {\n                if (is_in_generator()) {\n                    token_error(tmp, \"Yield cannot be used as identifier inside generators\");\n                } else if (!is_token(peek(), \"punc\", \":\")\n                    && !is_token(peek(), \"punc\", \"(\")\n                    && S.input.has_directive(\"use strict\")) {\n                    token_error(tmp, \"Unexpected yield identifier inside strict mode\");\n                }\n            }\n          case \"string\":\n          case \"num\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    }\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\") unexpected();\n        next();\n        return tmp.value;\n    }\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This :\n                    name == \"super\" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    }\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == \"yield\") {\n            token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n        }\n        if (S.input.has_directive(\"use strict\")) {\n            if (name == \"yield\") {\n                token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n                token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    function mark_pure(call) {\n        var start = call.start;\n        var comments = start.comments_before;\n        var i = HOP(start, \"comments_before_length\") ? start.comments_before_length : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__PURE__/.test(comment.value)) {\n                call.pure = comment;\n                break;\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : call_args(),\n                end        : prev()\n            });\n            mark_pure(call);\n            return subscripts(call, true);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string(true),\n                end: prev()\n            }), allow_calls);\n        }\n        return expr;\n    };\n\n    var call_args = embed_tokens(function _call_args() {\n        var args = [];\n        while (!is(\"punc\", \")\")) {\n            if (is(\"expand\", \"...\")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false),\n                    end: prev()\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n        }\n        next();\n        return args;\n    });\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == \"name\" && start.value == \"await\") {\n            if (is_in_async()) {\n                next();\n                return _await_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected await identifier inside strict mode\");\n            }\n        }\n        if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    }\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        if (op == \"**\" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, \"punc\", \"(\")\n            && left.operator !== \"--\" && left.operator !== \"++\")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === \"**\" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    }\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    }\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: \"=\",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        handle_regexp();\n        var start = S.token;\n\n        if (start.type == \"name\" && start.value == \"yield\") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is(\"operator\") && ASSIGNMENT.has(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    }\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function() {\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        if (options.module) S.input.add_directive(\"use strict\");\n        while (!is(\"eof\"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n}\n\nexport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    js_error,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n    RESERVED_WORDS,\n    tokenizer,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    HOP,\n    MAP,\n    noop,\n    string_template,\n} from \"./utils.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (i[0] === \"$\") {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    return ctor;\n}\n\nvar AST_Token = DEFNODE(\"Token\", \"type value line col pos endline endcol endpos nlb comments_before comments_after file raw\", {\n}, null);\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Node) {\n        body._walk(visitor);\n    } else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n}\n\nfunction clone_block_scope(deep) {\n    var clone = this._clone(deep);\n    if (this.block_scope) {\n        // TODO this is sometimes undefined during compression.\n        // But it should always have a value!\n        clone.block_scope = this.block_scope.clone();\n    }\n    return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", {\n    $documentation: \"A body of statements (usually braced)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n        block_scope: \"[AST_Scope] the block scope\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    clone: clone_block_scope\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", \"block_scope\", {\n    $documentation: \"Internal class.  All loops inherit from it.\",\n    $propdoc: {\n        block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n    },\n    clone: clone_block_scope\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", {\n    $documentation: \"A `for ... of` statement\",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        functions: \"[Map/S] like `variables`, but only lists function declarations\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n    get_defun_scope: function() {\n        var self = this;\n        while (self.is_block_scope()) {\n            self = self.parent_scope;\n        }\n        return self;\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (this.variables) node.variables = new Map(this.variables);\n        if (this.functions) node.functions = new Map(this.functions);\n        if (this.enclosed) node.enclosed = this.enclosed.slice();\n        return node;\n    },\n    pinned: function() {\n        return this.uses_eval || this.uses_with;\n    }\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_enclose: function(args_values) {\n        if (typeof args_values != \"string\") args_values = \"\";\n        var index = args_values.indexOf(\":\");\n        if (index < 0) index = args_values.length;\n        var body = this.body;\n        return parse([\n            \"(function(\",\n            args_values.slice(0, index),\n            '){\"$ORIG\"})(',\n            args_values.slice(index + 1),\n            \")\"\n        ].join(\"\")).transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", {\n    $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n    $propdoc: {\n        expression: \"[AST_Node] the thing to be expanded\"\n    },\n    _walk: function(visitor) {\n        var self = this;\n        return visitor._visit(this, function() {\n            self.expression.walk(visitor);\n        });\n    }\n});\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments is_generator async\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out = out.concat(this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", \"inlined\", {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE(\"Arrow\", \"inlined\", {\n    $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", \"inlined\", {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", {\n    $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n    $propdoc: {\n        \"names\": \"[AST_Node*] Array of properties or elements\",\n        \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.names.forEach(function(name) {\n                name._walk(visitor);\n            });\n        });\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n            if (node instanceof AST_Expansion) {\n                out.push(node.expression);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE(\"PrefixedTemplateString\", \"template_string prefix\", {\n    $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n    $propdoc: {\n        template_string: \"[AST_TemplateString] The template string\",\n        prefix: \"[AST_SymbolRef|AST_PropAccess] The prefix, which can be a symbol such as `foo` or a dotted expression such as `String.raw`.\"\n    },\n    _walk: function(visitor) {\n        this.prefix._walk(visitor);\n        this.template_string._walk(visitor);\n    }\n});\n\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", {\n    $documentation: \"A template string literal\",\n    $propdoc: {\n        segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.segments.forEach(function(seg) {\n                seg._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", {\n    $documentation: \"A segment of a template string literal\",\n    $propdoc: {\n        value: \"Content of the segment\",\n        raw: \"Raw content of the segment\"\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function() {\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function() {\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.argname) this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE(\"Let\", null, {\n    $documentation: \"A `let` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", {\n    $documentation: \"The part of the export/import statement that declare names from a module.\",\n    $propdoc: {\n        foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n        name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Import = DEFNODE(\"Import\", \"imported_name imported_names module_name\", {\n    $documentation: \"An `import` statement\",\n    $propdoc: {\n        imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n        imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n        module_name: \"[AST_String] String literal describing where this module came from\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.imported_name) {\n                this.imported_name._walk(visitor);\n            }\n            if (this.imported_names) {\n                this.imported_names.forEach(function(name_import) {\n                    name_import._walk(visitor);\n                });\n            }\n            this.module_name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Export = DEFNODE(\"Export\", \"exported_definition exported_value is_default exported_names module_name\", {\n    $documentation: \"An `export` statement\",\n    $propdoc: {\n        exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n        exported_value: \"[AST_Node?] An exported value\",\n        exported_names: \"[AST_NameMapping*?] List of exported names\",\n        module_name: \"[AST_String?] Name of the file to load exports from\",\n        is_default: \"[Boolean] Whether this is the default exported value of this module\"\n    },\n    _walk: function (visitor) {\n        visitor._visit(this, function () {\n            if (this.exported_definition) {\n                this.exported_definition._walk(visitor);\n            }\n            if (this.exported_value) {\n                this.exported_value._walk(visitor);\n            }\n            if (this.exported_names) {\n                this.exported_names.forEach(function(name_export) {\n                    name_export._walk(visitor);\n                });\n            }\n            if (this.module_name) {\n                this.module_name._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", {\n    $documentation: \"A dotted property access expression\",\n    $propdoc: {\n        quote: \"[string] the original quote character when transformed from AST_Sub\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", null, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, {\n    $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n        value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static setter (classes only)\"\n    },\n    $documentation: \"An object setter property\",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static getter (classes only)\"\n    },\n    $documentation: \"An object getter property\",\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE(\"ConciseMethod\", \"quote static is_generator async\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] is this method static (classes only)\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    $documentation: \"An ES6 concise method inside an object or class\"\n}, AST_ObjectProperty);\n\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties inlined\", {\n    $propdoc: {\n        name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n        extends: \"[AST_Node]? optional parent class\",\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    $documentation: \"An ES6 class\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach(function(prop) {\n                prop._walk(visitor);\n            });\n        });\n    },\n}, AST_Scope);\n\nvar AST_DefClass = DEFNODE(\"DefClass\", null, {\n    $documentation: \"A class definition\",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, {\n    $documentation: \"A class expression.\"\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\"\n});\n\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, {\n    $documentation: \"A reference to new.target\"\n});\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE(\"SymbolBlockDeclaration\", null, {\n    $documentation: \"Base class for block-scoped declaration symbols\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, {\n    $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, {\n    $documentation: \"Symbol in an object defining a method\",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, {\n    $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, {\n    $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, {\n    $documentation: \"Symbol referring to an imported name\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, {\n    $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, {\n    $documentation: \"Symbol referring to a name to export\",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, {\n    $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE(\"Super\", null, {\n    $documentation: \"The `super` symbol\",\n}, AST_This);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value literal\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        literal: \"[string] numeric value as string (optional)\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\",\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\nvar AST_Await = DEFNODE(\"Await\", \"expression\", {\n    $documentation: \"An `await` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the mandatory expression being awaited\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", {\n    $documentation: \"A `yield` statement\",\n    $propdoc: {\n        expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n        is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n}\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function() {\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives[\"use strict\"]) {\n                this.directives[\"use strict\"] = node;\n            }\n        }\n        this.stack.push(node);\n    },\n    pop: function() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    },\n    loopcontrol_target: function(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n};\n\n// Tree transformer helpers.\nfunction TreeTransformer(before, after) {\n    TreeWalker.call(this);\n    this.before = before;\n    this.after = after;\n}\nTreeTransformer.prototype = new TreeWalker;\n\nexport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Array,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_Conditional,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Do,\n    AST_Dot,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Object,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_TemplateString,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport {\n    MAP,\n    noop,\n} from \"./utils.js\";\n\n(function() {\n\n    function _(node, descend) {\n        node.DEFMETHOD(\"transform\", function(tw, in_list) {\n            var x, y;\n            tw.push(this);\n            if (tw.before) x = tw.before(this, descend, in_list);\n            if (x === undefined) {\n                x = this;\n                descend(x, tw);\n                if (tw.after) {\n                    y = tw.after(x, in_list);\n                    if (y !== undefined) x = y;\n                }\n            }\n            tw.pop();\n            return x;\n        });\n    }\n\n    function do_list(list, tw) {\n        return MAP(list, function(node) {\n            return node.transform(tw, true);\n        });\n    }\n\n    _(AST_Node, noop);\n\n    _(AST_LabeledStatement, function(self, tw) {\n        self.label = self.label.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_SimpleStatement, function(self, tw) {\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Block, function(self, tw) {\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Do, function(self, tw) {\n        self.body = self.body.transform(tw);\n        self.condition = self.condition.transform(tw);\n    });\n\n    _(AST_While, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_For, function(self, tw) {\n        if (self.init) self.init = self.init.transform(tw);\n        if (self.condition) self.condition = self.condition.transform(tw);\n        if (self.step) self.step = self.step.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_ForIn, function(self, tw) {\n        self.init = self.init.transform(tw);\n        self.object = self.object.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_With, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Exit, function(self, tw) {\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_LoopControl, function(self, tw) {\n        if (self.label) self.label = self.label.transform(tw);\n    });\n\n    _(AST_If, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n        if (self.alternative) self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Switch, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Case, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Try, function(self, tw) {\n        self.body = do_list(self.body, tw);\n        if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n        if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n    });\n\n    _(AST_Catch, function(self, tw) {\n        if (self.argname) self.argname = self.argname.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Definitions, function(self, tw) {\n        self.definitions = do_list(self.definitions, tw);\n    });\n\n    _(AST_VarDef, function(self, tw) {\n        self.name = self.name.transform(tw);\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_Destructuring, function(self, tw) {\n        self.names = do_list(self.names, tw);\n    });\n\n    _(AST_Lambda, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        self.argnames = do_list(self.argnames, tw);\n        if (self.body instanceof AST_Node) {\n            self.body = self.body.transform(tw);\n        } else {\n            self.body = do_list(self.body, tw);\n        }\n    });\n\n    _(AST_Call, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.args = do_list(self.args, tw);\n    });\n\n    _(AST_Sequence, function(self, tw) {\n        self.expressions = do_list(self.expressions, tw);\n    });\n\n    _(AST_Dot, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Sub, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.property = self.property.transform(tw);\n    });\n\n    _(AST_Yield, function(self, tw) {\n        if (self.expression) self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Await, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Unary, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Binary, function(self, tw) {\n        self.left = self.left.transform(tw);\n        self.right = self.right.transform(tw);\n    });\n\n    _(AST_Conditional, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.consequent = self.consequent.transform(tw);\n        self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Array, function(self, tw) {\n        self.elements = do_list(self.elements, tw);\n    });\n\n    _(AST_Object, function(self, tw) {\n        self.properties = do_list(self.properties, tw);\n    });\n\n    _(AST_ObjectProperty, function(self, tw) {\n        if (self.key instanceof AST_Node) {\n            self.key = self.key.transform(tw);\n        }\n        self.value = self.value.transform(tw);\n    });\n\n    _(AST_Class, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        if (self.extends) self.extends = self.extends.transform(tw);\n        self.properties = do_list(self.properties, tw);\n    });\n\n    _(AST_Expansion, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_NameMapping, function(self, tw) {\n        self.foreign_name = self.foreign_name.transform(tw);\n        self.name = self.name.transform(tw);\n    });\n\n    _(AST_Import, function(self, tw) {\n        if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n        if (self.imported_names) do_list(self.imported_names, tw);\n        self.module_name = self.module_name.transform(tw);\n    });\n\n    _(AST_Export, function(self, tw) {\n        if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n        if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n        if (self.exported_names) do_list(self.exported_names, tw);\n        if (self.module_name) self.module_name = self.module_name.transform(tw);\n    });\n\n    _(AST_TemplateString, function(self, tw) {\n        self.segments = do_list(self.segments, tw);\n    });\n\n    _(AST_PrefixedTemplateString, function(self, tw) {\n        self.prefix = self.prefix.transform(tw);\n        self.template_string = self.template_string.transform(tw);\n    });\n\n})();\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    first_in_statement,\n    makePredicate,\n    noop,\n    return_false,\n    return_true,\n} from \"./utils.js\";\n\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    PRECEDENCE,\n    RESERVED_WORDS,\n} from \"./parse.js\";\n\nvar EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only       : false,\n        beautify         : false,\n        braces           : false,\n        comments         : false,\n        ecma             : 5,\n        ie8              : false,\n        indent_level     : 4,\n        indent_start     : 0,\n        inline_script    : true,\n        keep_quoted_props: false,\n        max_line_len     : false,\n        preamble         : null,\n        quote_keys       : false,\n        quote_style      : 0,\n        safari10         : false,\n        semicolons       : true,\n        shebang          : true,\n        shorthand        : undefined,\n        source_map       : null,\n        webkit           : false,\n        width            : 80,\n        wrap_iife        : false,\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        var comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n\n    var to_utf8 = options.ascii_only ? function(str, identifier) {\n        if (options.ecma >= 6) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        var s = \"\";\n        for (var i = 0, len = str.length; i < len; i++) {\n            if (is_surrogate_pair_head(str[i]) && !is_surrogate_pair_tail(str[i + 1])\n                || is_surrogate_pair_tail(str[i]) && !is_surrogate_pair_head(str[i - 1])) {\n                s += \"\\\\u\" + str.charCodeAt(i).toString(16);\n            } else {\n                s += str[i];\n            }\n        }\n        return s;\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            } catch(ex) {\n                mapping.token.file != null && AST_Node.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\", {\n                    file: mapping.token.file,\n                    line: mapping.token.line,\n                    col: mapping.token.col,\n                    cline: mapping.line,\n                    ccol: mapping.col,\n                    name: mapping.name || \"\"\n                });\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                if (mappings) {\n                    var delta = right.length - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n            if (current_col > options.max_line_len) {\n                AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT += \"\\n\";\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT += str;\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT[newline_insert] != \"\\n\") {\n            OUTPUT = OUTPUT.slice(0, newline_insert) + \"\\n\" + OUTPUT.slice(newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    }\n\n    function has_nlb() {\n        let n = OUTPUT.length - 1;\n        while (n >= 0) {\n            const code = OUTPUT.charCodeAt(n);\n            if (code === CODE_LINE_BREAK) {\n                return true;\n            }\n\n            if (code !== CODE_SPACE) {\n                return false;\n            }\n            n--;\n        }\n        return true;\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        if (start.comments_before && start.comments_before._dumped === self) return;\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        comments._dumped = self;\n\n        if (node instanceof AST_Exit && node.value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && text._dumped !== self) {\n                        text._dumped = self;\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type == \"comment5\") {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node);\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"\\n\");\n                indent();\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || comments._dumped === self) return;\n        if (!(node instanceof AST_Statement || all(comments, function(c) {\n            return !/comment[134]/.test(c.type);\n        }))) return;\n        comments._dumped = self;\n        var insert = OUTPUT.length;\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \"));\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length > insert) newline_insert = insert;\n    }\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    var in_directive = false;\n    var active_scope = null;\n    var use_asm = null;\n\n    AST_Node.DEFMETHOD(\"print\", function(stream, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            active_scope = self;\n        } else if (!use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            use_asm = active_scope;\n        }\n        function doit() {\n            stream.prepend_comments(self);\n            self.add_source_map(stream);\n            generator(self, stream);\n            stream.append_comments(self);\n        }\n        stream.push_node(self);\n        if (force_parens || self.needs_parens(stream)) {\n            stream.with_parens(doit);\n        } else {\n            doit();\n        }\n        stream.pop_node();\n        if (self === use_asm) {\n            use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var s = OutputStream(options);\n        this.print(s);\n        return s.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            return p instanceof AST_Call && p.expression === this;\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal, because otherwise it would be\n    // interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            var po = p.operator, pp = PRECEDENCE[po];\n            var so = this.operator, sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            var parens = false;\n            this.walk(new TreeWalker(function(node) {\n                if (parens || node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    parens = true;\n                    return true;\n                }\n            }));\n            return parens;\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (!need_constructor_parens(this, output)\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                in_directive = false;\n            }\n        });\n        in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Arrow\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        if (self.body instanceof AST_Node) {\n            self.body.print(output);\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            this.value.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        force_statement(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        print_braced(self, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            self.foreign_name.name;\n        if (names_are_different) {\n            if (is_import) {\n                output.print(self.foreign_name.name);\n            } else {\n                self.name.print(output);\n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                output.print(self.foreign_name.name);\n            }\n        } else {\n            self.name.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n                self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) node.walk(new TreeWalker(function(node) {\n            if (parens || node instanceof AST_Scope) return true;\n            if (node instanceof AST_Binary && node.operator == \"in\") {\n                parens = true;\n                return true;\n            }\n        }));\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && !need_constructor_parens(self, output))\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        if (output.option(\"ie8\") && RESERVED_WORDS.has(prop)) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            output.print_string(key);\n        } else if (\"\" + +key == key && key >= 0) {\n            output.print(make_num(key));\n        } else if (RESERVED_WORDS.has(key) ? !output.option(\"ie8\") : is_identifier_string(key)) {\n            if (quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else {\n                output.print_name(key);\n            }\n        } else {\n            output.print_string(key, quote);\n        }\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value) === self.key &&\n            !RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", output);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if (use_asm && self.start && self.start.raw != null) {\n            output.print(self.start.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n\n    DEFPRINT(AST_RegExp, function(self, output) {\n        var regexp = self.getValue();\n        var str = regexp.toString();\n        str = output.to_utf8(str);\n        output.print(str);\n        var p = output.parent();\n        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)\n            output.print(\" \");\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    }\n\n    // self should be AST_New.  decide if we want to show parens or not.\n    function need_constructor_parens(self, output) {\n        // Always print parentheses with arguments\n        if (self.args.length > 0) return true;\n\n        return output.option(\"beautify\");\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10), a = [ str.replace(/^0\\./, \".\").replace(\"e+\", \"e\") ], m;\n        if (Math.floor(num) === num) {\n            a.push(\n                (num >= 0 ? \"0x\" : \"-0x\") + num.toString(16).toLowerCase() // probably pointless\n            );\n            if ((m = /^(.*?)(0{3,})$/.exec(num))) {\n                a.push(m[1] + \"e\" + m[2].length);\n            }\n        } else if ((m = /^0?\\.(0+)(.*)$/.exec(num))) {\n            a.push(m[2] + \"e-\" + (m[1].length + m[2].length));\n        }\n        return best_of(a);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n    ], function(output) {\n        output.add_mapping(this.start, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    keep_name,\n    member,\n    mergeSort,\n    push_uniq,\n    return_false,\n    return_this,\n    return_true,\n    string_template,\n} from \"./utils.js\";\nimport {\n    AST_Arrow,\n    AST_Block,\n    AST_Call,\n    AST_Class,\n    AST_Conditional,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Dot,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Scope,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_With,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    RESERVED_WORDS,\n    js_error,\n} from \"./parse.js\";\n\nfunction SymbolDef(scope, orig, init) {\n    this.name = orig.name;\n    this.orig = [ orig ];\n    this.init = init;\n    this.eliminated = 0;\n    this.scope = scope;\n    this.references = [];\n    this.replaced = 0;\n    this.global = false;\n    this.export = false;\n    this.mangled_name = null;\n    this.undeclared = false;\n    this.id = SymbolDef.next_id++;\n}\n\nSymbolDef.next_id = 1;\n\nvar MASK_EXPORT_DONT_MANGLE = 1 << 0;\nvar MASK_EXPORT_WANT_MANGLE = 1 << 1;\n\nSymbolDef.prototype = {\n    unmangleable: function(options) {\n        if (!options) options = {};\n\n        return this.global && !options.toplevel\n            || (this.export & MASK_EXPORT_DONT_MANGLE)\n            || this.undeclared\n            || !options.eval && this.scope.pinned()\n            || (this.orig[0] instanceof AST_SymbolLambda\n                  || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name)\n            || this.orig[0] instanceof AST_SymbolMethod\n            || (this.orig[0] instanceof AST_SymbolClass\n                  || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n    },\n    mangle: function(options) {\n        var cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        } else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (options.ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            var def;\n            if (def = this.redefined()) {\n                this.mangled_name = def.mangled_name || def.name;\n            } else\n                this.mangled_name = s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    },\n    redefined: function() {\n        return this.defun && this.defun.variables.get(this.name);\n    }\n};\n\nAST_Toplevel.DEFMETHOD(\"figure_out_scope\", function(options) {\n    options = defaults(options, {\n        cache: null,\n        ie8: false,\n        safari10: false,\n    });\n\n    // pass 1: setup scope chaining and handle definitions\n    var self = this;\n    var scope = self.parent_scope = null;\n    var labels = new Map();\n    var defun = null;\n    var in_destructuring = null;\n    var for_scopes = [];\n    var tw = new TreeWalker(function(node, descend) {\n        if (node.is_block_scope()) {\n            var save_scope = scope;\n            node.block_scope = scope = new AST_Scope(node);\n            scope.init_scope_vars(save_scope);\n            if (!(node instanceof AST_Scope)) {\n                scope.uses_with = save_scope.uses_with;\n                scope.uses_eval = save_scope.uses_eval;\n                scope.directives = save_scope.directives;\n            }\n            if (options.safari10) {\n                if (node instanceof AST_For || node instanceof AST_ForIn) {\n                    for_scopes.push(scope);\n                }\n            }\n            descend();\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Destructuring) {\n            in_destructuring = node;  // These don't nest\n            descend();\n            in_destructuring = null;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Map();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.delete(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n        } else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            mark_export((node.scope = defun.parent_scope.get_defun_scope()).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolClass) {\n            mark_export(defun.def_variable(node, defun), 1);\n        } else if (node instanceof AST_SymbolImport) {\n            scope.def_variable(node);\n        } else if (node instanceof AST_SymbolDefClass) {\n            // This deals with the name of the class being available\n            // inside the class.\n            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolLet\n            || node instanceof AST_SymbolConst) {\n            var def;\n            if (node instanceof AST_SymbolBlockDeclaration) {\n                def = scope.def_variable(node, null);\n            } else {\n                def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n            }\n            if (!all(def.orig, function(sym) {\n                if (sym === node) return true;\n                if (node instanceof AST_SymbolBlockDeclaration) {\n                    return sym instanceof AST_SymbolLambda;\n                }\n                return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n            })) {\n                js_error(\n                    node.name + \" redeclared\",\n                    node.start.file,\n                    node.start.line,\n                    node.start.col,\n                    node.start.pos\n                );\n            }\n            if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n            def.destructuring = in_destructuring;\n            if (defun !== scope) {\n                node.mark_enclosed(options);\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference(options);\n                }\n            }\n        } else if (node instanceof AST_SymbolCatch) {\n            scope.def_variable(node).defun = defun;\n        } else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n        if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n            js_error(\n                node.TYPE + \" statement may only appear at top level\",\n                node.start.file,\n                node.start.line,\n                node.start.col,\n                node.start.pos\n            );\n        }\n\n        function mark_export(def, level) {\n            if (in_destructuring) {\n                var i = 0;\n                do {\n                    level++;\n                } while (tw.parent(i++) !== in_destructuring);\n            }\n            var node = tw.parent(level);\n            if (def.export = node instanceof AST_Export && MASK_EXPORT_DONT_MANGLE) {\n                var exported = node.exported_definition;\n                if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n                    def.export = MASK_EXPORT_WANT_MANGLE;\n                }\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 2: find back references and eval\n    self.globals = new Map();\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym;\n            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name\n                || !(sym = node.scope.find_variable(name))) {\n                sym = self.def_global(node);\n                if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n            } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n                sym.scope.uses_arguments = true;\n            }\n            node.thedef = sym;\n            node.reference(options);\n            if (node.scope.is_block_scope()\n                && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n                node.scope = node.scope.get_defun_scope();\n            }\n            return true;\n        }\n        // ensure mangling works if catch reuses a scope variable\n        var def;\n        if (node instanceof AST_SymbolCatch && (def = node.definition().redefined())) {\n            var s = node.scope;\n            while (s) {\n                push_uniq(s.enclosed, def);\n                if (s === def.scope) break;\n                s = s.parent_scope;\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 3: work around IE8 and Safari catch scope bugs\n    if (options.ie8 || options.safari10) {\n        self.walk(new TreeWalker(function(node, descend) {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.thedef.defun;\n                var def = scope.find_variable(name) || self.globals.get(name) || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference(options);\n                });\n                node.thedef = def;\n                node.reference(options);\n                return true;\n            }\n        }));\n    }\n\n    // pass 4: add symbol definitions to loop scopes\n    // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n    // https://github.com/mishoo/UglifyJS2/issues/1753\n    // https://bugs.webkit.org/show_bug.cgi?id=171041\n    if (options.safari10) {\n        for (var i = 0; i < for_scopes.length; i++) {\n            var scope = for_scopes[i];\n            scope.parent_scope.variables.forEach(function(def) {\n                push_uniq(scope.enclosed, def);\n            });\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node) {\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope) {\n    this.variables = new Map();         // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.functions = new Map();         // map name to AST_SymbolDefun (functions defined in this scope)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolFunarg({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function(options) {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (options.keep_fnames) {\n            s.functions.forEach(function(d) {\n                if (keep_name(options.keep_fnames, d.name)) {\n                    push_uniq(def.scope.enclosed, d);\n                }\n            });\n        }\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function(options) {\n    this.definition().references.push(this);\n    this.mark_enclosed(options);\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name) {\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol, init) {\n    var def = this.def_variable(symbol, init);\n    if (!def.init || def.init instanceof AST_Defun) def.init = init;\n    this.functions.set(symbol.name, def);\n    return def;\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol, init) {\n    var def = this.variables.get(symbol.name);\n    if (def) {\n        def.orig.push(symbol);\n        if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n            def.init = init;\n        }\n    } else {\n        def = new SymbolDef(this, symbol, init);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    }\n    return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n    var ext = scope.enclosed;\n    out: while (true) {\n        var m = base54(++scope.cname);\n        if (RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name reserved from mangling.\n        if (member(m, options.reserved)) continue;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (var i = ext.length; --i >= 0;) {\n            var sym = ext[i];\n            var name = sym.mangled_name || (sym.unmangleable(options) && sym.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options) {\n    return next_mangled(this, options);\n});\n\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function(options) {\n    var name;\n    do {\n        name = next_mangled(this, options);\n    } while (this.mangled_names.has(name));\n    return name;\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def) {\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = next_mangled(this, options);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options) {\n    var def = this.definition();\n    return !def || def.unmangleable(options);\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function() {\n    return !this.definition().references.length && !this.scope.pinned();\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function() {\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function() {\n    return this.definition().global;\n});\n\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function(options) {\n    options = defaults(options, {\n        eval        : false,\n        ie8         : false,\n        keep_classnames: false,\n        keep_fnames : false,\n        module      : false,\n        reserved    : [],\n        toplevel    : false,\n    });\n    if (options[\"module\"]) {\n        options.toplevel = true;\n    }\n    if (!Array.isArray(options.reserved)) options.reserved = [];\n    // Never mangle arguments\n    push_uniq(options.reserved, \"arguments\");\n    return options;\n});\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options) {\n    options = this._default_mangler_options(options);\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    var mangled_names = this.mangled_names = new Set();\n    if (options.cache) {\n        this.globals.forEach(collect);\n        if (options.cache.props) {\n            options.cache.props.forEach(function(mangled_name) {\n                mangled_names.add(mangled_name);\n            });\n        }\n    }\n\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_Scope) {\n            node.variables.forEach(collect);\n            return;\n        }\n        if (node.is_block_scope()) {\n            node.block_scope.variables.forEach(collect);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            var name;\n            do name = base54(++lname); while (RESERVED_WORDS.has(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n    this.walk(tw);\n    to_mangle.forEach(function(def) { def.mangle(options); });\n\n    function collect(symbol) {\n        if (!member(symbol.name, options.reserved)) {\n            if (!(symbol.export & MASK_EXPORT_DONT_MANGLE)) {\n                to_mangle.push(symbol);\n            }\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function(options) {\n    var cache = options.cache && options.cache.props;\n    var avoid = new Set();\n    options.reserved.forEach(to_avoid);\n    this.globals.forEach(add_def);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(add_def);\n        if (node instanceof AST_SymbolCatch) add_def(node.definition());\n    }));\n    return avoid;\n\n    function to_avoid(name) {\n        avoid.add(name);\n    }\n\n    function add_def(def) {\n        var name = def.name;\n        if (def.global && cache && cache.has(name)) name = cache.get(name);\n        else if (!def.unmangleable(options)) return;\n        to_avoid(name);\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"expand_names\", function(options) {\n    base54.reset();\n    base54.sort();\n    options = this._default_mangler_options(options);\n    var avoid = this.find_colliding_names(options);\n    var cname = 0;\n    this.globals.forEach(rename);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(rename);\n        if (node instanceof AST_SymbolCatch) rename(node.definition());\n    }));\n\n    function next_name() {\n        var name;\n        do {\n            name = base54(cname++);\n        } while (avoid.has(name) || RESERVED_WORDS.has(name));\n        return name;\n    }\n\n    function rename(def) {\n        if (def.global && options.cache) return;\n        if (def.unmangleable(options)) return;\n        if (member(def.name, options.reserved)) return;\n        var d = def.redefined();\n        def.name = d ? d.name : next_name();\n        def.orig.forEach(function(sym) {\n            sym.name = def.name;\n        });\n        def.references.forEach(function(sym) {\n            sym.name = def.name;\n        });\n    }\n});\n\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function() {\n    return this.expressions[this.expressions.length - 1];\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options) {\n    options = this._default_mangler_options(options);\n    try {\n        AST_Node.prototype.print = function(stream, force_parens) {\n            this._print(stream, force_parens);\n            if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n                base54.consider(this.name, -1);\n            } else if (options.properties) {\n                if (this instanceof AST_Dot) {\n                    base54.consider(this.property, -1);\n                } else if (this instanceof AST_Sub) {\n                    skip_string(this.property);\n                }\n            }\n        };\n        base54.consider(this.print_to_string(), 1);\n    } finally {\n        AST_Node.prototype.print = AST_Node.prototype._print;\n    }\n    base54.sort();\n\n    function skip_string(node) {\n        if (node instanceof AST_String) {\n            base54.consider(node.value, -1);\n        } else if (node instanceof AST_Conditional) {\n            skip_string(node.consequent);\n            skip_string(node.alternative);\n        } else if (node instanceof AST_Sequence) {\n            skip_string(node.tail_node());\n        }\n    }\n});\n\nvar base54 = (function() {\n    var leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n    var digits = \"0123456789\".split(\"\");\n    var chars, frequency;\n    function reset() {\n        frequency = new Map();\n        leading.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n        digits.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n    }\n    base54.consider = function(str, delta) {\n        for (var i = str.length; --i >= 0;) {\n            frequency.set(str[i], frequency.get(str[i]) + delta);\n        }\n    };\n    function compare(a, b) {\n        return frequency.get(b) - frequency.get(a);\n    }\n    base54.sort = function() {\n        chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n    };\n    base54.reset = reset;\n    reset();\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += chars[num % base];\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    }\n    return base54;\n})();\n\nexport {\n    base54,\n    SymbolDef,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    find_if,\n    first_in_statement,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    MAP,\n    member,\n    merge,\n    noop,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n} from \"../utils.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NaN,\n    AST_New,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n} from \"../ast.js\";\nimport {\n    is_identifier_string,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n} from \"../parse.js\";\nimport { OutputStream } from \"../output.js\";\nimport {\n    base54,\n    SymbolDef,\n} from \"../scope.js\";\n\nfunction Compressor(options, false_by_default) {\n    if (!(this instanceof Compressor))\n        return new Compressor(options, false_by_default);\n    TreeTransformer.call(this, this.before, this.after);\n    if (options.defaults !== undefined && !options.defaults) false_by_default = true;\n    this.options = defaults(options, {\n        arguments     : false,\n        arrows        : !false_by_default,\n        booleans      : !false_by_default,\n        booleans_as_integers : false,\n        collapse_vars : !false_by_default,\n        comparisons   : !false_by_default,\n        computed_props: !false_by_default,\n        conditionals  : !false_by_default,\n        dead_code     : !false_by_default,\n        defaults      : true,\n        directives    : !false_by_default,\n        drop_console  : false,\n        drop_debugger : !false_by_default,\n        ecma          : 5,\n        evaluate      : !false_by_default,\n        expression    : false,\n        global_defs   : false,\n        hoist_funs    : false,\n        hoist_props   : !false_by_default,\n        hoist_vars    : false,\n        ie8           : false,\n        if_return     : !false_by_default,\n        inline        : !false_by_default,\n        join_vars     : !false_by_default,\n        keep_classnames: false,\n        keep_fargs    : true,\n        keep_fnames   : false,\n        keep_infinity : false,\n        loops         : !false_by_default,\n        module        : false,\n        negate_iife   : !false_by_default,\n        passes        : 1,\n        properties    : !false_by_default,\n        pure_getters  : !false_by_default && \"strict\",\n        pure_funcs    : null,\n        reduce_funcs  : !false_by_default,\n        reduce_vars   : !false_by_default,\n        sequences     : !false_by_default,\n        side_effects  : !false_by_default,\n        switches      : !false_by_default,\n        top_retain    : null,\n        toplevel      : !!(options && options[\"top_retain\"]),\n        typeofs       : !false_by_default,\n        unsafe        : false,\n        unsafe_arrows : false,\n        unsafe_comps  : false,\n        unsafe_Function: false,\n        unsafe_math   : false,\n        unsafe_methods: false,\n        unsafe_proto  : false,\n        unsafe_regexp : false,\n        unsafe_undefined: false,\n        unused        : !false_by_default,\n        warnings      : false,\n    }, true);\n    var global_defs = this.options[\"global_defs\"];\n    if (typeof global_defs == \"object\") for (var key in global_defs) {\n        if (key[0] === \"@\" && HOP(global_defs, key)) {\n            global_defs[key.slice(1)] = parse(global_defs[key], {\n                expression: true\n            });\n        }\n    }\n    if (this.options[\"inline\"] === true) this.options[\"inline\"] = 3;\n    var pure_funcs = this.options[\"pure_funcs\"];\n    if (typeof pure_funcs == \"function\") {\n        this.pure_funcs = pure_funcs;\n    } else {\n        this.pure_funcs = pure_funcs ? function(node) {\n            return !pure_funcs.includes(node.expression.print_to_string());\n        } : return_true;\n    }\n    var top_retain = this.options[\"top_retain\"];\n    if (top_retain instanceof RegExp) {\n        this.top_retain = function(def) {\n            return top_retain.test(def.name);\n        };\n    } else if (typeof top_retain == \"function\") {\n        this.top_retain = top_retain;\n    } else if (top_retain) {\n        if (typeof top_retain == \"string\") {\n            top_retain = top_retain.split(/,/);\n        }\n        this.top_retain = function(def) {\n            return top_retain.includes(def.name);\n        };\n    }\n    if (this.options[\"module\"]) {\n        this.directives[\"use strict\"] = true;\n        this.options[\"toplevel\"] = true;\n    }\n    var toplevel = this.options[\"toplevel\"];\n    this.toplevel = typeof toplevel == \"string\" ? {\n        funcs: /funcs/.test(toplevel),\n        vars: /vars/.test(toplevel)\n    } : {\n        funcs: toplevel,\n        vars: toplevel\n    };\n    var sequences = this.options[\"sequences\"];\n    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n    this.warnings_produced = {};\n}\n\nCompressor.prototype = new TreeTransformer;\nmerge(Compressor.prototype, {\n    option: function(key) { return this.options[key]; },\n    exposed: function(def) {\n        if (def.export) return true;\n        if (def.global) for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return true;\n        return false;\n    },\n    in_boolean_context: function() {\n        if (!this.option(\"booleans\")) return false;\n        var self = this.self();\n        for (var i = 0, p; p = this.parent(i); i++) {\n            if (p instanceof AST_SimpleStatement\n                || p instanceof AST_Conditional && p.condition === self\n                || p instanceof AST_DWLoop && p.condition === self\n                || p instanceof AST_For && p.condition === self\n                || p instanceof AST_If && p.condition === self\n                || p instanceof AST_UnaryPrefix && p.operator == \"!\" && p.expression === self) {\n                return true;\n            }\n            if (p instanceof AST_Binary && (p.operator == \"&&\" || p.operator == \"||\")\n                || p instanceof AST_Conditional\n                || p.tail_node() === self) {\n                self = p;\n            } else {\n                return false;\n            }\n        }\n    },\n    compress: function(node) {\n        node = node.resolve_defines(this);\n        if (this.option(\"expression\")) {\n            node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        var min_count = 1 / 0;\n        var stopping = false;\n        var mangle = { ie8: this.option(\"ie8\") };\n        for (var pass = 0; pass < passes; pass++) {\n            node.figure_out_scope(mangle);\n            if (pass === 0 && this.option(\"drop_console\")) {\n                // must be run before reduce_vars and compress pass\n                node = node.drop_console();\n            }\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this);\n            node = node.transform(this);\n            if (passes > 1) {\n                var count = 0;\n                node.walk(new TreeWalker(function() {\n                    count++;\n                }));\n                this.info(\"pass \" + pass + \": last_count: \" + min_count + \", count: \" + count);\n                if (count < min_count) {\n                    min_count = count;\n                    stopping = false;\n                } else if (stopping) {\n                    break;\n                } else {\n                    stopping = true;\n                }\n            }\n        }\n        if (this.option(\"expression\")) {\n            node.process_expression(false);\n        }\n        return node;\n    },\n    info: function() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    },\n    warn: function(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    },\n    clear_warnings: function() {\n        this.warnings_produced = {};\n    },\n    before: function(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_properties(this);\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after def_optimize().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n});\n\n(function() {\n\n    function def_optimize(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor) {\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    }\n\n    def_optimize(AST_Node, function(self, compressor) {\n        return self;\n    });\n\n    AST_Toplevel.DEFMETHOD(\"drop_console\", function() {\n        return this.transform(new TreeTransformer(function(self) {\n            if (self.TYPE == \"Call\") {\n                var exp = self.expression;\n                if (exp instanceof AST_PropAccess) {\n                    var name = exp.expression;\n                    while (name.expression) {\n                        name = name.expression;\n                    }\n                    if (is_undeclared_ref(name) && name.name == \"console\") {\n                        return make_node(AST_Undefined, self);\n                    }\n                }\n            }\n        }));\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node) {\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            } else if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            } else if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        self.transform(tt);\n    });\n\n    function read_property(obj, key) {\n        key = get_value(key);\n        if (key instanceof AST_Node) return;\n        var value;\n        if (obj instanceof AST_Array) {\n            var elements = obj.elements;\n            if (key == \"length\") return make_node_from_constant(elements.length, obj);\n            if (typeof key == \"number\" && key in elements) value = elements[key];\n        } else if (obj instanceof AST_Object) {\n            key = \"\" + key;\n            var props = obj.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (!(prop instanceof AST_ObjectKeyVal)) return;\n                if (!value && props[i].key === key) value = props[i].value;\n            }\n        }\n        return value instanceof AST_SymbolRef && value.fixed_value() || value;\n    }\n\n    function is_modified(compressor, tw, node, value, level, immutable) {\n        var parent = tw.parent(level);\n        var lhs = is_lhs(node, parent);\n        if (lhs) return lhs;\n        if (!immutable\n            && parent instanceof AST_Call\n            && parent.expression === node\n            && !(value instanceof AST_Arrow)\n            && !(value instanceof AST_Class)\n            && !parent.is_expr_pure(compressor)\n            && (!(value instanceof AST_Function)\n                || !(parent instanceof AST_New) && value.contains_this())) {\n            return true;\n        }\n        if (parent instanceof AST_Array) {\n            return is_modified(compressor, tw, parent, parent, level + 1);\n        }\n        if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n            var obj = tw.parent(level + 1);\n            return is_modified(compressor, tw, obj, obj, level + 2);\n        }\n        if (parent instanceof AST_PropAccess && parent.expression === node) {\n            var prop = read_property(value, parent.property);\n            return !immutable && is_modified(compressor, tw, parent, prop, level + 1);\n        }\n    }\n\n    (function(def_reduce_vars) {\n        def_reduce_vars(AST_Node, noop);\n\n        function reset_def(compressor, def) {\n            def.assignments = 0;\n            def.chained = false;\n            def.direct_access = false;\n            def.escaped = false;\n            if (def.scope.pinned()) {\n                def.fixed = false;\n            } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {\n                def.fixed = def.init;\n            } else {\n                def.fixed = false;\n            }\n            def.recursive_refs = 0;\n            def.references = [];\n            def.should_replace = undefined;\n            def.single_use = undefined;\n        }\n\n        function reset_variables(tw, compressor, node) {\n            node.variables.forEach(function(def) {\n                reset_def(compressor, def);\n                if (def.fixed === null) {\n                    def.safe_ids = tw.safe_ids;\n                    mark(tw, def, true);\n                } else if (def.fixed) {\n                    tw.loop_ids[def.id] = tw.in_loop;\n                    mark(tw, def, true);\n                }\n            });\n        }\n\n        function reset_block_variables(compressor, node) {\n            if (node.block_scope) node.block_scope.variables.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n        }\n\n        function push(tw) {\n            tw.safe_ids = Object.create(tw.safe_ids);\n        }\n\n        function pop(tw) {\n            tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);\n        }\n\n        function mark(tw, def, safe) {\n            tw.safe_ids[def.id] = safe;\n        }\n\n        function safe_to_read(tw, def) {\n            if (def.single_use == \"m\") return false;\n            if (tw.safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n            return def.fixed instanceof AST_Defun;\n        }\n\n        function safe_to_assign(tw, def, value) {\n            if (def.fixed === undefined) return true;\n            if (def.fixed === null && def.safe_ids) {\n                def.safe_ids[def.id] = false;\n                delete def.safe_ids;\n                return true;\n            }\n            if (!HOP(tw.safe_ids, def.id)) return false;\n            if (!safe_to_read(tw, def)) return false;\n            if (def.fixed === false) return false;\n            if (def.fixed != null && (!value || def.references.length > def.assignments)) return false;\n            return all(def.orig, function(sym) {\n                return !(sym instanceof AST_SymbolConst\n                    || sym instanceof AST_SymbolDefun\n                    || sym instanceof AST_SymbolLambda);\n            });\n        }\n\n        function ref_once(tw, compressor, def) {\n            return compressor.option(\"unused\")\n                && !def.scope.pinned()\n                && def.references.length - def.recursive_refs == 1\n                && tw.loop_ids[def.id] === tw.in_loop;\n        }\n\n        function is_immutable(value) {\n            if (!value) return false;\n            return value.is_constant()\n                || value instanceof AST_Lambda\n                || value instanceof AST_This;\n        }\n\n        function mark_escaped(tw, d, scope, node, value, level, depth) {\n            var parent = tw.parent(level);\n            if (value) {\n                if (value.is_constant()) return;\n                if (value instanceof AST_ClassExpression) return;\n            }\n            if (parent instanceof AST_Assign && parent.operator == \"=\" && node === parent.right\n                || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New)\n                || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope\n                || parent instanceof AST_VarDef && node === parent.value\n                || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope) {\n                if (depth > 1 && !(value && value.is_constant_expression(scope))) depth = 1;\n                if (!d.escaped || d.escaped > depth) d.escaped = depth;\n                return;\n            } else if (parent instanceof AST_Array\n                || parent instanceof AST_Await\n                || parent instanceof AST_Binary && lazy_op.has(parent.operator)\n                || parent instanceof AST_Conditional && node !== parent.condition\n                || parent instanceof AST_Expansion\n                || parent instanceof AST_Sequence && node === parent.tail_node()) {\n                mark_escaped(tw, d, scope, parent, parent, level + 1, depth);\n            } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n                var obj = tw.parent(level + 1);\n                mark_escaped(tw, d, scope, obj, obj, level + 2, depth);\n            } else if (parent instanceof AST_PropAccess && node === parent.expression) {\n                value = read_property(value, parent.property);\n                mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);\n                if (value) return;\n            }\n            if (level > 0) return;\n            if (parent instanceof AST_Sequence && node !== parent.tail_node()) return;\n            if (parent instanceof AST_SimpleStatement) return;\n            d.direct_access = true;\n        }\n\n        var suppressor = new TreeWalker(function(node) {\n            if (!(node instanceof AST_Symbol)) return;\n            var d = node.definition();\n            if (!d) return;\n            if (node instanceof AST_SymbolRef) d.references.push(node);\n            d.fixed = false;\n        });\n        def_reduce_vars(AST_Accessor, function(tw, descend, compressor) {\n            push(tw);\n            reset_variables(tw, compressor, this);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Arrow, mark_func_expr);\n        def_reduce_vars(AST_Assign, function(tw, descend, compressor) {\n            var node = this;\n            if (node.left instanceof AST_Destructuring) {\n                node.left.walk(suppressor);\n                return;\n            }\n            var sym = node.left;\n            if (!(sym instanceof AST_SymbolRef)) return;\n            var d = sym.definition();\n            var safe = safe_to_assign(tw, d, sym.scope, node.right);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed && node.operator != \"=\") return;\n            var eq = node.operator == \"=\";\n            var value = eq ? node.right : node;\n            if (is_modified(compressor, tw, node, value, 0)) return;\n            d.references.push(sym);\n            if (!eq) d.chained = true;\n            d.fixed = eq ? function() {\n                return node.right;\n            } : function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: fixed instanceof AST_Node ? fixed : fixed(),\n                    right: node.right\n                });\n            };\n            mark(tw, d, false);\n            node.right.walk(tw);\n            mark(tw, d, true);\n            mark_escaped(tw, d, sym.scope, node, value, 0, 1);\n            return true;\n        });\n        def_reduce_vars(AST_Binary, function(tw) {\n            if (!lazy_op.has(this.operator)) return;\n            this.left.walk(tw);\n            push(tw);\n            this.right.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Block, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n        });\n        def_reduce_vars(AST_Case, function(tw) {\n            push(tw);\n            this.expression.walk(tw);\n            pop(tw);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_ClassExpression, function(tw, descend) {\n            this.inlined = false;\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Conditional, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.consequent.walk(tw);\n            pop(tw);\n            push(tw);\n            this.alternative.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Default, function(tw, descend) {\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n\n        function mark_def_node(tw, descend, compressor) {\n            this.inlined = false;\n            var save_ids = tw.safe_ids;\n            tw.safe_ids = Object.create(null);\n            reset_variables(tw, compressor, this);\n            descend();\n            tw.safe_ids = save_ids;\n            return true;\n        }\n\n        def_reduce_vars(AST_DefClass, mark_def_node);\n        def_reduce_vars(AST_Defun, mark_def_node);\n        def_reduce_vars(AST_Do, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            if (has_break_or_continue(this)) {\n                pop(tw);\n                push(tw);\n            }\n            this.condition.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_For, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            if (this.init) this.init.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            if (this.condition) this.condition.walk(tw);\n            this.body.walk(tw);\n            if (this.step) {\n                if (has_break_or_continue(this)) {\n                    pop(tw);\n                    push(tw);\n                }\n                this.step.walk(tw);\n            }\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_ForIn, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            this.init.walk(suppressor);\n            this.object.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n\n        function mark_func_expr(tw, descend, compressor) {\n            var node = this;\n            node.inlined = false;\n            push(tw);\n            reset_variables(tw, compressor, node);\n            if (node.uses_arguments) {\n                descend();\n                pop(tw);\n                return;\n            }\n            var iife;\n            if (!node.name\n                && (iife = tw.parent()) instanceof AST_Call\n                && iife.expression === node) {\n                // Virtually turn IIFE parameters into variable definitions:\n                //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                // So existing transformation rules can work on them.\n                node.argnames.forEach(function(arg, i) {\n                    if (!arg.definition) return;\n                    var d = arg.definition();\n                    // Avoid setting fixed when there's more than one origin for a variable value\n                    if (d.orig.length > 1) return;\n                    if (d.fixed === undefined && (!node.uses_arguments || tw.has_directive(\"use strict\"))) {\n                        d.fixed = function() {\n                            return iife.args[i] || make_node(AST_Undefined, iife);\n                        };\n                        tw.loop_ids[d.id] = tw.in_loop;\n                        mark(tw, d, true);\n                    } else {\n                        d.fixed = false;\n                    }\n                });\n            }\n            descend();\n            pop(tw);\n            return true;\n        }\n\n        def_reduce_vars(AST_Function, mark_func_expr);\n        def_reduce_vars(AST_If, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            if (this.alternative) {\n                push(tw);\n                this.alternative.walk(tw);\n                pop(tw);\n            }\n            return true;\n        });\n        def_reduce_vars(AST_LabeledStatement, function(tw) {\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_SymbolCatch, function() {\n            this.definition().fixed = false;\n        });\n        def_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {\n            var d = this.definition();\n            d.references.push(this);\n            if (d.references.length == 1\n                && !d.fixed\n                && d.orig[0] instanceof AST_SymbolDefun) {\n                tw.loop_ids[d.id] = tw.in_loop;\n            }\n            var value;\n            if (d.fixed === undefined || !safe_to_read(tw, d)) {\n                d.fixed = false;\n            } else if (d.fixed) {\n                value = this.fixed_value();\n                if (value instanceof AST_Lambda && recursive_ref(tw, d)) {\n                    d.recursive_refs++;\n                } else if (value && !compressor.exposed(d) && ref_once(tw, compressor, d)) {\n                    d.single_use = value instanceof AST_Lambda && !value.pinned()\n                        || value instanceof AST_Class\n                        || d.scope === this.scope && value.is_constant_expression();\n                } else {\n                    d.single_use = false;\n                }\n                if (is_modified(compressor, tw, this, value, 0, is_immutable(value))) {\n                    if (d.single_use) {\n                        d.single_use = \"m\";\n                    } else {\n                        d.fixed = false;\n                    }\n                }\n            }\n            mark_escaped(tw, d, this.scope, this, value, 0, 1);\n        });\n        def_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {\n            this.globals.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n            reset_variables(tw, compressor, this);\n        });\n        def_reduce_vars(AST_Try, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            if (this.bcatch) {\n                push(tw);\n                this.bcatch.walk(tw);\n                pop(tw);\n            }\n            if (this.bfinally) this.bfinally.walk(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Unary, function(tw, descend) {\n            var node = this;\n            if (node.operator != \"++\" && node.operator != \"--\") return;\n            var exp = node.expression;\n            if (!(exp instanceof AST_SymbolRef)) return;\n            var d = exp.definition();\n            var safe = safe_to_assign(tw, d, true);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed) return;\n            d.references.push(exp);\n            d.chained = true;\n            d.fixed = function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: make_node(AST_UnaryPrefix, node, {\n                        operator: \"+\",\n                        expression: fixed instanceof AST_Node ? fixed : fixed()\n                    }),\n                    right: make_node(AST_Number, node, {\n                        value: 1\n                    })\n                });\n            };\n            mark(tw, d, true);\n            return true;\n        });\n        def_reduce_vars(AST_VarDef, function(tw, descend) {\n            var node = this;\n            if (node.name instanceof AST_Destructuring) {\n                node.name.walk(suppressor);\n                return;\n            }\n            var d = node.name.definition();\n            if (node.value) {\n                if (safe_to_assign(tw, d, node.value)) {\n                    d.fixed = function() {\n                        return node.value;\n                    };\n                    tw.loop_ids[d.id] = tw.in_loop;\n                    mark(tw, d, false);\n                    descend();\n                    mark(tw, d, true);\n                    return true;\n                } else {\n                    d.fixed = false;\n                }\n            }\n        });\n        def_reduce_vars(AST_While, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            descend();\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"reduce_vars\", func);\n    });\n\n    AST_Toplevel.DEFMETHOD(\"reset_opt_flags\", function(compressor) {\n        var self = this;\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var tw = new TreeWalker(function(node, descend) {\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (compressor.top_retain) {\n                    if (tw.parent() === self)\n                        node._top = true;\n                    else\n                        delete node._top;\n                }\n                return node.reduce_vars(tw, descend, compressor);\n            }\n        });\n        // Stack of look-up tables to keep track of whether a `SymbolDef` has been\n        // properly assigned before use:\n        // - `push()` & `pop()` when visiting conditional branches\n        // - backup & restore via `save_ids` when visiting out-of-order sections\n        tw.safe_ids = Object.create(null);\n        tw.in_loop = null;\n        tw.loop_ids = Object.create(null);\n        self.walk(tw);\n    });\n\n    AST_Symbol.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"is_immutable\", function() {\n        var orig = this.definition().orig;\n        return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;\n    });\n\n    function is_func_expr(node) {\n        return node instanceof AST_Arrow || node instanceof AST_Function;\n    }\n\n    function is_lhs_read_only(lhs) {\n        if (lhs instanceof AST_This) return true;\n        if (lhs instanceof AST_SymbolRef) return lhs.definition().orig[0] instanceof AST_SymbolLambda;\n        if (lhs instanceof AST_PropAccess) {\n            lhs = lhs.expression;\n            if (lhs instanceof AST_SymbolRef) {\n                if (lhs.is_immutable()) return false;\n                lhs = lhs.fixed_value();\n            }\n            if (!lhs) return true;\n            if (lhs instanceof AST_RegExp) return false;\n            if (lhs instanceof AST_Constant) return true;\n            return is_lhs_read_only(lhs);\n        }\n        return false;\n    }\n\n    function is_ref_of(ref, type) {\n        if (!(ref instanceof AST_SymbolRef)) return false;\n        var orig = ref.definition().orig;\n        for (var i = orig.length; --i >= 0;) {\n            if (orig[i] instanceof type) return true;\n        }\n    }\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch && scope.argname) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    }\n\n    function make_sequence(orig, expressions) {\n        if (expressions.length == 1) return expressions[0];\n        return make_node(AST_Sequence, orig, {\n            expressions: expressions.reduce(merge_sequence, [])\n        });\n    }\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    }\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_sequence(orig, [ make_node(AST_Number, orig, { value: 0 }), val ]);\n        }\n        return val;\n    }\n\n    function merge_sequence(array, node) {\n        if (node instanceof AST_Sequence) {\n            array.push.apply(array, node.expressions);\n        } else {\n            array.push(node);\n        }\n        return array;\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    }\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    }\n\n    function can_be_evicted_from_block(node) {\n        return !(\n            node instanceof AST_DefClass ||\n            node instanceof AST_Defun ||\n            node instanceof AST_Let ||\n            node instanceof AST_Const ||\n            node instanceof AST_Export ||\n            node instanceof AST_Import\n        );\n    }\n\n    function loop_body(x) {\n        if (x instanceof AST_IterationStatement) {\n            return x.body instanceof AST_BlockStatement ? x.body : x;\n        }\n        return x;\n    }\n\n    function is_iife_call(node) {\n        if (node.TYPE != \"Call\") return false;\n        return node.expression instanceof AST_Function || is_iife_call(node.expression);\n    }\n\n    function is_undeclared_ref(node) {\n        return node instanceof AST_SymbolRef && node.definition().undeclared;\n    }\n\n    var global_names = makePredicate(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");\n    AST_SymbolRef.DEFMETHOD(\"is_declared\", function(compressor) {\n        return !this.definition().undeclared\n            || compressor.option(\"unsafe\") && global_names.has(this.name);\n    });\n\n    var identifier_atom = makePredicate(\"Infinity NaN undefined\");\n    function is_identifier_atom(node) {\n        return node instanceof AST_Infinity\n            || node instanceof AST_NaN\n            || node instanceof AST_Undefined;\n    }\n\n    function tighten_body(statements, compressor) {\n        var in_loop, in_try;\n        var scope = compressor.find_parent(AST_Scope).get_defun_scope();\n        find_loop_scope_try();\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                sequencesize(statements, compressor);\n                sequencesize_2(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                join_consecutive_vars(statements);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                collapse(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        function find_loop_scope_try() {\n            var node = compressor.self(), level = 0;\n            do {\n                if (node instanceof AST_Catch || node instanceof AST_Finally) {\n                    level++;\n                } else if (node instanceof AST_IterationStatement) {\n                    in_loop = true;\n                } else if (node instanceof AST_Scope) {\n                    scope = node;\n                    break;\n                } else if (node instanceof AST_Try) {\n                    in_try = true;\n                }\n            } while (node = compressor.parent(level++));\n        }\n\n        // Search from right to left for assignment-like expressions:\n        // - `var a = x;`\n        // - `a = x;`\n        // - `++a`\n        // For each candidate, scan from left to right for first usage, then try\n        // to fold assignment into the site for compression.\n        // Will not attempt to collapse assignments into or past code blocks\n        // which are not sequentially executed, e.g. loops and conditionals.\n        function collapse(statements, compressor) {\n            if (scope.pinned()) return statements;\n            var args;\n            var candidates = [];\n            var stat_index = statements.length;\n            var scanner = new TreeTransformer(function(node, descend) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return handle_custom_scan_order(node);\n                    hit = true;\n                    stop_after = find_stop(node, 0);\n                    if (stop_after === node) abort = true;\n                    return node;\n                }\n                // Stop immediately if these node types are encountered\n                var parent = scanner.parent();\n                if (node instanceof AST_Assign && node.operator != \"=\" && lhs.equivalent_to(node.left)\n                    || node instanceof AST_Await\n                    || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression)\n                    || node instanceof AST_Debugger\n                    || node instanceof AST_Destructuring\n                    || node instanceof AST_Expansion\n                       && node.expression instanceof AST_Symbol\n                       && node.expression.definition().references.length > 1\n                    || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                    || node instanceof AST_LoopControl\n                    || node instanceof AST_Try\n                    || node instanceof AST_With\n                    || node instanceof AST_Yield\n                    || parent instanceof AST_For && node !== parent.init\n                    || !replace_all\n                        && (node instanceof AST_SymbolRef && !node.is_declared(compressor))) {\n                    abort = true;\n                    return node;\n                }\n                // Stop only if candidate is found within conditional branches\n                if (!stop_if_hit && (!lhs_local || !replace_all)\n                    && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node\n                        || parent instanceof AST_Conditional && parent.condition !== node\n                        || parent instanceof AST_If && parent.condition !== node)) {\n                    stop_if_hit = parent;\n                }\n                // Replace variable with assignment when found\n                if (can_replace\n                    && !(node instanceof AST_SymbolDeclaration)\n                    && lhs.equivalent_to(node)) {\n                    if (stop_if_hit) {\n                        abort = true;\n                        return node;\n                    }\n                    if (is_lhs(node, parent)) {\n                        if (value_def) replaced++;\n                        return node;\n                    }\n                    CHANGED = abort = true;\n                    replaced++;\n                    compressor.info(\"Collapsing {name} [{file}:{line},{col}]\", {\n                        name: node.print_to_string(),\n                        file: node.start.file,\n                        line: node.start.line,\n                        col: node.start.col\n                    });\n                    if (candidate instanceof AST_UnaryPostfix) {\n                        return make_node(AST_UnaryPrefix, candidate, candidate);\n                    }\n                    if (candidate instanceof AST_VarDef) {\n                        if (value_def) {\n                            abort = false;\n                            return node;\n                        }\n                        var def = candidate.name.definition();\n                        var value = candidate.value;\n                        if (def.references.length - def.replaced == 1 && !compressor.exposed(def)) {\n                            def.replaced++;\n                            if (funarg && is_identifier_atom(value)) {\n                                return value.transform(compressor);\n                            } else {\n                                return maintain_this_binding(parent, node, value);\n                            }\n                        }\n                        return make_node(AST_Assign, candidate, {\n                            operator: \"=\",\n                            left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                            right: value\n                        });\n                    }\n                    candidate.write_only = false;\n                    return candidate;\n                }\n                // These node types have child nodes that execute sequentially,\n                // but are otherwise not safe to scan into or beyond them.\n                var sym;\n                if (node instanceof AST_Call\n                    || node instanceof AST_Exit\n                        && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs))\n                    || node instanceof AST_PropAccess\n                        && (side_effects || node.expression.may_throw_on_access(compressor))\n                    || node instanceof AST_SymbolRef\n                        && (lvalues.get(node.name) || side_effects && may_modify(node))\n                    || node instanceof AST_VarDef && node.value\n                        && (lvalues.has(node.name.name) || side_effects && may_modify(node.name))\n                    || (sym = is_lhs(node.left, node))\n                        && (sym instanceof AST_PropAccess || lvalues.has(sym.name))\n                    || may_throw\n                        && (in_try ? node.has_side_effects(compressor) : side_effects_external(node))) {\n                    stop_after = node;\n                    if (node instanceof AST_Scope) abort = true;\n                }\n                return handle_custom_scan_order(node);\n            }, function(node) {\n                if (abort) return;\n                if (stop_after === node) abort = true;\n                if (stop_if_hit === node) stop_if_hit = null;\n            });\n            var multi_replacer = new TreeTransformer(function(node) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return;\n                    hit = true;\n                    return node;\n                }\n                // Replace variable when found\n                if (node instanceof AST_SymbolRef\n                    && node.name == def.name) {\n                    if (!--replaced) abort = true;\n                    if (is_lhs(node, multi_replacer.parent())) return node;\n                    def.replaced++;\n                    value_def.replaced--;\n                    return candidate.value;\n                }\n                // Skip (non-executed) functions and (leading) default case in switch statements\n                if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n            });\n            while (--stat_index >= 0) {\n                // Treat parameters as collapsible in IIFE, i.e.\n                //   function(a, b){ ... }(x());\n                // would be translated into equivalent assignments:\n                //   var a = x(), b = undefined;\n                if (stat_index == 0 && compressor.option(\"unused\")) extract_args();\n                // Find collapsible assignments\n                var hit_stack = [];\n                extract_candidates(statements[stat_index]);\n                while (candidates.length > 0) {\n                    hit_stack = candidates.pop();\n                    var hit_index = 0;\n                    var candidate = hit_stack[hit_stack.length - 1];\n                    var value_def = null;\n                    var stop_after = null;\n                    var stop_if_hit = null;\n                    var lhs = get_lhs(candidate);\n                    if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor)) continue;\n                    // Locate symbols which may execute code outside of scanning range\n                    var lvalues = get_lvalues(candidate);\n                    var lhs_local = is_lhs_local(lhs);\n                    if (lhs instanceof AST_SymbolRef) lvalues.set(lhs.name, false);\n                    var side_effects = value_has_side_effects(candidate);\n                    var replace_all = replace_all_symbols();\n                    var may_throw = candidate.may_throw(compressor);\n                    var funarg = candidate.name instanceof AST_SymbolFunarg;\n                    var hit = funarg;\n                    var abort = false, replaced = 0, can_replace = !args || !hit;\n                    if (!can_replace) {\n                        for (var j = compressor.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args.length; j++) {\n                            args[j].transform(scanner);\n                        }\n                        can_replace = true;\n                    }\n                    for (var i = stat_index; !abort && i < statements.length; i++) {\n                        statements[i].transform(scanner);\n                    }\n                    if (value_def) {\n                        var def = candidate.name.definition();\n                        if (abort && def.references.length - def.replaced > replaced) replaced = false;\n                        else {\n                            abort = false;\n                            hit_index = 0;\n                            hit = funarg;\n                            for (var i = stat_index; !abort && i < statements.length; i++) {\n                                statements[i].transform(multi_replacer);\n                            }\n                            value_def.single_use = false;\n                        }\n                    }\n                    if (replaced && !remove_candidate(candidate)) statements.splice(stat_index, 1);\n                }\n            }\n\n            function handle_custom_scan_order(node) {\n                // Skip (non-executed) functions\n                if (node instanceof AST_Scope) return node;\n                // Scan case expressions first in a switch statement\n                if (node instanceof AST_Switch) {\n                    node.expression = node.expression.transform(scanner);\n                    for (var i = 0, len = node.body.length; !abort && i < len; i++) {\n                        var branch = node.body[i];\n                        if (branch instanceof AST_Case) {\n                            if (!hit) {\n                                if (branch !== hit_stack[hit_index]) continue;\n                                hit_index++;\n                            }\n                            branch.expression = branch.expression.transform(scanner);\n                            if (!replace_all) break;\n                        }\n                    }\n                    abort = true;\n                    return node;\n                }\n            }\n\n            function has_overlapping_symbol(fn, arg, fn_strict) {\n                var found = false, scan_this = !(fn instanceof AST_Arrow);\n                arg.walk(new TreeWalker(function(node, descend) {\n                    if (found) return true;\n                    if (node instanceof AST_SymbolRef && fn.variables.has(node.name)) {\n                        var s = node.definition().scope;\n                        if (s !== scope) while (s = s.parent_scope) {\n                            if (s === scope) return true;\n                        }\n                        return found = true;\n                    }\n                    if ((fn_strict || scan_this) && node instanceof AST_This) {\n                        return found = true;\n                    }\n                    if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                        var prev = scan_this;\n                        scan_this = false;\n                        descend();\n                        scan_this = prev;\n                        return true;\n                    }\n                }));\n                return found;\n            }\n\n            function extract_args() {\n                var iife, fn = compressor.self();\n                if (is_func_expr(fn)\n                    && !fn.name\n                    && !fn.uses_arguments\n                    && !fn.pinned()\n                    && (iife = compressor.parent()) instanceof AST_Call\n                    && iife.expression === fn\n                    && all(iife.args, function(arg) {\n                        return !(arg instanceof AST_Expansion);\n                    })) {\n                    var fn_strict = compressor.has_directive(\"use strict\");\n                    if (fn_strict && !member(fn_strict, fn.body)) fn_strict = false;\n                    var len = fn.argnames.length;\n                    args = iife.args.slice(len);\n                    var names = new Set();\n                    for (var i = len; --i >= 0;) {\n                        var sym = fn.argnames[i];\n                        var arg = iife.args[i];\n                        args.unshift(make_node(AST_VarDef, sym, {\n                            name: sym,\n                            value: arg\n                        }));\n                        if (names.has(sym.name)) continue;\n                        names.add(sym.name);\n                        if (sym instanceof AST_Expansion) {\n                            var elements = iife.args.slice(i);\n                            if (all(elements, function(arg) {\n                                return !has_overlapping_symbol(fn, arg, fn_strict);\n                            })) {\n                                candidates.unshift([ make_node(AST_VarDef, sym, {\n                                    name: sym.expression,\n                                    value: make_node(AST_Array, iife, {\n                                        elements: elements\n                                    })\n                                }) ]);\n                            }\n                        } else {\n                            if (!arg) {\n                                arg = make_node(AST_Undefined, sym).transform(compressor);\n                            } else if (arg instanceof AST_Lambda && arg.pinned()\n                                || has_overlapping_symbol(fn, arg, fn_strict)) {\n                                arg = null;\n                            }\n                            if (arg) candidates.unshift([ make_node(AST_VarDef, sym, {\n                                name: sym,\n                                value: arg\n                            }) ]);\n                        }\n                    }\n                }\n            }\n\n            function extract_candidates(expr) {\n                hit_stack.push(expr);\n                if (expr instanceof AST_Assign) {\n                    if (!expr.left.has_side_effects(compressor)) {\n                        candidates.push(hit_stack.slice());\n                    }\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Binary) {\n                    extract_candidates(expr.left);\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Call) {\n                    extract_candidates(expr.expression);\n                    expr.args.forEach(extract_candidates);\n                } else if (expr instanceof AST_Case) {\n                    extract_candidates(expr.expression);\n                } else if (expr instanceof AST_Conditional) {\n                    extract_candidates(expr.condition);\n                    extract_candidates(expr.consequent);\n                    extract_candidates(expr.alternative);\n                } else if (expr instanceof AST_Definitions\n                    && (compressor.option(\"unused\") || !(expr instanceof AST_Const))) {\n                    var len = expr.definitions.length;\n                    // limit number of trailing variable definitions for consideration\n                    var i = len - 200;\n                    if (i < 0) i = 0;\n                    for (; i < len; i++) {\n                        extract_candidates(expr.definitions[i]);\n                    }\n                } else if (expr instanceof AST_DWLoop) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_Exit) {\n                    if (expr.value) extract_candidates(expr.value);\n                } else if (expr instanceof AST_For) {\n                    if (expr.init) extract_candidates(expr.init);\n                    if (expr.condition) extract_candidates(expr.condition);\n                    if (expr.step) extract_candidates(expr.step);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_ForIn) {\n                    extract_candidates(expr.object);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_If) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                    if (expr.alternative && !(expr.alternative instanceof AST_Block)) {\n                        extract_candidates(expr.alternative);\n                    }\n                } else if (expr instanceof AST_Sequence) {\n                    expr.expressions.forEach(extract_candidates);\n                } else if (expr instanceof AST_SimpleStatement) {\n                    extract_candidates(expr.body);\n                } else if (expr instanceof AST_Switch) {\n                    extract_candidates(expr.expression);\n                    expr.body.forEach(extract_candidates);\n                } else if (expr instanceof AST_Unary) {\n                    if (expr.operator == \"++\" || expr.operator == \"--\") {\n                        candidates.push(hit_stack.slice());\n                    }\n                } else if (expr instanceof AST_VarDef) {\n                    if (expr.value) {\n                        candidates.push(hit_stack.slice());\n                        extract_candidates(expr.value);\n                    }\n                }\n                hit_stack.pop();\n            }\n\n            function find_stop(node, level, write_only) {\n                var parent = scanner.parent(level);\n                if (parent instanceof AST_Assign) {\n                    if (write_only\n                        && !(parent.left instanceof AST_PropAccess\n                            || lvalues.has(parent.left.name))) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Binary) {\n                    if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Call) return node;\n                if (parent instanceof AST_Case) return node;\n                if (parent instanceof AST_Conditional) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Definitions) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Exit) {\n                    return write_only ? find_stop(parent, level + 1, write_only) : node;\n                }\n                if (parent instanceof AST_If) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_IterationStatement) return node;\n                if (parent instanceof AST_Sequence) {\n                    return find_stop(parent, level + 1, parent.tail_node() !== node);\n                }\n                if (parent instanceof AST_SimpleStatement) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Switch) return node;\n                if (parent instanceof AST_VarDef) return node;\n                return null;\n            }\n\n            function mangleable_var(var_def) {\n                var value = var_def.value;\n                if (!(value instanceof AST_SymbolRef)) return;\n                if (value.name == \"arguments\") return;\n                var def = value.definition();\n                if (def.undeclared) return;\n                return value_def = def;\n            }\n\n            function get_lhs(expr) {\n                if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {\n                    var def = expr.name.definition();\n                    if (!member(expr.name, def.orig)) return;\n                    var referenced = def.references.length - def.replaced;\n                    if (!referenced) return;\n                    var declared = def.orig.length - def.eliminated;\n                    if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg)\n                        || (referenced > 1 ? mangleable_var(expr) : !compressor.exposed(def))) {\n                        return make_node(AST_SymbolRef, expr.name, expr.name);\n                    }\n                } else {\n                    var lhs = expr[expr instanceof AST_Assign ? \"left\" : \"expression\"];\n                    return !is_ref_of(lhs, AST_SymbolConst) && lhs;\n                }\n            }\n\n            function get_rvalue(expr) {\n                return expr[expr instanceof AST_Assign ? \"right\" : \"value\"];\n            }\n\n            function get_lvalues(expr) {\n                var lvalues = new Map();\n                if (expr instanceof AST_Unary) return lvalues;\n                var tw = new TreeWalker(function(node, descend) {\n                    var sym = node;\n                    while (sym instanceof AST_PropAccess) sym = sym.expression;\n                    if (sym instanceof AST_SymbolRef || sym instanceof AST_This) {\n                        lvalues.set(sym.name, lvalues.get(sym.name) || is_modified(compressor, tw, node, node, 0));\n                    }\n                });\n                get_rvalue(expr).walk(tw);\n                return lvalues;\n            }\n\n            function remove_candidate(expr) {\n                if (expr.name instanceof AST_SymbolFunarg) {\n                    var iife = compressor.parent(), argnames = compressor.self().argnames;\n                    var index = argnames.indexOf(expr.name);\n                    if (index < 0) {\n                        iife.args.length = Math.min(iife.args.length, argnames.length - 1);\n                    } else {\n                        var args = iife.args;\n                        if (args[index]) args[index] = make_node(AST_Number, args[index], {\n                            value: 0\n                        });\n                    }\n                    return true;\n                }\n                var found = false;\n                return statements[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {\n                    if (found) return node;\n                    if (node === expr || node.body === expr) {\n                        found = true;\n                        if (node instanceof AST_VarDef) {\n                            node.value = null;\n                            return node;\n                        }\n                        return in_list ? MAP.skip : null;\n                    }\n                }, function(node) {\n                    if (node instanceof AST_Sequence) switch (node.expressions.length) {\n                      case 0: return null;\n                      case 1: return node.expressions[0];\n                    }\n                }));\n            }\n\n            function is_lhs_local(lhs) {\n                while (lhs instanceof AST_PropAccess) lhs = lhs.expression;\n                return lhs instanceof AST_SymbolRef\n                    && lhs.definition().scope === scope\n                    && !(in_loop\n                        && (lvalues.has(lhs.name)\n                            || candidate instanceof AST_Unary\n                            || candidate instanceof AST_Assign && candidate.operator != \"=\"));\n            }\n\n            function value_has_side_effects(expr) {\n                if (expr instanceof AST_Unary) return false;\n                return get_rvalue(expr).has_side_effects(compressor);\n            }\n\n            function replace_all_symbols() {\n                if (side_effects) return false;\n                if (value_def) return true;\n                if (lhs instanceof AST_SymbolRef) {\n                    var def = lhs.definition();\n                    if (def.references.length - def.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function may_modify(sym) {\n                if (!sym.definition) return true; // AST_Destructuring\n                var def = sym.definition();\n                if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun) return false;\n                if (def.scope.get_defun_scope() !== scope) return true;\n                return !all(def.references, function(ref) {\n                    var s = ref.scope.get_defun_scope();\n                    // \"block\" scope within AST_Catch\n                    if (s.TYPE == \"Scope\") s = s.parent_scope;\n                    return s === scope;\n                });\n            }\n\n            function side_effects_external(node, lhs) {\n                if (node instanceof AST_Assign) return side_effects_external(node.left, true);\n                if (node instanceof AST_Unary) return side_effects_external(node.expression, true);\n                if (node instanceof AST_VarDef) return node.value && side_effects_external(node.value);\n                if (lhs) {\n                    if (node instanceof AST_Dot) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_Sub) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_SymbolRef) return node.definition().scope !== scope;\n                }\n                return false;\n            }\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            for (var i = 0; i < statements.length;) {\n                var stat = statements[i];\n                if (stat instanceof AST_BlockStatement && all(stat.body, can_be_evicted_from_block)) {\n                    CHANGED = true;\n                    eliminate_spurious_blocks(stat.body);\n                    [].splice.apply(statements, [i, 1].concat(stat.body));\n                    i += stat.body.length;\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        i++;\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                    }\n                } else i++;\n            }\n        }\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                var j = next_index(i);\n                var next = statements[j];\n\n                if (in_lambda && !next && stat instanceof AST_Return) {\n                    if (!stat.value) {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                        continue;\n                    }\n                    if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == \"void\") {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat, {\n                            body: stat.value.expression\n                        });\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If) {\n                    var ab = aborts(stat.body);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        var body = as_statement_array_with_return(stat.body, ab);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(extract_functions())\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(extract_functions())\n                        });\n                        var body = as_statement_array_with_return(stat.alternative, ab);\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                    var value = stat.body.value;\n                    //---\n                    // pretty silly case, but:\n                    // if (foo()) return; return; ==> foo(); return;\n                    if (!value && !stat.alternative\n                        && (in_lambda && !next || next instanceof AST_Return && !next.value)) {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat.condition, {\n                            body: stat.condition\n                        });\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; return y; ==> return foo() ? x : y;\n                    if (value && !stat.alternative && next instanceof AST_Return && next.value) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next;\n                        statements.splice(i, 1, stat.transform(compressor));\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                    if (value && !stat.alternative\n                        && (!next && in_lambda && multiple_if_returns\n                            || next instanceof AST_Return)) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next || make_node(AST_Return, stat, {\n                            value: null\n                        });\n                        statements.splice(i, 1, stat.transform(compressor));\n                        if (next) statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                    //\n                    // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                    // however, with sequences on this helps producing slightly better output for\n                    // the example code.\n                    var prev = statements[prev_index(i)];\n                    if (compressor.option(\"sequences\") && in_lambda && !stat.alternative\n                        && prev instanceof AST_If && prev.body instanceof AST_Return\n                        && next_index(j) == statements.length && next instanceof AST_SimpleStatement) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = make_node(AST_BlockStatement, next, {\n                            body: [\n                                next,\n                                make_node(AST_Return, next, {\n                                    value: null\n                                })\n                            ]\n                        });\n                        statements.splice(i, 1, stat.transform(compressor));\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                }\n            }\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n\n            function is_return_void(value) {\n                return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n            }\n\n            function can_merge_flow(ab) {\n                if (!ab) return false;\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (stat instanceof AST_Const || stat instanceof AST_Let) return false;\n                }\n                var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                    || ab instanceof AST_Continue && self === loop_body(lct)\n                    || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n            }\n\n            function extract_functions() {\n                var tail = statements.slice(i + 1);\n                statements.length = i + 1;\n                return tail.filter(function(stat) {\n                    if (stat instanceof AST_Defun) {\n                        statements.push(stat);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n\n            function as_statement_array_with_return(node, ab) {\n                var body = as_statement_array(node).slice(0, -1);\n                if (ab.value) {\n                    body.push(make_node(AST_SimpleStatement, ab.value, {\n                        body: ab.value.expression\n                    }));\n                }\n                return body;\n            }\n\n            function next_index(i) {\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n\n            function prev_index(i) {\n                for (var j = i; --j >= 0;) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n        }\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit;\n            var self = compressor.self();\n            for (var i = 0, n = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_LoopControl) {\n                    var lct = compressor.loopcontrol_target(stat);\n                    if (stat instanceof AST_Break\n                            && !(lct instanceof AST_IterationStatement)\n                            && loop_body(lct) === self\n                        || stat instanceof AST_Continue\n                            && loop_body(lct) === self) {\n                        if (stat.label) {\n                            remove(stat.label.thedef.references, stat);\n                        }\n                    } else {\n                        statements[n++] = stat;\n                    }\n                } else {\n                    statements[n++] = stat;\n                }\n                if (aborts(stat)) {\n                    has_quit = statements.slice(i + 1);\n                    break;\n                }\n            }\n            statements.length = n;\n            CHANGED = n != len;\n            if (has_quit) has_quit.forEach(function(stat) {\n                extract_declarations_from_unreachable_code(compressor, stat, statements);\n            });\n        }\n\n        function declarations_only(node) {\n            return all(node.definitions, function(var_def) {\n                return !var_def.value;\n            });\n        }\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return;\n            var seq = [], n = 0;\n            function push_seq() {\n                if (!seq.length) return;\n                var body = make_sequence(seq[0], seq);\n                statements[n++] = make_node(AST_SimpleStatement, body, { body: body });\n                seq = [];\n            }\n            for (var i = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seq.length >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) merge_sequence(seq, body);\n                } else if (stat instanceof AST_Definitions && declarations_only(stat)\n                    || stat instanceof AST_Defun) {\n                    statements[n++] = stat;\n                } else {\n                    push_seq();\n                    statements[n++] = stat;\n                }\n            }\n            push_seq();\n            statements.length = n;\n            if (n != len) CHANGED = true;\n        }\n\n        function to_simple_statement(block, decls) {\n            if (!(block instanceof AST_BlockStatement)) return block;\n            var stat = null;\n            for (var i = 0, len = block.body.length; i < len; i++) {\n                var line = block.body[i];\n                if (line instanceof AST_Var && declarations_only(line)) {\n                    decls.push(line);\n                } else if (stat) {\n                    return false;\n                } else {\n                    stat = line;\n                }\n            }\n            return stat;\n        }\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                n--;\n                CHANGED = true;\n                var left = prev.body;\n                return make_sequence(left, [ left, right ]).transform(compressor);\n            }\n            var n = 0, prev;\n            for (var i = 0; i < statements.length; i++) {\n                var stat = statements[i];\n                if (prev) {\n                    if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor));\n                    } else if (stat instanceof AST_For) {\n                        if (!(stat.init instanceof AST_Definitions)) {\n                            var abort = false;\n                            prev.body.walk(new TreeWalker(function(node) {\n                                if (abort || node instanceof AST_Scope) return true;\n                                if (node instanceof AST_Binary && node.operator == \"in\") {\n                                    abort = true;\n                                    return true;\n                                }\n                            }));\n                            if (!abort) {\n                                if (stat.init) stat.init = cons_seq(stat.init);\n                                else {\n                                    stat.init = prev.body;\n                                    n--;\n                                    CHANGED = true;\n                                }\n                            }\n                        }\n                    } else if (stat instanceof AST_ForIn) {\n                        if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {\n                            stat.object = cons_seq(stat.object);\n                        }\n                    } else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    } else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    } else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                if (compressor.option(\"conditionals\") && stat instanceof AST_If) {\n                    var decls = [];\n                    var body = to_simple_statement(stat.body, decls);\n                    var alt = to_simple_statement(stat.alternative, decls);\n                    if (body !== false && alt !== false && decls.length > 0) {\n                        var len = decls.length;\n                        decls.push(make_node(AST_If, stat, {\n                            condition: stat.condition,\n                            body: body || make_node(AST_EmptyStatement, stat.body),\n                            alternative: alt\n                        }));\n                        decls.unshift(n, 1);\n                        [].splice.apply(statements, decls);\n                        i += len;\n                        n += len + 1;\n                        prev = null;\n                        CHANGED = true;\n                        continue;\n                    }\n                }\n                statements[n++] = stat;\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            }\n            statements.length = n;\n        }\n\n        function join_object_assignments(defn, body) {\n            if (!(defn instanceof AST_Definitions)) return;\n            var def = defn.definitions[defn.definitions.length - 1];\n            if (!(def.value instanceof AST_Object)) return;\n            var exprs;\n            if (body instanceof AST_Assign) {\n                exprs = [ body ];\n            } else if (body instanceof AST_Sequence) {\n                exprs = body.expressions.slice();\n            }\n            if (!exprs) return;\n            var trimmed = false;\n            do {\n                var node = exprs[0];\n                if (!(node instanceof AST_Assign)) break;\n                if (node.operator != \"=\") break;\n                if (!(node.left instanceof AST_PropAccess)) break;\n                var sym = node.left.expression;\n                if (!(sym instanceof AST_SymbolRef)) break;\n                if (def.name.name != sym.name) break;\n                if (!node.right.is_constant_expression(scope)) break;\n                var prop = node.left.property;\n                if (prop instanceof AST_Node) {\n                    prop = prop.evaluate(compressor);\n                }\n                if (prop instanceof AST_Node) break;\n                prop = \"\" + prop;\n                var diff = compressor.option(\"ecma\") < 6\n                    && compressor.has_directive(\"use strict\") ? function(node) {\n                    return node.key != prop && (node.key && node.key.name != prop);\n                } : function(node) {\n                    return node.key && node.key.name != prop;\n                };\n                if (!all(def.value.properties, diff)) break;\n                var p = def.value.properties.filter(function (p) { return p.key === prop; })[0];\n                if (!p) {\n                    def.value.properties.push(make_node(AST_ObjectKeyVal, node, {\n                        key: prop,\n                        value: node.right\n                    }));\n                } else {\n                    p.value = new AST_Sequence({\n                        start: p.start,\n                        expressions: [p.value.clone(), node.right.clone()],\n                        end: p.end\n                    });\n                }\n                exprs.shift();\n                trimmed = true;\n            } while (exprs.length);\n            return trimmed && exprs;\n        }\n\n        function join_consecutive_vars(statements) {\n            var defs;\n            for (var i = 0, j = -1, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                var prev = statements[j];\n                if (stat instanceof AST_Definitions) {\n                    if (prev && prev.TYPE == stat.TYPE) {\n                        prev.definitions = prev.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {\n                        defs.definitions = defs.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                        defs = stat;\n                    }\n                } else if (stat instanceof AST_Exit) {\n                    stat.value = extract_object_assignments(stat.value);\n                } else if (stat instanceof AST_For) {\n                    var exprs = join_object_assignments(prev, stat.init);\n                    if (exprs) {\n                        CHANGED = true;\n                        stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;\n                        statements[++j] = stat;\n                    } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                        if (stat.init) {\n                            prev.definitions = prev.definitions.concat(stat.init.definitions);\n                        }\n                        stat.init = prev;\n                        statements[j] = stat;\n                        CHANGED = true;\n                    } else if (defs && stat.init && defs.TYPE == stat.init.TYPE && declarations_only(stat.init)) {\n                        defs.definitions = defs.definitions.concat(stat.init.definitions);\n                        stat.init = null;\n                        statements[++j] = stat;\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                    }\n                } else if (stat instanceof AST_ForIn) {\n                    stat.object = extract_object_assignments(stat.object);\n                } else if (stat instanceof AST_If) {\n                    stat.condition = extract_object_assignments(stat.condition);\n                } else if (stat instanceof AST_SimpleStatement) {\n                    var exprs = join_object_assignments(prev, stat.body);\n                    if (exprs) {\n                        CHANGED = true;\n                        if (!exprs.length) continue;\n                        stat.body = make_sequence(stat.body, exprs);\n                    }\n                    statements[++j] = stat;\n                } else if (stat instanceof AST_Switch) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else if (stat instanceof AST_With) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else {\n                    statements[++j] = stat;\n                }\n            }\n            statements.length = j + 1;\n\n            function extract_object_assignments(value) {\n                statements[++j] = stat;\n                var exprs = join_object_assignments(prev, value);\n                if (exprs) {\n                    CHANGED = true;\n                    if (exprs.length) {\n                        return make_sequence(value, exprs);\n                    } else if (value instanceof AST_Sequence) {\n                        return value.tail_node().left;\n                    } else {\n                        return value.left;\n                    }\n                }\n                return value;\n            }\n        }\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node) {\n            if (node instanceof AST_Var) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun && (node === stat || !compressor.has_directive(\"use strict\"))) {\n                target.push(node === stat ? node : make_node(AST_Var, node, {\n                    definitions: [\n                        make_node(AST_VarDef, node, {\n                            name: make_node(AST_SymbolVar, node.name, node.name),\n                            value: null\n                        })\n                    ]\n                }));\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    }\n\n    function get_value(key) {\n        if (key instanceof AST_Constant) {\n            return key.getValue();\n        }\n        if (key instanceof AST_UnaryPrefix\n            && key.operator == \"void\"\n            && key.expression instanceof AST_Constant) {\n            return;\n        }\n        return key;\n    }\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_throw_on_access()\n    // returns true if this node may be null, undefined or contain `AST_Accessor`\n    (function(def_may_throw_on_access) {\n        AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n            return !compressor.option(\"pure_getters\")\n                || this._dot_throw(compressor);\n        });\n\n        function is_strict(compressor) {\n            return /strict/.test(compressor.option(\"pure_getters\"));\n        }\n\n        def_may_throw_on_access(AST_Node, is_strict);\n        def_may_throw_on_access(AST_Null, return_true);\n        def_may_throw_on_access(AST_Undefined, return_true);\n        def_may_throw_on_access(AST_Constant, return_false);\n        def_may_throw_on_access(AST_Array, return_false);\n        def_may_throw_on_access(AST_Object, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            for (var i = this.properties.length; --i >=0;)\n                if (this.properties[i]._dot_throw(compressor)) return true;\n            return false;\n        });\n        def_may_throw_on_access(AST_ObjectProperty, return_false);\n        def_may_throw_on_access(AST_ObjectGetter, return_true);\n        def_may_throw_on_access(AST_Expansion, function(compressor) {\n            return this.expression._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Function, return_false);\n        def_may_throw_on_access(AST_Arrow, return_false);\n        def_may_throw_on_access(AST_UnaryPostfix, return_false);\n        def_may_throw_on_access(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def_may_throw_on_access(AST_Binary, function(compressor) {\n            return (this.operator == \"&&\" || this.operator == \"||\")\n                && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));\n        });\n        def_may_throw_on_access(AST_Assign, function(compressor) {\n            return this.operator == \"=\"\n                && this.right._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Conditional, function(compressor) {\n            return this.consequent._dot_throw(compressor)\n                || this.alternative._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_Dot, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            if (this.expression instanceof AST_Function && this.property == \"prototype\") return false;\n            return true;\n        });\n        def_may_throw_on_access(AST_Sequence, function(compressor) {\n            return this.tail_node()._dot_throw(compressor);\n        });\n        def_may_throw_on_access(AST_SymbolRef, function(compressor) {\n            if (this.is_undefined) return true;\n            if (!is_strict(compressor)) return false;\n            if (is_undeclared_ref(this) && this.is_declared(compressor)) return false;\n            if (this.is_immutable()) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._dot_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_dot_throw\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function(def_is_boolean) {\n        const unary_bool = makePredicate(\"! delete\");\n        const binary_bool = makePredicate(\"in instanceof == != === !== < <= >= >\");\n        def_is_boolean(AST_Node, return_false);\n        def_is_boolean(AST_UnaryPrefix, function() {\n            return unary_bool.has(this.operator);\n        });\n        def_is_boolean(AST_Binary, function() {\n            return binary_bool.has(this.operator)\n                || lazy_op.has(this.operator)\n                    && this.left.is_boolean()\n                    && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Conditional, function() {\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def_is_boolean(AST_Assign, function() {\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Sequence, function() {\n            return this.tail_node().is_boolean();\n        });\n        def_is_boolean(AST_True, return_true);\n        def_is_boolean(AST_False, return_true);\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function(def_is_number) {\n        def_is_number(AST_Node, return_false);\n        def_is_number(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def_is_number(AST_Unary, function() {\n            return unary.has(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def_is_number(AST_Binary, function(compressor) {\n            return binary.has(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Assign, function(compressor) {\n            return binary.has(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Sequence, function(compressor) {\n            return this.tail_node().is_number(compressor);\n        });\n        def_is_number(AST_Conditional, function(compressor) {\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function(def_is_string) {\n        def_is_string(AST_Node, return_false);\n        def_is_string(AST_String, return_true);\n        def_is_string(AST_TemplateString, function() {\n            return this.segments.length === 1;\n        });\n        def_is_string(AST_UnaryPrefix, function() {\n            return this.operator == \"typeof\";\n        });\n        def_is_string(AST_Binary, function(compressor) {\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def_is_string(AST_Assign, function(compressor) {\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def_is_string(AST_Sequence, function(compressor) {\n            return this.tail_node().is_string(compressor);\n        });\n        def_is_string(AST_Conditional, function(compressor) {\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var lazy_op = makePredicate(\"&& ||\");\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function(def_find_defs) {\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) if (HOP(value, key)) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n\n        function warn(compressor, node) {\n            compressor.warn(\"global_defs \" + node.print_to_string() + \" redefined [{file}:{line},{col}]\", node.start);\n        }\n\n        AST_Toplevel.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return this;\n            this.figure_out_scope({ ie8: compressor.option(\"ie8\") });\n            return this.transform(new TreeTransformer(function(node) {\n                var def = node._find_defs(compressor, \"\");\n                if (!def) return;\n                var level = 0, child = node, parent;\n                while (parent = this.parent(level++)) {\n                    if (!(parent instanceof AST_PropAccess)) break;\n                    if (parent.expression !== child) break;\n                    child = parent;\n                }\n                if (is_lhs(child, parent)) {\n                    warn(compressor, node);\n                    return;\n                }\n                return def;\n            }));\n        });\n        def_find_defs(AST_Node, noop);\n        def_find_defs(AST_Dot, function(compressor, suffix) {\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def_find_defs(AST_SymbolDeclaration, function(compressor) {\n            if (!this.global()) return;\n            if (HOP(compressor.option(\"global_defs\"), this.name)) warn(compressor, this);\n        });\n        def_find_defs(AST_SymbolRef, function(compressor, suffix) {\n            if (!this.global()) return;\n            var defines = compressor.option(\"global_defs\");\n            var name = this.name + suffix;\n            if (HOP(defines, name)) return to_node(defines[name], this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    function convert_to_predicate(obj) {\n        for (var key of Object.keys(obj)) {\n            obj[key] = makePredicate(obj[key]);\n        }\n    }\n\n    var object_fns = [\n        \"constructor\",\n        \"toString\",\n        \"valueOf\",\n    ];\n    var native_fns = {\n        Array: [\n            \"indexOf\",\n            \"join\",\n            \"lastIndexOf\",\n            \"slice\",\n        ].concat(object_fns),\n        Boolean: object_fns,\n        Function: object_fns,\n        Number: [\n            \"toExponential\",\n            \"toFixed\",\n            \"toPrecision\",\n        ].concat(object_fns),\n        Object: object_fns,\n        RegExp: [\n            \"test\",\n        ].concat(object_fns),\n        String: [\n            \"charAt\",\n            \"charCodeAt\",\n            \"concat\",\n            \"indexOf\",\n            \"italics\",\n            \"lastIndexOf\",\n            \"match\",\n            \"replace\",\n            \"search\",\n            \"slice\",\n            \"split\",\n            \"substr\",\n            \"substring\",\n            \"toLowerCase\",\n            \"toUpperCase\",\n            \"trim\",\n        ].concat(object_fns),\n    };\n    convert_to_predicate(native_fns);\n    var static_fns = {\n        Array: [\n            \"isArray\",\n        ],\n        Math: [\n            \"abs\",\n            \"acos\",\n            \"asin\",\n            \"atan\",\n            \"ceil\",\n            \"cos\",\n            \"exp\",\n            \"floor\",\n            \"log\",\n            \"round\",\n            \"sin\",\n            \"sqrt\",\n            \"tan\",\n            \"atan2\",\n            \"pow\",\n            \"max\",\n            \"min\",\n        ],\n        Number: [\n            \"isFinite\",\n            \"isNaN\",\n        ],\n        Object: [\n            \"create\",\n            \"getOwnPropertyDescriptor\",\n            \"getOwnPropertyNames\",\n            \"getPrototypeOf\",\n            \"isExtensible\",\n            \"isFrozen\",\n            \"isSealed\",\n            \"keys\",\n        ],\n        String: [\n            \"fromCharCode\",\n        ],\n    };\n    convert_to_predicate(static_fns);\n\n    // methods to evaluate a constant expression\n    (function(def_eval) {\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor) {\n            if (!compressor.option(\"evaluate\")) return this;\n            var val = this._eval(compressor, 1);\n            if (!val || val instanceof RegExp) return val;\n            if (typeof val == \"function\" || typeof val == \"object\") return this;\n            return val;\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function() {\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix.has(this.operator);\n            }\n        });\n        def_eval(AST_Statement, function() {\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def_eval(AST_Lambda, return_this);\n        def_eval(AST_Class, return_this);\n        def_eval(AST_Node, return_this);\n        def_eval(AST_Constant, function() {\n            return this.getValue();\n        });\n        def_eval(AST_TemplateString, function() {\n            if (this.segments.length !== 1) return this;\n            return this.segments[0].value;\n        });\n        def_eval(AST_Function, function(compressor) {\n            if (compressor.option(\"unsafe\")) {\n                var fn = function() {};\n                fn.node = this;\n                fn.toString = function() {\n                    return this.node.print_to_string();\n                };\n                return fn;\n            }\n            return this;\n        });\n        def_eval(AST_Array, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var elements = [];\n                for (var i = 0, len = this.elements.length; i < len; i++) {\n                    var element = this.elements[i];\n                    var value = element._eval(compressor, depth);\n                    if (element === value) return this;\n                    elements.push(value);\n                }\n                return elements;\n            }\n            return this;\n        });\n        def_eval(AST_Object, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    if (prop instanceof AST_Expansion) return this;\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = key._eval(compressor, depth);\n                        if (key === prop.key) return this;\n                    }\n                    if (typeof Object.prototype[key] === \"function\") {\n                        return this;\n                    }\n                    if (prop.value instanceof AST_Function) continue;\n                    val[key] = prop.value._eval(compressor, depth);\n                    if (val[key] === prop.value) return this;\n                }\n                return val;\n            }\n            return this;\n        });\n        var non_converting_unary = makePredicate(\"! typeof void\");\n        def_eval(AST_UnaryPrefix, function(compressor, depth) {\n            var e = this.expression;\n            // Function would be evaluated to an array and so typeof would\n            // incorrectly return 'object'. Hence making is a special case.\n            if (compressor.option(\"typeofs\")\n                && this.operator == \"typeof\"\n                && (e instanceof AST_Lambda\n                    || e instanceof AST_SymbolRef\n                        && e.fixed_value() instanceof AST_Lambda)) {\n                return typeof function() {};\n            }\n            if (!non_converting_unary.has(this.operator)) depth++;\n            e = e._eval(compressor, depth);\n            if (e === this.expression) return this;\n            switch (this.operator) {\n              case \"!\": return !e;\n              case \"typeof\":\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) return this;\n                return typeof e;\n              case \"void\": return void e;\n              case \"~\": return ~e;\n              case \"-\": return -e;\n              case \"+\": return +e;\n            }\n            return this;\n        });\n        var non_converting_binary = makePredicate(\"&& || === !==\");\n        def_eval(AST_Binary, function(compressor, depth) {\n            if (!non_converting_binary.has(this.operator)) depth++;\n            var left = this.left._eval(compressor, depth);\n            if (left === this.left) return this;\n            var right = this.right._eval(compressor, depth);\n            if (right === this.right) return this;\n            var result;\n            switch (this.operator) {\n              case \"&&\"  : result = left &&  right; break;\n              case \"||\"  : result = left ||  right; break;\n              case \"|\"   : result = left |   right; break;\n              case \"&\"   : result = left &   right; break;\n              case \"^\"   : result = left ^   right; break;\n              case \"+\"   : result = left +   right; break;\n              case \"*\"   : result = left *   right; break;\n              case \"**\"  : result = Math.pow(left, right); break;\n              case \"/\"   : result = left /   right; break;\n              case \"%\"   : result = left %   right; break;\n              case \"-\"   : result = left -   right; break;\n              case \"<<\"  : result = left <<  right; break;\n              case \">>\"  : result = left >>  right; break;\n              case \">>>\" : result = left >>> right; break;\n              case \"==\"  : result = left ==  right; break;\n              case \"===\" : result = left === right; break;\n              case \"!=\"  : result = left !=  right; break;\n              case \"!==\" : result = left !== right; break;\n              case \"<\"   : result = left <   right; break;\n              case \"<=\"  : result = left <=  right; break;\n              case \">\"   : result = left >   right; break;\n              case \">=\"  : result = left >=  right; break;\n              default:\n                  return this;\n            }\n            if (isNaN(result) && compressor.find_parent(AST_With)) {\n                // leave original expression as is\n                return this;\n            }\n            return result;\n        });\n        def_eval(AST_Conditional, function(compressor, depth) {\n            var condition = this.condition._eval(compressor, depth);\n            if (condition === this.condition) return this;\n            var node = condition ? this.consequent : this.alternative;\n            var value = node._eval(compressor, depth);\n            return value === node ? this : value;\n        });\n        def_eval(AST_SymbolRef, function(compressor, depth) {\n            var fixed = this.fixed_value();\n            if (!fixed) return this;\n            var value;\n            if (HOP(fixed, \"_eval\")) {\n                value = fixed._eval();\n            } else {\n                this._eval = return_this;\n                value = fixed._eval(compressor, depth);\n                delete this._eval;\n                if (value === fixed) return this;\n                fixed._eval = function() {\n                    return value;\n                };\n            }\n            if (value && typeof value == \"object\") {\n                var escaped = this.definition().escaped;\n                if (escaped && depth > escaped) return this;\n            }\n            return value;\n        });\n        var global_objs = {\n            Array: Array,\n            Math: Math,\n            Number: Number,\n            Object: Object,\n            String: String,\n        };\n        var static_values = {\n            Math: [\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG2E\",\n                \"LOG10E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\",\n            ],\n            Number: [\n                \"MAX_VALUE\",\n                \"MIN_VALUE\",\n                \"NaN\",\n                \"NEGATIVE_INFINITY\",\n                \"POSITIVE_INFINITY\",\n            ],\n        };\n        convert_to_predicate(static_values);\n        def_eval(AST_PropAccess, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === this.property) return this;\n                }\n                var exp = this.expression;\n                var val;\n                if (is_undeclared_ref(exp)) {\n\n                    var aa;\n                    var first_arg = exp.name === \"hasOwnProperty\"\n                        && key === \"call\"\n                        && (aa = compressor.parent() && compressor.parent().args)\n                        && (aa && aa[0]\n                        && aa[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {\n                        return this.clone();\n                    }\n                    var static_value = static_values[exp.name];\n                    if (!static_value || !static_value.has(key)) return this;\n                    val = global_objs[exp.name];\n                } else {\n                    val = exp._eval(compressor, depth + 1);\n                    if (!val || val === exp || !HOP(val, key)) return this;\n                    if (typeof val == \"function\") switch (key) {\n                      case \"name\":\n                        return val.node.name ? val.node.name.name : \"\";\n                      case \"length\":\n                        return val.node.argnames.length;\n                      default:\n                        return this;\n                    }\n                }\n                return val[key];\n            }\n            return this;\n        });\n        def_eval(AST_Call, function(compressor, depth) {\n            var exp = this.expression;\n            if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n                var key = exp.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === exp.property) return this;\n                }\n                var val;\n                var e = exp.expression;\n                if (is_undeclared_ref(e)) {\n                    var first_arg =\n                        e.name === \"hasOwnProperty\" &&\n                        key === \"call\" &&\n                        (this.args[0] && this.args[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if ((first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {\n                        return this.clone();\n                    }\n                    var static_fn = static_fns[e.name];\n                    if (!static_fn || !static_fn.has(key)) return this;\n                    val = global_objs[e.name];\n                } else {\n                    val = e._eval(compressor, depth + 1);\n                    if (val === e || !val) return this;\n                    var native_fn = native_fns[val.constructor.name];\n                    if (!native_fn || !native_fn.has(key)) return this;\n                }\n                var args = [];\n                for (var i = 0, len = this.args.length; i < len; i++) {\n                    var arg = this.args[i];\n                    var value = arg._eval(compressor, depth);\n                    if (arg === value) return this;\n                    args.push(value);\n                }\n                try {\n                    return val[key].apply(val, args);\n                } catch (ex) {\n                    compressor.warn(\"Error evaluating {code} [{file}:{line},{col}]\", {\n                        code: this.print_to_string(),\n                        file: this.start.file,\n                        line: this.start.line,\n                        col: this.start.col\n                    });\n                }\n            }\n            return this;\n        });\n        def_eval(AST_New, return_this);\n    })(function(node, func) {\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def_negate) {\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def_negate(AST_Node, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Statement, function() {\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def_negate(AST_Function, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Arrow, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_UnaryPrefix, function() {\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def_negate(AST_Sequence, function(compressor) {\n            var expressions = this.expressions.slice();\n            expressions.push(expressions.pop().negate(compressor));\n            return make_sequence(this, expressions);\n        });\n        def_negate(AST_Conditional, function(compressor, first_in_statement) {\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def_negate(AST_Binary, function(compressor, first_in_statement) {\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement) {\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    var global_pure_fns = makePredicate(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");\n    AST_Call.DEFMETHOD(\"is_expr_pure\", function(compressor) {\n        if (compressor.option(\"unsafe\")) {\n            var expr = this.expression;\n            var first_arg = (this.args && this.args[0] && this.args[0].evaluate(compressor));\n            if (\n                expr.expression && expr.expression.name === \"hasOwnProperty\" &&\n                (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)\n            ) {\n                return false;\n            }\n            if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name)) return true;\n            if (expr instanceof AST_Dot\n                && is_undeclared_ref(expr.expression)\n                && static_fns.hasOwnProperty(expr.expression.name)\n                && static_fns[expr.expression.name].has(expr.property)) {\n                return true;\n            }\n        }\n        return this.pure || !compressor.pure_funcs(this);\n    });\n    AST_Node.DEFMETHOD(\"is_call_pure\", return_false);\n    AST_Dot.DEFMETHOD(\"is_call_pure\", function(compressor) {\n        if (!compressor.option(\"unsafe\")) return;\n        const expr = this.expression;\n        let map;\n        if (expr instanceof AST_Array) {\n            map = native_fns.Array;\n        } else if (expr.is_boolean()) {\n            map = native_fns.Boolean;\n        } else if (expr.is_number(compressor)) {\n            map = native_fns.Number;\n        } else if (expr instanceof AST_RegExp) {\n            map = native_fns.RegExp;\n        } else if (expr.is_string(compressor)) {\n            map = native_fns.String;\n        } else if (!this.may_throw_on_access(compressor)) {\n            map = native_fns.Object;\n        }\n        return map && map.has(this.property);\n    });\n\n    // determine if expression has side effects\n    (function(def_has_side_effects) {\n        def_has_side_effects(AST_Node, return_true);\n\n        def_has_side_effects(AST_EmptyStatement, return_false);\n        def_has_side_effects(AST_Constant, return_false);\n        def_has_side_effects(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def_has_side_effects(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Call, function(compressor) {\n            if (!this.is_expr_pure(compressor)\n                && (!this.expression.is_call_pure(compressor)\n                    || this.expression.has_side_effects(compressor))) {\n                return true;\n            }\n            return any(this.args, compressor);\n        });\n        def_has_side_effects(AST_Switch, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Case, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Try, function(compressor) {\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_If, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_LabeledStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SimpleStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Lambda, return_false);\n        def_has_side_effects(AST_Class, return_false);\n        def_has_side_effects(AST_DefClass, return_true);\n        def_has_side_effects(AST_Binary, function(compressor) {\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Assign, return_true);\n        def_has_side_effects(AST_Conditional, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Unary, function(compressor) {\n            return unary_side_effects.has(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_has_side_effects(AST_SymbolDeclaration, return_false);\n        def_has_side_effects(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_has_side_effects(AST_ObjectProperty, function(compressor) {\n            if (this.key instanceof AST_ObjectKeyVal &&\n                    this.key.has_side_effects(compressor))\n                return true;\n            return this.value.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_has_side_effects(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_has_side_effects(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_has_side_effects(AST_VarDef, function(compressor) {\n            return this.value;\n        });\n        def_has_side_effects(AST_TemplateSegment, return_false);\n        def_has_side_effects(AST_TemplateString, function(compressor) {\n            return any(this.segments, compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // determine if expression may throw\n    (function(def_may_throw) {\n        def_may_throw(AST_Node, return_true);\n\n        def_may_throw(AST_Class, return_false);\n        def_may_throw(AST_Constant, return_false);\n        def_may_throw(AST_EmptyStatement, return_false);\n        def_may_throw(AST_Lambda, return_false);\n        def_may_throw(AST_SymbolDeclaration, return_false);\n        def_may_throw(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].may_throw(compressor))\n                    return true;\n            return false;\n        }\n\n        def_may_throw(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_may_throw(AST_Assign, function(compressor) {\n            if (this.right.may_throw(compressor)) return true;\n            if (!compressor.has_directive(\"use strict\")\n                && this.operator == \"=\"\n                && this.left instanceof AST_SymbolRef) {\n                return false;\n            }\n            return this.left.may_throw(compressor);\n        });\n        def_may_throw(AST_Binary, function(compressor) {\n            return this.left.may_throw(compressor)\n                || this.right.may_throw(compressor);\n        });\n        def_may_throw(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_may_throw(AST_Call, function(compressor) {\n            if (any(this.args, compressor)) return true;\n            if (this.is_expr_pure(compressor)) return false;\n            if (this.expression.may_throw(compressor)) return true;\n            return !(this.expression instanceof AST_Lambda)\n                || any(this.expression.body, compressor);\n        });\n        def_may_throw(AST_Case, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_Conditional, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.consequent.may_throw(compressor)\n                || this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_may_throw(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_If, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.body && this.body.may_throw(compressor)\n                || this.alternative && this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_LabeledStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_may_throw(AST_ObjectProperty, function(compressor) {\n            return this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Return, function(compressor) {\n            return this.value && this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_may_throw(AST_SimpleStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor)\n                || this.property.may_throw(compressor);\n        });\n        def_may_throw(AST_Switch, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_may_throw(AST_Try, function(compressor) {\n            return this.bcatch ? this.bcatch.may_throw(compressor) : any(this.body, compressor)\n                || this.bfinally && this.bfinally.may_throw(compressor);\n        });\n        def_may_throw(AST_Unary, function(compressor) {\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n                return false;\n            return this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_VarDef, function(compressor) {\n            if (!this.value) return false;\n            return this.value.may_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"may_throw\", func);\n    });\n\n    // determine if expression is constant\n    (function(def_is_constant_expression) {\n        function all(list) {\n            for (var i = list.length; --i >= 0;)\n                if (!list[i].is_constant_expression())\n                    return false;\n            return true;\n        }\n\n        function all_refs_local(scope) {\n            var self = this;\n            var result = true;\n            self.walk(new TreeWalker(function(node) {\n                if (!result) return true;\n                if (node instanceof AST_SymbolRef) {\n                    if (self.inlined) {\n                        result = false;\n                        return true;\n                    }\n                    var def = node.definition();\n                    if (member(def, self.enclosed)\n                        && !self.variables.has(def.name)) {\n                        if (scope) {\n                            var scope_def = scope.find_variable(node);\n                            if (def.undeclared ? !scope_def : scope_def === def) {\n                                result = \"f\";\n                                return true;\n                            }\n                        }\n                        result = false;\n                    }\n                    return true;\n                }\n                if (node instanceof AST_This && self instanceof AST_Arrow) {\n                    result = false;\n                    return true;\n                }\n            }));\n            return result;\n        }\n\n        def_is_constant_expression(AST_Node, return_false);\n        def_is_constant_expression(AST_Constant, return_true);\n        def_is_constant_expression(AST_Class, function(scope) {\n            var self = this;\n            if (self.extends && !self.extends.is_constant_expression(scope)) {\n                return false;\n            }\n            return all_refs_local.call(self, scope);\n        });\n        def_is_constant_expression(AST_Lambda, all_refs_local);\n        def_is_constant_expression(AST_Unary, function() {\n            return this.expression.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Binary, function() {\n            return this.left.is_constant_expression() && this.right.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Array, function() {\n            return all(this.elements);\n        });\n        def_is_constant_expression(AST_Object, function() {\n            return all(this.properties);\n        });\n        def_is_constant_expression(AST_ObjectProperty, function() {\n            return !(this.key instanceof AST_Node) && this.value.is_constant_expression();\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_constant_expression\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    }\n    (function(def) {\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts() {\n            for (var i = 0; i < this.body.length; i++) {\n                if (aborts(this.body[i])) {\n                    return this.body[i];\n                }\n            }\n            return null;\n        }\n        def(AST_Import, function() { return null; });\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function() {\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    var directives = [\"use asm\", \"use strict\"];\n    def_optimize(AST_Directive, function(self, compressor) {\n        if (compressor.option(\"directives\")\n            && (!member(self.value, directives) || compressor.has_directive(self.value) !== self)) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Debugger, function(self, compressor) {\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_LabeledStatement, function(self, compressor) {\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    def_optimize(AST_Block, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        return self;\n    });\n\n    function can_be_extracted_from_if_block(node) {\n        return !(\n            node instanceof AST_Const ||\n            node instanceof AST_Let ||\n            node instanceof AST_Class\n        );\n    }\n\n    def_optimize(AST_BlockStatement, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1:\n            if (!compressor.has_directive(\"use strict\")\n                && compressor.parent() instanceof AST_If\n                && can_be_extracted_from_if_block(self.body[0])\n                || can_be_evicted_from_block(self.body[0])) {\n                return self.body[0];\n            }\n            break;\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    function opt_AST_Lambda(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (compressor.option(\"side_effects\")\n            && self.body.length == 1\n            && self.body[0] === compressor.has_directive(\"use strict\")) {\n            self.body.length = 0;\n        }\n        return self;\n    }\n    def_optimize(AST_Lambda, opt_AST_Lambda);\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor) {\n        if (!compressor.option(\"unused\")) return;\n        if (compressor.has_directive(\"use asm\")) return;\n        var self = this;\n        if (self.pinned()) return;\n        var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n        var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var assign_as_unused = /keep_assign/.test(compressor.option(\"unused\")) ? return_false : function(node) {\n            if (node instanceof AST_Assign && (node.write_only || node.operator == \"=\")) {\n                return node.left;\n            }\n            if (node instanceof AST_Unary && node.write_only) return node.expression;\n        };\n        var in_use_ids = new Map();\n        var fixed_ids = new Map();\n        if (self instanceof AST_Toplevel && compressor.top_retain) {\n            self.variables.forEach(function(def) {\n                if (compressor.top_retain(def) && !in_use_ids.has(def.id)) {\n                    in_use_ids.set(def.id, def);\n                }\n            });\n        }\n        var var_defs_by_id = new Map();\n        var initializations = new Map();\n        var destructuring_value = null;\n        // pass 1: find out which symbols are directly used in\n        // this scope (not in nested scopes).\n        var scope = this;\n        var tw = new TreeWalker(function(node, descend) {\n            if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive(\"use strict\")) {\n                node.argnames.forEach(function(argname) {\n                    if (!(argname instanceof AST_SymbolDeclaration)) return;\n                    var def = argname.definition();\n                    if (!in_use_ids.has(def.id)) {\n                        in_use_ids.set(def.id, def);\n                    }\n                });\n            }\n            if (node === self) return;\n            if (node instanceof AST_Defun || node instanceof AST_DefClass) {\n                var node_def = node.name.definition();\n                var in_export = tw.parent() instanceof AST_Export;\n                if (in_export || !drop_funcs && scope === self) {\n                    if (node_def.global && !in_use_ids.has(node_def.id)) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                map_add(initializations, node_def.id, node);\n                return true; // don't go in nested scopes\n            }\n            if (node instanceof AST_SymbolFunarg && scope === self) {\n                map_add(var_defs_by_id, node.definition().id, node);\n            }\n            if (node instanceof AST_Definitions && scope === self) {\n                var in_export = tw.parent() instanceof AST_Export;\n                node.definitions.forEach(function(def) {\n                    if (def.name instanceof AST_SymbolVar) {\n                        map_add(var_defs_by_id, def.name.definition().id, def);\n                    }\n                    if (in_export || !drop_vars) {\n                        def.name.walk(new TreeWalker(function(node) {\n                            if (node instanceof AST_SymbolDeclaration) {\n                                var def = node.definition();\n                                if ((in_export || def.global) && !in_use_ids.has(def.id)) {\n                                    in_use_ids.set(def.id, def);\n                                }\n                            }\n                        }));\n                    }\n                    if (def.value) {\n                        if (def.name instanceof AST_Destructuring) {\n                            var destructuring_cache = destructuring_value;\n                            destructuring_value = def.value;\n                            def.walk(tw);\n                            destructuring_value = destructuring_cache;\n                        } else {\n                            var node_def = def.name.definition();\n                            map_add(initializations, node_def.id, def.value);\n                            if (!node_def.chained && def.name.fixed_value() === def.value) {\n                                fixed_ids.set(node_def.id, def);\n                            }\n                        }\n                        if (def.value.has_side_effects(compressor)) {\n                            def.value.walk(tw);\n                        }\n                    }\n                });\n                return true;\n            }\n            if (node.destructuring && destructuring_value) {\n                map_add(initializations, node.name, destructuring_value);\n            }\n            return scan_ref_scoped(node, descend);\n        });\n        self.walk(tw);\n        // pass 2: for every used symbol we need to walk its\n        // initialization code to figure out if it uses other\n        // symbols (that may not be in_use).\n        tw = new TreeWalker(scan_ref_scoped);\n        in_use_ids.forEach(function (def) {\n            var init = initializations.get(def.id);\n            if (init) init.forEach(function(init) {\n                init.walk(tw);\n            });\n        });\n        // pass 3: we should drop declarations not in_use\n        var tt = new TreeTransformer(\n            function before(node, descend, in_list) {\n                var parent = tt.parent();\n                if (drop_vars) {\n                    var sym = assign_as_unused(node);\n                    if (sym instanceof AST_SymbolRef) {\n                        var def = sym.definition();\n                        var in_use = in_use_ids.has(def.id);\n                        if (node instanceof AST_Assign) {\n                            if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {\n                                return maintain_this_binding(parent, node, node.right.transform(tt));\n                            }\n                        } else if (!in_use) return make_node(AST_Number, node, {\n                            value: 0\n                        });\n                    }\n                }\n                if (scope !== self) return;\n                var def;\n                if (node.name\n                    && (node instanceof AST_ClassExpression\n                        && !keep_name(compressor.option(\"keep_classnames\"), (def = node.name.definition()).name)\n                    || node instanceof AST_Function\n                        && !keep_name(compressor.option(\"keep_fnames\"), (def = node.name.definition()).name))) {\n                    // any declarations with same name will overshadow\n                    // name of this anonymous function and can therefore\n                    // never be used anywhere\n                    if (!in_use_ids.has(def.id) || def.orig.length > 1) node.name = null;\n                }\n                if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                    var trim = !compressor.option(\"keep_fargs\");\n                    for (var a = node.argnames, i = a.length; --i >= 0;) {\n                        var sym = a[i];\n                        if (sym instanceof AST_Expansion) {\n                            sym = sym.expression;\n                        }\n                        if (sym instanceof AST_DefaultAssign) {\n                            sym = sym.left;\n                        }\n                        // Do not drop destructuring arguments.\n                        // They constitute a type assertion, so dropping\n                        // them would stop that TypeError which would happen\n                        // if someone called it with an incorrectly formatted\n                        // parameter.\n                        if (!(sym instanceof AST_Destructuring) && !in_use_ids.has(sym.definition().id)) {\n                            sym.__unused = true;\n                            if (trim) {\n                                a.pop();\n                                compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", template(sym));\n                            }\n                        } else {\n                            trim = false;\n                        }\n                    }\n                }\n                if ((node instanceof AST_Defun || node instanceof AST_DefClass) && node !== self) {\n                    var def = node.name.definition();\n                    var keep = in_use_ids.has(def.id) || !drop_funcs && def.global;\n                    if (!keep) {\n                        compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", template(node.name));\n                        def.eliminated++;\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                }\n                if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {\n                    var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);\n                    // place uninitialized names at the start\n                    var body = [], head = [], tail = [];\n                    // for unused names whose initialization has\n                    // side effects, we can cascade the init. code\n                    // into the next one, or next statement.\n                    var side_effects = [];\n                    node.definitions.forEach(function(def) {\n                        if (def.value) def.value = def.value.transform(tt);\n                        var is_destructure = def.name instanceof AST_Destructuring;\n                        var sym = is_destructure\n                            ? new SymbolDef(null, { name: \"<destructure>\" }) /* fake SymbolDef */\n                            : def.name.definition();\n                        if (drop_block && sym.global) return tail.push(def);\n                        if (!(drop_vars || drop_block)\n                            || is_destructure\n                                && (def.name.names.length\n                                    || def.name.is_array\n                                    || compressor.option(\"pure_getters\") != true)\n                            || in_use_ids.has(sym.id)) {\n                            if (def.value && fixed_ids.has(sym.id) && fixed_ids.get(sym.id) !== def) {\n                                def.value = def.value.drop_side_effect_free(compressor);\n                            }\n                            if (def.name instanceof AST_SymbolVar) {\n                                var var_defs = var_defs_by_id.get(sym.id);\n                                if (var_defs.length > 1 && (!def.value || sym.orig.indexOf(def.name) > sym.eliminated)) {\n                                    compressor.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\", template(def.name));\n                                    if (def.value) {\n                                        var ref = make_node(AST_SymbolRef, def.name, def.name);\n                                        sym.references.push(ref);\n                                        var assign = make_node(AST_Assign, def, {\n                                            operator: \"=\",\n                                            left: ref,\n                                            right: def.value\n                                        });\n                                        if (fixed_ids.get(sym.id) === def) {\n                                            fixed_ids.set(sym.id, assign);\n                                        }\n                                        side_effects.push(assign.transform(tt));\n                                    }\n                                    remove(var_defs, def);\n                                    sym.eliminated++;\n                                    return;\n                                }\n                            }\n                            if (def.value) {\n                                if (side_effects.length > 0) {\n                                    if (tail.length > 0) {\n                                        side_effects.push(def.value);\n                                        def.value = make_sequence(def.value, side_effects);\n                                    } else {\n                                        body.push(make_node(AST_SimpleStatement, node, {\n                                            body: make_sequence(node, side_effects)\n                                        }));\n                                    }\n                                    side_effects = [];\n                                }\n                                tail.push(def);\n                            } else {\n                                head.push(def);\n                            }\n                        } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) side_effects.push(value);\n                            def.value = null;\n                            head.push(def);\n                        } else {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) {\n                                if (!is_destructure) compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                                side_effects.push(value);\n                            } else {\n                                if (!is_destructure) compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                            }\n                            sym.eliminated++;\n                        }\n                    });\n                    if (head.length > 0 || tail.length > 0) {\n                        node.definitions = head.concat(tail);\n                        body.push(node);\n                    }\n                    if (side_effects.length > 0) {\n                        body.push(make_node(AST_SimpleStatement, node, {\n                            body: make_sequence(node, side_effects)\n                        }));\n                    }\n                    switch (body.length) {\n                      case 0:\n                        return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                      case 1:\n                        return body[0];\n                      default:\n                        return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                            body: body\n                        });\n                    }\n                }\n                // certain combination of unused name + side effect leads to:\n                //    https://github.com/mishoo/UglifyJS2/issues/44\n                //    https://github.com/mishoo/UglifyJS2/issues/1830\n                //    https://github.com/mishoo/UglifyJS2/issues/1838\n                // that's an invalid AST.\n                // We fix it at this stage by moving the `var` outside the `for`.\n                if (node instanceof AST_For) {\n                    descend(node, this);\n                    var block;\n                    if (node.init instanceof AST_BlockStatement) {\n                        block = node.init;\n                        node.init = block.body.pop();\n                        block.body.push(node);\n                    }\n                    if (node.init instanceof AST_SimpleStatement) {\n                        node.init = node.init.body;\n                    } else if (is_empty(node.init)) {\n                        node.init = null;\n                    }\n                    return !block ? node : in_list ? MAP.splice(block.body) : block;\n                }\n                if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {\n                    descend(node, this);\n                    if (node.body instanceof AST_BlockStatement) {\n                        var block = node.body;\n                        node.body = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_BlockStatement) {\n                    descend(node, this);\n                    if (in_list && all(node.body, can_be_evicted_from_block)) {\n                        return MAP.splice(node.body);\n                    }\n                    return node;\n                }\n                if (node instanceof AST_Scope) {\n                    var save_scope = scope;\n                    scope = node;\n                    descend(node, this);\n                    scope = save_scope;\n                    return node;\n                }\n\n                function template(sym) {\n                    return {\n                        name : sym.name,\n                        file : sym.start.file,\n                        line : sym.start.line,\n                        col  : sym.start.col\n                    };\n                }\n            }\n        );\n        self.transform(tt);\n\n        function scan_ref_scoped(node, descend) {\n            var node_def, sym = assign_as_unused(node);\n            if (sym instanceof AST_SymbolRef\n                && !is_ref_of(node.left, AST_SymbolBlockDeclaration)\n                && self.variables.get(sym.name) === (node_def = sym.definition())) {\n                if (node instanceof AST_Assign) {\n                    node.right.walk(tw);\n                    if (!node_def.chained && node.left.fixed_value() === node.right) {\n                        fixed_ids.set(node_def.id, node);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_SymbolRef) {\n                node_def = node.definition();\n                if (!in_use_ids.has(node_def.id)) {\n                    in_use_ids.set(node_def.id, node_def);\n                    if (node_def = node_def.redefined()) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                var save_scope = scope;\n                scope = node;\n                descend();\n                scope = save_scope;\n                return true;\n            }\n        }\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor) {\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        // Hoisting makes no sense in an arrow func\n        if (!Array.isArray(self.body)) return self;\n\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Map(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_funs && node instanceof AST_Defun\n                            && !(tt.parent() instanceof AST_Export)\n                            && tt.parent() === self) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_vars && node instanceof AST_Var) {\n                            node.definitions.forEach(function(def) {\n                                if (def.name instanceof AST_Destructuring) return;\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                vars.forEach(function(def, name) {\n                    if (self instanceof AST_Lambda\n                        && find_if(function(x) { return x.name == def.name.name; },\n                                   self.args_as_names())) {\n                        vars.delete(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Sequence\n                                && (assign = expr.expressions[0]) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                }\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"var_names\", function varNames() {\n        var var_names = this._var_names;\n        if (!var_names) {\n            this._var_names = var_names = new Set(this.parent_scope ? varNames.call(this.parent_scope) : null);\n            this.enclosed.forEach(function(def) {\n                var_names.add(def.name);\n            });\n            this.variables.forEach(function(def, name) {\n                var_names.add(name);\n            });\n        }\n        return var_names;\n    });\n\n    AST_Scope.DEFMETHOD(\"make_var_name\", function(prefix) {\n        var var_names = this.var_names();\n        prefix = prefix.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n        var name = prefix;\n        for (var i = 0; var_names.has(name); i++) name = prefix + \"$\" + i;\n        var_names.add(name);\n        return name;\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_properties\", function(compressor) {\n        var self = this;\n        if (!compressor.option(\"hoist_props\") || compressor.has_directive(\"use asm\")) return self;\n        var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;\n        var defs_by_id = new Map();\n        var tt = new TreeTransformer(function(node, descend) {\n            if (node instanceof AST_Definitions && tt.parent() instanceof AST_Export) return node;\n            if (node instanceof AST_VarDef) {\n                var sym = node.name, def, value;\n                if (sym.scope === self\n                    && (def = sym.definition()).escaped != 1\n                    && !def.assignments\n                    && !def.direct_access\n                    && !def.single_use\n                    && !compressor.exposed(def)\n                    && !top_retain(def)\n                    && (value = sym.fixed_value()) === node.value\n                    && value instanceof AST_Object) {\n                    descend(node, this);\n                    var defs = new Map();\n                    var assignments = [];\n                    value.properties.forEach(function(prop) {\n                        assignments.push(make_node(AST_VarDef, node, {\n                            name: make_sym(prop.key),\n                            value: prop.value\n                        }));\n                    });\n                    defs_by_id.set(def.id, defs);\n                    return MAP.splice(assignments);\n                }\n            }\n            if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {\n                var defs = defs_by_id.get(node.expression.definition().id);\n                if (defs) {\n                    var def = defs.get(String(get_value(node.property)));\n                    var sym = make_node(AST_SymbolRef, node, {\n                        name: def.name,\n                        scope: node.expression.scope,\n                        thedef: def\n                    });\n                    sym.reference({});\n                    return sym;\n                }\n            }\n\n            function make_sym(key) {\n                var new_var = make_node(sym.CTOR, sym, {\n                    name: self.make_var_name(sym.name + \"_\" + key),\n                    scope: self\n                });\n                var def = self.def_variable(new_var);\n                defs.set(String(key), def);\n                self.enclosed.push(def);\n                return new_var;\n            }\n        });\n        return self.transform(tt);\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def_drop_side_effect_free) {\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var len = nodes.length;\n            if (!len) return null;\n            var ret = [], changed = false;\n            for (var i = 0; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    ret.push(node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def_drop_side_effect_free(AST_Node, return_this);\n        def_drop_side_effect_free(AST_Constant, return_null);\n        def_drop_side_effect_free(AST_This, return_null);\n        def_drop_side_effect_free(AST_Call, function(compressor, first_in_statement) {\n            if (!this.is_expr_pure(compressor)) {\n                if (this.expression.is_call_pure(compressor)) {\n                    var exprs = this.args.slice();\n                    exprs.unshift(this.expression.expression);\n                    exprs = trim(exprs, compressor, first_in_statement);\n                    return exprs && make_sequence(this, exprs);\n                }\n                if (is_func_expr(this.expression)\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && make_sequence(this, args);\n        });\n        def_drop_side_effect_free(AST_Accessor, return_null);\n        def_drop_side_effect_free(AST_Function, return_null);\n        def_drop_side_effect_free(AST_Arrow, return_null);\n        def_drop_side_effect_free(AST_ClassExpression, return_null);\n        def_drop_side_effect_free(AST_Binary, function(compressor, first_in_statement) {\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            if (lazy_op.has(this.operator)) {\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n            } else {\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_sequence(this, [ left, right ]);\n            }\n        });\n        def_drop_side_effect_free(AST_Assign, function(compressor) {\n            var left = this.left;\n            if (left.has_side_effects(compressor)\n                || compressor.has_directive(\"use strict\")\n                    && left instanceof AST_PropAccess\n                    && left.expression.is_constant()) {\n                return this;\n            }\n            this.write_only = true;\n            while (left instanceof AST_PropAccess) {\n                left = left.expression;\n            }\n            if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n                return this.right.drop_side_effect_free(compressor);\n            }\n            return this;\n        });\n        def_drop_side_effect_free(AST_Conditional, function(compressor) {\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def_drop_side_effect_free(AST_Unary, function(compressor, first_in_statement) {\n            if (unary_side_effects.has(this.operator)) {\n                this.write_only = !this.expression.has_side_effects(compressor);\n                return this;\n            }\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement && expression && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator == \"!\") return this;\n                return expression.negate(compressor, first_in_statement);\n            }\n            return expression;\n        });\n        def_drop_side_effect_free(AST_SymbolRef, function(compressor) {\n            return this.is_declared(compressor) ? null : this;\n        });\n        def_drop_side_effect_free(AST_Object, function(compressor, first_in_statement) {\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_ObjectProperty, function(compressor, first_in_statement) {\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Array, function(compressor, first_in_statement) {\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_Dot, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Sub, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_sequence(this, [ expression, property ]);\n        });\n        def_drop_side_effect_free(AST_Sequence, function(compressor) {\n            var last = this.tail_node();\n            var expr = last.drop_side_effect_free(compressor);\n            if (expr === last) return this;\n            var expressions = this.expressions.slice(0, -1);\n            if (expr) expressions.push(expr);\n            return make_sequence(this, expressions);\n        });\n        def_drop_side_effect_free(AST_Expansion, function(compressor, first_in_statement) {\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_TemplateSegment, return_null);\n        def_drop_side_effect_free(AST_TemplateString, function(compressor) {\n            var values = trim(this.segments, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    var pure_prop_access_globals = [\n        \"Number\",\n        \"String\",\n        \"Array\",\n        \"Object\",\n        \"Function\",\n        \"Promise\",\n        \"global\",\n        \"window\",\n        \"document\",\n        \"location\"\n    ];\n    def_optimize(AST_SimpleStatement, function(self, compressor) {\n        if (self.body instanceof AST_SymbolRef && pure_prop_access_globals.indexOf(self.body.name) !== -1) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_While, function(self, compressor) {\n        return compressor.option(\"loops\") ? make_node(AST_For, self, self).optimize(compressor) : self;\n    });\n\n    function has_break_or_continue(loop, parent) {\n        var found = false;\n        var tw = new TreeWalker(function(node) {\n            if (found || node instanceof AST_Scope) return true;\n            if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n                return found = true;\n            }\n        });\n        if (parent instanceof AST_LabeledStatement) tw.push(parent);\n        tw.push(loop);\n        loop.body.walk(tw);\n        return found;\n    }\n\n    def_optimize(AST_Do, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.tail_node().evaluate(compressor);\n        if (!(cond instanceof AST_Node)) {\n            if (cond) return make_node(AST_For, self, {\n                body: make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                })\n            }).optimize(compressor);\n            if (!has_break_or_continue(self, compressor.parent())) {\n                return make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                }).optimize(compressor);\n            }\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (compressor.option(\"dead_code\") && is_break(first)) {\n            var body = [];\n            if (self.init instanceof AST_Statement) {\n                body.push(self.init);\n            } else if (self.init) {\n                body.push(make_node(AST_SimpleStatement, self.init, {\n                    body: self.init\n                }));\n            }\n            if (self.condition) {\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n            }\n            extract_declarations_from_unreachable_code(compressor, self.body, body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            });\n        }\n        if (first instanceof AST_If) {\n            if (is_break(first.body)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            } else if (is_break(first.alternative)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n        return self;\n\n        function is_break(node) {\n            return node instanceof AST_Break\n                && compressor.loopcontrol_target(node) === compressor.self();\n        }\n\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            self = if_break_in_loop(self, compressor);\n        }\n    }\n\n    def_optimize(AST_For, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        if (compressor.option(\"side_effects\") && self.init) {\n            self.init = self.init.drop_side_effect_free(compressor);\n        }\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (!(cond instanceof AST_Node)) {\n                if (cond) self.condition = null;\n                else if (!compressor.option(\"dead_code\")) {\n                    var orig = self.condition;\n                    self.condition = make_node_from_constant(cond, self.condition);\n                    self.condition = best_of_expression(self.condition.transform(compressor), orig);\n                }\n            }\n            if (compressor.option(\"dead_code\")) {\n                if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n                if (!cond) {\n                    var body = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, body);\n                    if (self.init instanceof AST_Statement) {\n                        body.push(self.init);\n                    } else if (self.init) {\n                        body.push(make_node(AST_SimpleStatement, self.init, {\n                            body: self.init\n                        }));\n                    }\n                    body.push(make_node(AST_SimpleStatement, self.condition, {\n                        body: self.condition\n                    }));\n                    return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n                }\n            }\n        }\n        return if_break_in_loop(self, compressor);\n    });\n\n    def_optimize(AST_If, function(self, compressor) {\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (!compressor.option(\"dead_code\") && !(cond instanceof AST_Node)) {\n            var orig = self.condition;\n            self.condition = make_node_from_constant(cond, orig);\n            self.condition = best_of_expression(self.condition.transform(compressor), orig);\n        }\n        if (compressor.option(\"dead_code\")) {\n            if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n            if (!cond) {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, body);\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                if (self.alternative) body.push(self.alternative);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            } else if (!(cond instanceof AST_Node)) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                if (self.alternative) {\n                    extract_declarations_from_unreachable_code(compressor, self.alternative, body);\n                }\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                body.push(self.body);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            }\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Switch, function(self, compressor) {\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (!(value instanceof AST_Node)) {\n            var orig = self.expression;\n            self.expression = make_node_from_constant(value, orig);\n            self.expression = best_of_expression(self.expression.transform(compressor), orig);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        if (value instanceof AST_Node) {\n            value = self.expression.tail_node().evaluate(compressor);\n        }\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (!(value instanceof AST_Node)) {\n                var exp = branch.expression.evaluate(compressor);\n                if (!(exp instanceof AST_Node) && exp !== value) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n                if (exp instanceof AST_Node) exp = branch.expression.tail_node().evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                var statements = body[0].body.slice();\n                var exp = body[0].expression;\n                if (exp) statements.unshift(make_node(AST_SimpleStatement, exp, {\n                    body: exp\n                }));\n                statements.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body:self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: statements\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    def_optimize(AST_Try, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;\n        if (compressor.option(\"dead_code\") && all(self.body, is_empty)) {\n            var body = [];\n            if (self.bcatch) {\n                extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n                body.forEach(function(stat) {\n                    if (!(stat instanceof AST_Definitions)) return;\n                    stat.definitions.forEach(function(var_def) {\n                        var def = var_def.name.definition().redefined();\n                        if (!def) return;\n                        var_def.name = var_def.name.clone();\n                        var_def.name.thedef = def;\n                    });\n                });\n            }\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function() {\n        var decls = [];\n        this.definitions.forEach(function(def) {\n            if (def.name instanceof AST_SymbolDeclaration) {\n                def.value = null;\n                decls.push(def);\n            } else def.name.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolDeclaration) {\n                    decls.push(make_node(AST_VarDef, def, {\n                        name: node,\n                        value: null\n                    }));\n                }\n            }));\n        });\n        this.definitions = decls;\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor) {\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def) {\n            if (def.value && !(def.name instanceof AST_Destructuring)) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            } else if (def.value) {\n                // Because it's a destructuring, do not turn into an assignment.\n                var varDef = make_node(AST_VarDef, def, {\n                    name: def.name,\n                    value: def.value\n                });\n                var var_ = make_node(AST_Var, def, {\n                    definitions: [ varDef ]\n                });\n                a.push(var_);\n            }\n            def = def.name.definition();\n            def.eliminated++;\n            def.replaced--;\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return make_sequence(this, assignments);\n    });\n\n    def_optimize(AST_Definitions, function(self, compressor) {\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_Import, function(self, compressor) {\n        return self;\n    });\n\n    function retain_top_func(fn, compressor) {\n        return compressor.top_retain\n            && fn instanceof AST_Defun\n            && fn._top\n            && fn.name\n            && compressor.top_retain(fn.name);\n    }\n\n    def_optimize(AST_Call, function(self, compressor) {\n        var exp = self.expression;\n        var fn = exp;\n        inline_array_like_spread(self, compressor, self.args);\n        var simple_args = all(self.args, function(arg) {\n            return !(arg instanceof AST_Expansion);\n        });\n        if (compressor.option(\"reduce_vars\") && fn instanceof AST_SymbolRef) {\n            fn = fn.fixed_value();\n            if (retain_top_func(fn, compressor)) fn = exp;\n        }\n        var is_func = fn instanceof AST_Lambda;\n        if (compressor.option(\"unused\")\n            && simple_args\n            && is_func\n            && !fn.uses_arguments\n            && !fn.pinned()) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                if (fn.argnames[i] instanceof AST_Expansion) {\n                    if (fn.argnames[i].expression.__unused) while (i < len) {\n                        var node = self.args[i++].drop_side_effect_free(compressor);\n                        if (node) {\n                            self.args[pos++] = node;\n                        }\n                    } else while (i < len) {\n                        self.args[pos++] = self.args[i++];\n                    }\n                    last = pos;\n                    break;\n                }\n                var trim = i >= fn.argnames.length;\n                if (trim || fn.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                if (self.args.length != 1) {\n                    return make_node(AST_Array, self, {\n                        elements: self.args\n                    }).optimize(compressor);\n                } else if (self.args[0] instanceof AST_Number && self.args[0].value <= 11) {\n                    const elements = [];\n                    for (let i = 0; i < self.args[0].value; i++) elements.push(new AST_Hole);\n                    return new AST_Array({ elements });\n                }\n                break;\n              case \"Object\":\n                if (self.args.length == 0) {\n                    return make_node(AST_Object, self, {\n                        properties: []\n                    });\n                }\n                break;\n              case \"String\":\n                if (self.args.length == 0) return make_node(AST_String, self, {\n                    value: \"\"\n                });\n                if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                    left: self.args[0],\n                    operator: \"+\",\n                    right: make_node(AST_String, self, { value: \"\" })\n                }).optimize(compressor);\n                break;\n              case \"Number\":\n                if (self.args.length == 0) return make_node(AST_Number, self, {\n                    value: 0\n                });\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"+\"\n                }).optimize(compressor);\n              case \"Boolean\":\n                if (self.args.length == 0) return make_node(AST_False, self);\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"!\"\n                    }),\n                    operator: \"!\"\n                }).optimize(compressor);\n                break;\n              case \"RegExp\":\n                var params = [];\n                if (all(self.args, function(arg) {\n                    var value = arg.evaluate(compressor);\n                    params.unshift(value);\n                    return arg !== value;\n                })) {\n                    try {\n                        return best_of(compressor, self, make_node(AST_RegExp, self, {\n                            value: RegExp.apply(RegExp, params),\n                        }));\n                    } catch (ex) {\n                        compressor.warn(\"Error converting {expr} [{file}:{line},{col}]\", {\n                            expr: self.print_to_string(),\n                            file: self.start.file,\n                            line: self.start.line,\n                            col: self.start.col\n                        });\n                    }\n                }\n                break;\n            } else if (exp instanceof AST_Dot) switch(exp.property) {\n              case \"toString\":\n                if (self.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {\n                    return make_node(AST_Binary, self, {\n                        left: make_node(AST_String, self, { value: \"\" }),\n                        operator: \"+\",\n                        right: exp.expression\n                    }).optimize(compressor);\n                }\n                break;\n              case \"join\":\n                if (exp.expression instanceof AST_Array) EXIT: {\n                    var separator;\n                    if (self.args.length > 0) {\n                        separator = self.args[0].evaluate(compressor);\n                        if (separator === self.args[0]) break EXIT; // not a constant\n                    }\n                    var elements = [];\n                    var consts = [];\n                    for (var i = 0, len = exp.expression.elements.length; i < len; i++) {\n                        var el = exp.expression.elements[i];\n                        if (el instanceof AST_Expansion) break EXIT;\n                        var value = el.evaluate(compressor);\n                        if (value !== el) {\n                            consts.push(value);\n                        } else {\n                            if (consts.length > 0) {\n                                elements.push(make_node(AST_String, self, {\n                                    value: consts.join(separator)\n                                }));\n                                consts.length = 0;\n                            }\n                            elements.push(el);\n                        }\n                    }\n                    if (consts.length > 0) {\n                        elements.push(make_node(AST_String, self, {\n                            value: consts.join(separator)\n                        }));\n                    }\n                    if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                    if (elements.length == 1) {\n                        if (elements[0].is_string(compressor)) {\n                            return elements[0];\n                        }\n                        return make_node(AST_Binary, elements[0], {\n                            operator : \"+\",\n                            left     : make_node(AST_String, self, { value: \"\" }),\n                            right    : elements[0]\n                        });\n                    }\n                    if (separator == \"\") {\n                        var first;\n                        if (elements[0].is_string(compressor)\n                            || elements[1].is_string(compressor)) {\n                            first = elements.shift();\n                        } else {\n                            first = make_node(AST_String, self, { value: \"\" });\n                        }\n                        return elements.reduce(function(prev, el) {\n                            return make_node(AST_Binary, el, {\n                                operator : \"+\",\n                                left     : prev,\n                                right    : el\n                            });\n                        }, first).optimize(compressor);\n                    }\n                    // need this awkward cloning to not affect original element\n                    // best_of will decide which one to get through.\n                    var node = self.clone();\n                    node.expression = node.expression.clone();\n                    node.expression.expression = node.expression.expression.clone();\n                    node.expression.expression.elements = elements;\n                    return best_of(compressor, self, node);\n                }\n                break;\n              case \"charAt\":\n                if (exp.expression.is_string(compressor)) {\n                    var arg = self.args[0];\n                    var index = arg ? arg.evaluate(compressor) : 0;\n                    if (index !== arg) {\n                        return make_node(AST_Sub, exp, {\n                            expression: exp.expression,\n                            property: make_node_from_constant(index | 0, arg || exp)\n                        }).optimize(compressor);\n                    }\n                }\n                break;\n              case \"apply\":\n                if (self.args.length == 2 && self.args[1] instanceof AST_Array) {\n                    var args = self.args[1].elements.slice();\n                    args.unshift(self.args[0]);\n                    return make_node(AST_Call, self, {\n                        expression: make_node(AST_Dot, exp, {\n                            expression: exp.expression,\n                            property: \"call\"\n                        }),\n                        args: args\n                    }).optimize(compressor);\n                }\n                break;\n              case \"call\":\n                var func = exp.expression;\n                if (func instanceof AST_SymbolRef) {\n                    func = func.fixed_value();\n                }\n                if (func instanceof AST_Lambda && !func.contains_this()) {\n                    return (self.args.length ? make_sequence(this, [\n                        self.args[0],\n                        make_node(AST_Call, self, {\n                            expression: exp.expression,\n                            args: self.args.slice(1)\n                        })\n                    ]) : make_node(AST_Call, self, {\n                        expression: exp.expression,\n                        args: []\n                    })).optimize(compressor);\n                }\n                break;\n            }\n        }\n        if (compressor.option(\"unsafe_Function\")\n            && is_undeclared_ref(exp)\n            && exp.name == \"Function\") {\n            // new Function() => function(){}\n            if (self.args.length == 0) return make_node(AST_Function, self, {\n                argnames: [],\n                body: []\n            }).optimize(compressor);\n            if (all(self.args, function(x) {\n                return x instanceof AST_String;\n            })) {\n                // quite a corner-case, but we can handle it:\n                //   https://github.com/mishoo/UglifyJS2/issues/203\n                // if the code argument is a constant, then we can minify it.\n                try {\n                    var code = \"n(function(\" + self.args.slice(0, -1).map(function(arg) {\n                        return arg.value;\n                    }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                    var ast = parse(code);\n                    var mangle = { ie8: compressor.option(\"ie8\") };\n                    ast.figure_out_scope(mangle);\n                    var comp = new Compressor(compressor.options);\n                    ast = ast.transform(comp);\n                    ast.figure_out_scope(mangle);\n                    base54.reset();\n                    ast.compute_char_frequency(mangle);\n                    ast.mangle_names(mangle);\n                    var fun;\n                    ast.walk(new TreeWalker(function(node) {\n                        if (fun) return true;\n                        if (is_func_expr(node)) {\n                            fun = node;\n                            return true;\n                        }\n                    }));\n                    if (fun.body instanceof AST_Node) {\n                        fun.body = [\n                            make_node(AST_Return, fun.body, {\n                                value: fun.body\n                            })\n                        ];\n                    }\n                    var code = OutputStream();\n                    AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                    self.args = [\n                        make_node(AST_String, self, {\n                            value: fun.argnames.map(function(arg) {\n                                return arg.print_to_string();\n                            }).join(\",\")\n                        }),\n                        make_node(AST_String, self.args[self.args.length - 1], {\n                            value: code.get().replace(/^{|}$/g, \"\")\n                        })\n                    ];\n                    return self;\n                } catch (ex) {\n                    if (ex instanceof JS_Parse_Error) {\n                        compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                        compressor.warn(ex.toString());\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n        }\n        var stat = is_func && fn.body;\n        if (stat instanceof AST_Node) {\n            stat = make_node(AST_Return, stat, {\n                value: stat\n            });\n        } else if (stat) {\n            stat = stat[0];\n        }\n        var is_regular_func = is_func && !fn.is_generator && !fn.async;\n        var can_inline = compressor.option(\"inline\") && !self.is_expr_pure(compressor);\n        if (can_inline && stat instanceof AST_Return && is_regular_func) {\n            var value = stat.value;\n            if (!value || value.is_constant_expression()) {\n                if (value) {\n                    value = value.clone(true);\n                } else {\n                    value = make_node(AST_Undefined, self);\n                }\n                var args = self.args.concat(value);\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (is_regular_func) {\n            var def, value, scope, in_loop, level = -1;\n            if (can_inline\n                && simple_args\n                && !fn.uses_arguments\n                && !fn.pinned()\n                && !(compressor.parent() instanceof AST_Class)\n                && !(fn.name && fn instanceof AST_Function)\n                && (!(compressor.find_parent(AST_Lambda) instanceof AST_Arrow)\n                    || fn.argnames.length == 0\n                        && (fn.body instanceof AST_Node || fn.body.length == 1))\n                && (value = can_flatten_body(stat))\n                && (exp === fn\n                    || compressor.option(\"unused\")\n                        && (def = exp.definition()).references.length == 1\n                        && !recursive_ref(compressor, def)\n                        && fn.is_constant_expression(exp.scope))\n                && !self.pure\n                && !fn.contains_this()\n                && can_inject_symbols()\n                && !(scope instanceof AST_Class)) {\n                fn._squeezed = true;\n                return make_sequence(self, flatten_fn()).optimize(compressor);\n            }\n            if (compressor.option(\"side_effects\") && !(fn.body instanceof AST_Node) && all(fn.body, is_empty)) {\n                var args = self.args.concat(make_node(AST_Undefined, self));\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n\n        function return_value(stat) {\n            if (!stat) return make_node(AST_Undefined, self);\n            if (stat instanceof AST_Return) {\n                if (!stat.value) return make_node(AST_Undefined, self);\n                return stat.value.clone(true);\n            }\n            if (stat instanceof AST_SimpleStatement) {\n                return make_node(AST_UnaryPrefix, stat, {\n                    operator: \"void\",\n                    expression: stat.body.clone(true)\n                });\n            }\n        }\n\n        function can_flatten_body(stat) {\n            var body = fn.body instanceof AST_Node ? [ fn.body ] : fn.body;\n            var len = body.length;\n            if (compressor.option(\"inline\") < 3) {\n                return len == 1 && return_value(stat);\n            }\n            stat = null;\n            for (var i = 0; i < len; i++) {\n                var line = body[i];\n                if (line instanceof AST_Var) {\n                    if (stat && !all(line.definitions, function(var_def) {\n                        return !var_def.value;\n                    })) {\n                        return false;\n                    }\n                } else if (stat) {\n                    return false;\n                } else {\n                    stat = line;\n                }\n            }\n            return return_value(stat);\n        }\n\n        function can_inject_args(block_scoped, safe_to_inject) {\n            for (var i = 0, len = fn.argnames.length; i < len; i++) {\n                var arg = fn.argnames[i];\n                if (arg instanceof AST_DefaultAssign) {\n                    if (arg.left.__unused) continue;\n                    return false;\n                }\n                if (arg instanceof AST_Destructuring) return false;\n                if (arg instanceof AST_Expansion) {\n                    if (arg.expression.__unused) continue;\n                    return false;\n                }\n                if (arg.__unused) continue;\n                if (!safe_to_inject\n                    || block_scoped.has(arg.name)\n                    || identifier_atom.has(arg.name)\n                    || scope.var_names().has(arg.name)) {\n                    return false;\n                }\n                if (in_loop) in_loop.push(arg.definition());\n            }\n            return true;\n        }\n\n        function can_inject_args_values() {\n            var arg_vals_outer_refs = new Set();\n            var value_walker = new TreeWalker(function(node) {\n                if (node instanceof AST_Scope) {\n                    var scope_outer_refs = new Set();\n                    node.enclosed.forEach(function(def) {\n                        scope_outer_refs.add(def.name);\n                    });\n                    node.variables.forEach(function(name) {\n                        scope_outer_refs.delete(name);\n                    });\n                    scope_outer_refs.forEach(function(name) {\n                        arg_vals_outer_refs.add(name);\n                    });\n                    return true;\n                }\n                return false;\n            });\n            self.args.forEach(function(value) {\n                value.walk(value_walker);\n            });\n            if (arg_vals_outer_refs.size == 0) return true;\n            for (var i = 0, len = fn.argnames.length; i < len; i++) {\n                var arg = fn.argnames[i];\n                if (arg instanceof AST_DefaultAssign && arg.left.__unused) continue;\n                if (arg instanceof AST_Expansion && arg.expression.__unused) continue;\n                if (arg.__unused) continue;\n                if (arg_vals_outer_refs.has(arg.name)) return false;\n            }\n            for (var i = 0, len = fn.body.length; i < len; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                for (var j = stat.definitions.length; --j >= 0;) {\n                    var name = stat.definitions[j].name;\n                    if (name instanceof AST_Destructuring\n                        || arg_vals_outer_refs.has(name.name)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        function can_inject_vars(block_scoped, safe_to_inject) {\n            var len = fn.body.length;\n            for (var i = 0; i < len; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                if (!safe_to_inject) return false;\n                for (var j = stat.definitions.length; --j >= 0;) {\n                    var name = stat.definitions[j].name;\n                    if (name instanceof AST_Destructuring\n                        || block_scoped.has(name.name)\n                        || identifier_atom.has(name.name)\n                        || scope.var_names().has(name.name)) {\n                        return false;\n                    }\n                    if (in_loop) in_loop.push(name.definition());\n                }\n            }\n            return true;\n        }\n\n        function can_inject_symbols() {\n            var block_scoped = new Set();\n            do {\n                scope = compressor.parent(++level);\n                if (scope.is_block_scope() && !(compressor.parent(level - 1) instanceof AST_Scope)) {\n                    if (scope.block_scope) {\n                        // TODO this is sometimes undefined during compression.\n                        // But it should always have a value!\n                        scope.block_scope.variables.forEach(function (variable) {\n                            block_scoped.add(variable.name);\n                        });\n                    }\n                }\n                if (scope instanceof AST_Catch) {\n                    if (scope.argname) {\n                        block_scoped.add(scope.argname.name);\n                    }\n                } else if (scope instanceof AST_IterationStatement) {\n                    in_loop = [];\n                } else if (scope instanceof AST_SymbolRef) {\n                    if (scope.fixed_value() instanceof AST_Scope) return false;\n                }\n            } while (!(scope instanceof AST_Scope) || scope instanceof AST_Arrow);\n            var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n            var inline = compressor.option(\"inline\");\n            if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n            if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n            if (!can_inject_args_values()) return false;\n            return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n        }\n\n        function append_var(decls, expressions, name, value) {\n            var def = name.definition();\n            scope.variables.set(name.name, def);\n            scope.enclosed.push(def);\n            if (!scope.var_names().has(name.name)) {\n                scope.var_names().add(name.name);\n                decls.push(make_node(AST_VarDef, name, {\n                    name: name,\n                    value: null\n                }));\n            }\n            var sym = make_node(AST_SymbolRef, name, name);\n            def.references.push(sym);\n            if (value) expressions.push(make_node(AST_Assign, self, {\n                operator: \"=\",\n                left: sym,\n                right: value.clone()\n            }));\n        }\n\n        function flatten_args(decls, expressions) {\n            var len = fn.argnames.length;\n            for (var i = self.args.length; --i >= len;) {\n                expressions.push(self.args[i]);\n            }\n            for (i = len; --i >= 0;) {\n                var name = fn.argnames[i];\n                var value = self.args[i];\n                if (name.__unused || !name.name || scope.var_names().has(name.name)) {\n                    if (value) expressions.push(value);\n                } else {\n                    var symbol = make_node(AST_SymbolVar, name, name);\n                    name.definition().orig.push(symbol);\n                    if (!value && in_loop) value = make_node(AST_Undefined, self);\n                    append_var(decls, expressions, symbol, value);\n                }\n            }\n            decls.reverse();\n            expressions.reverse();\n        }\n\n        function flatten_vars(decls, expressions) {\n            var pos = expressions.length;\n            for (var i = 0, lines = fn.body.length; i < lines; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n                    var var_def = stat.definitions[j];\n                    var name = var_def.name;\n                    append_var(decls, expressions, name, var_def.value);\n                    if (in_loop && all(fn.argnames, function(argname) {\n                        return argname.name != name.name;\n                    })) {\n                        var def = fn.variables.get(name.name);\n                        var sym = make_node(AST_SymbolRef, name, name);\n                        def.references.push(sym);\n                        expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n                            operator: \"=\",\n                            left: sym,\n                            right: make_node(AST_Undefined, name)\n                        }));\n                    }\n                }\n            }\n        }\n\n        function flatten_fn() {\n            var decls = [];\n            var expressions = [];\n            flatten_args(decls, expressions);\n            flatten_vars(decls, expressions);\n            expressions.push(value);\n            if (decls.length) {\n                i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n                scope.body.splice(i, 0, make_node(AST_Var, fn, {\n                    definitions: decls\n                }));\n            }\n            return expressions;\n        }\n    });\n\n    def_optimize(AST_New, function(self, compressor) {\n        if (\n            compressor.option(\"unsafe\") &&\n            is_undeclared_ref(self.expression) &&\n            [\"Object\", \"RegExp\", \"Function\", \"Error\", \"Array\"].includes(self.expression.name)\n        ) return make_node(AST_Call, self, self).transform(compressor);\n        return self;\n    });\n\n    def_optimize(AST_Sequence, function(self, compressor) {\n        if (!compressor.option(\"side_effects\")) return self;\n        var expressions = [];\n        filter_for_side_effects();\n        var end = expressions.length - 1;\n        trim_right_for_undefined();\n        if (end == 0) {\n            self = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);\n            if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n            return self;\n        }\n        self.expressions = expressions;\n        return self;\n\n        function filter_for_side_effects() {\n            var first = first_in_statement(compressor);\n            var last = self.expressions.length - 1;\n            self.expressions.forEach(function(expr, index) {\n                if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n                if (expr) {\n                    merge_sequence(expressions, expr);\n                    first = false;\n                }\n            });\n        }\n\n        function trim_right_for_undefined() {\n            while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n            if (end < expressions.length - 1) {\n                expressions[end] = make_node(AST_UnaryPrefix, self, {\n                    operator   : \"void\",\n                    expression : expressions[end]\n                });\n                expressions.length = end + 1;\n            }\n        }\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Sequence) {\n                var x = this.expression.expressions.slice();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n        return this;\n    });\n\n    def_optimize(AST_UnaryPostfix, function(self, compressor) {\n        return self.lift_sequences(compressor);\n    });\n\n    def_optimize(AST_UnaryPrefix, function(self, compressor) {\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || is_identifier_atom(e))) {\n            if (e instanceof AST_Sequence) {\n                e = e.expressions.slice();\n                e.push(make_node(AST_True, self));\n                return make_sequence(self, e).optimize(compressor);\n            }\n            return make_sequence(self, [ e, make_node(AST_True, self) ]).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                    e,\n                    make_node(AST_True, self)\n                ])).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Sequence) {\n                var x = this.left.expressions.slice();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var x = this.right.expressions;\n                var last = x.length - 1;\n                for (var i = 0; i < last; i++) {\n                    if (!assign && x[i].has_side_effects(compressor)) break;\n                }\n                if (i == last) {\n                    x = x.slice();\n                    var e = this.clone();\n                    e.right = x.pop();\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                } else if (i > 0) {\n                    var e = this.clone();\n                    e.right = make_sequence(this.right, x.slice(i));\n                    x = x.slice(0, i);\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n    function is_object(node) {\n        return node instanceof AST_Array\n            || node instanceof AST_Lambda\n            || node instanceof AST_Object\n            || node instanceof AST_Class;\n    }\n\n    def_optimize(AST_Binary, function(self, compressor) {\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators.has(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            var is_strict_comparison = true;\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean()) ||\n                self.left.equivalent_to(self.right)) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // void 0 == x => null == x\n            if (!is_strict_comparison && is_undefined(self.left, compressor)) {\n                self.left = make_node(AST_Null, self.left);\n            } else if (compressor.option(\"typeofs\")\n                // \"undefined\" == typeof x => undefined === x\n                && self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)\n                    : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            } else if (self.left instanceof AST_SymbolRef\n                // obj !== obj => false\n                && self.right instanceof AST_SymbolRef\n                && self.left.definition() === self.right.definition()\n                && is_object(self.left.fixed_value())) {\n                return make_node(self.operator[0] == \"=\" ? AST_True : AST_False, self);\n            }\n            break;\n          case \"&&\":\n          case \"||\":\n            var lhs = self.left;\n            if (lhs.operator == self.operator) {\n                lhs = lhs.right;\n            }\n            if (lhs instanceof AST_Binary\n                && lhs.operator == (self.operator == \"&&\" ? \"!==\" : \"===\")\n                && self.right instanceof AST_Binary\n                && lhs.operator == self.right.operator\n                && (is_undefined(lhs.left, compressor) && self.right.left instanceof AST_Null\n                    || lhs.left instanceof AST_Null && is_undefined(self.right.left, compressor))\n                && !lhs.right.has_side_effects(compressor)\n                && lhs.right.equivalent_to(self.right.right)) {\n                var combined = make_node(AST_Binary, self, {\n                    operator: lhs.operator.slice(0, -1),\n                    left: make_node(AST_Null, self),\n                    right: lhs.right\n                });\n                if (lhs !== self.left) {\n                    combined = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.left.left,\n                        right: combined\n                    });\n                }\n                return combined;\n            }\n            break;\n        }\n        if (self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.right,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.left,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_False, self)\n                        ]).optimize(compressor);\n                    } else self.falsy = true;\n                } else if (!(rr instanceof AST_Node)) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"&&\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free && [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                // x || false && y ---> x ? y : false\n                if (self.left.operator == \"||\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (!lr) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.right,\n                        alternative: self.left.right\n                    }).optimize(compressor);\n                }\n                break;\n              case \"||\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"||\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free || [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                } else if (!(rr instanceof AST_Node)) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_True, self)\n                        ]).optimize(compressor);\n                    } else self.truthy = true;\n                }\n                if (self.left.operator == \"&&\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (lr && !(lr instanceof AST_Node)) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.left.right,\n                        alternative: self.right\n                    }).optimize(compressor);\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (lazy_op.has(self.operator)\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor)))))\n        ) {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_SymbolExport, function(self, compressor) {\n        return self;\n    });\n\n    function recursive_ref(compressor, def) {\n        var node;\n        for (var i = 0; node = compressor.parent(i); i++) {\n            if (node instanceof AST_Lambda) {\n                var name = node.name;\n                if (name && name.definition() === def) break;\n            }\n        }\n        return node;\n    }\n\n    function within_array_or_object_literal(compressor) {\n        var node, level = 0;\n        while (node = compressor.parent(level++)) {\n            if (node instanceof AST_Statement) return false;\n            if (node instanceof AST_Array\n                || node instanceof AST_ObjectKeyVal\n                || node instanceof AST_Object) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    def_optimize(AST_SymbolRef, function(self, compressor) {\n        if (!compressor.option(\"ie8\")\n            && is_undeclared_ref(self)\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        var parent = compressor.parent();\n        if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n            var d = self.definition();\n            if (compressor.top_retain && d.global && compressor.top_retain(d)) {\n                d.fixed = false;\n                d.should_replace = false;\n                d.single_use = false;\n                return self;\n            }\n            var fixed = self.fixed_value();\n            var single_use = d.single_use\n                && !(parent instanceof AST_Call && parent.is_expr_pure(compressor));\n            if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n                if (retain_top_func(fixed, compressor)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope\n                    && (!compressor.option(\"reduce_funcs\") && fixed instanceof AST_Lambda\n                        || d.escaped == 1\n                        || fixed.inlined\n                        || within_array_or_object_literal(compressor))) {\n                    single_use = false;\n                } else if (recursive_ref(compressor, d)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope || d.orig[0] instanceof AST_SymbolFunarg) {\n                    single_use = fixed.is_constant_expression(self.scope);\n                    if (single_use == \"f\") {\n                        var scope = self.scope;\n                        do {\n                            if (scope instanceof AST_Defun || is_func_expr(scope)) {\n                                scope.inlined = true;\n                            }\n                        } while (scope = scope.parent_scope);\n                    }\n                }\n            }\n            if (single_use && fixed) {\n                if (fixed instanceof AST_DefClass) {\n                    fixed = make_node(AST_ClassExpression, fixed, fixed);\n                }\n                if (fixed instanceof AST_Defun) {\n                    fixed._squeezed = true;\n                    fixed = make_node(AST_Function, fixed, fixed);\n                }\n                var value;\n                if (d.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n                    value = fixed.clone(true);\n                    var defun_def = value.name.definition();\n                    var lambda_def = value.variables.get(value.name.name);\n                    var name = lambda_def && lambda_def.orig[0];\n                    if (!(name instanceof AST_SymbolLambda)) {\n                        name = make_node(AST_SymbolLambda, value.name, value.name);\n                        name.scope = value;\n                        value.name = name;\n                        lambda_def = value.def_function(name);\n                    }\n                    value.walk(new TreeWalker(function(node) {\n                        if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n                            node.thedef = lambda_def;\n                            lambda_def.references.push(node);\n                        }\n                    }));\n                } else {\n                    value = fixed.optimize(compressor);\n                    if (value === fixed) value = fixed.clone(true);\n                }\n                return value;\n            }\n            if (fixed && d.should_replace === undefined) {\n                var init;\n                if (fixed instanceof AST_This) {\n                    if (!(d.orig[0] instanceof AST_SymbolFunarg)\n                        && all(d.references, function(ref) {\n                            return d.scope === ref.scope;\n                        })) {\n                        init = fixed;\n                    }\n                } else {\n                    var ev = fixed.evaluate(compressor);\n                    if (ev !== fixed && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))) {\n                        init = make_node_from_constant(ev, fixed);\n                    }\n                }\n                if (init) {\n                    var value_length = init.optimize(compressor).print_to_string().length;\n                    var fn;\n                    if (has_symbol_ref(fixed)) {\n                        fn = function() {\n                            var result = init.optimize(compressor);\n                            return result === init ? result.clone(true) : result;\n                        };\n                    } else {\n                        value_length = Math.min(value_length, fixed.print_to_string().length);\n                        fn = function() {\n                            var result = best_of_expression(init.optimize(compressor), fixed);\n                            return result === init || result === fixed ? result.clone(true) : result;\n                        };\n                    }\n                    var name_length = d.name.length;\n                    var overhead = 0;\n                    if (compressor.option(\"unused\") && !compressor.exposed(d)) {\n                        overhead = (name_length + 2 + value_length) / (d.references.length - d.assignments);\n                    }\n                    d.should_replace = value_length <= name_length + overhead ? fn : false;\n                } else {\n                    d.should_replace = false;\n                }\n            }\n            if (d.should_replace) {\n                return d.should_replace();\n            }\n        }\n        return self;\n\n        function has_symbol_ref(value) {\n            var found;\n            value.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolRef) found = true;\n                if (found) return true;\n            }));\n            return found;\n        }\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    def_optimize(AST_Undefined, function(self, compressor) {\n        if (compressor.option(\"unsafe_undefined\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_Infinity, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_NaN, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    function is_reachable(self, defs) {\n        var reachable = false;\n        var find_ref = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_SymbolRef && member(node.definition(), defs)) {\n                return reachable = true;\n            }\n        });\n        var scan_scope = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_Scope && node !== self) {\n                var parent = scan_scope.parent();\n                if (parent instanceof AST_Call && parent.expression === node) return;\n                node.walk(find_ref);\n                return true;\n            }\n        });\n        self.walk(scan_scope);\n        return reachable;\n    }\n\n    const ASSIGN_OPS = makePredicate(\"+ - / * % >> << >>> | ^ &\");\n    const ASSIGN_OPS_COMMUTATIVE = makePredicate(\"* | ^ &\");\n    def_optimize(AST_Assign, function(self, compressor) {\n        var def;\n        if (compressor.option(\"dead_code\")\n            && self.left instanceof AST_SymbolRef\n            && (def = self.left.definition()).scope === compressor.find_parent(AST_Lambda)) {\n            var level = 0, node, parent = self;\n            do {\n                node = parent;\n                parent = compressor.parent(level++);\n                if (parent instanceof AST_Exit) {\n                    if (in_try(level, parent)) break;\n                    if (is_reachable(def.scope, [ def ])) break;\n                    if (self.operator == \"=\") return self.right;\n                    def.fixed = false;\n                    return make_node(AST_Binary, self, {\n                        operator: self.operator.slice(0, -1),\n                        left: self.left,\n                        right: self.right\n                    }).optimize(compressor);\n                }\n            } while (parent instanceof AST_Binary && parent.right === node\n                || parent instanceof AST_Sequence && parent.tail_node() === node);\n        }\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && ASSIGN_OPS.has(self.right.operator)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            } else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && ASSIGN_OPS_COMMUTATIVE.has(self.right.operator)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n\n        function in_try(level, node) {\n            var right = self.right;\n            self.right = make_node(AST_Null, right);\n            var may_throw = node.may_throw(compressor);\n            self.right = right;\n            var scope = self.left.definition().scope;\n            var parent;\n            while ((parent = compressor.parent(level++)) !== scope) {\n                if (parent instanceof AST_Try) {\n                    if (parent.bfinally) return true;\n                    if (may_throw && parent.bcatch) return true;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_DefaultAssign, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")) {\n            return self;\n        }\n        var evaluateRight = self.right.evaluate(compressor);\n\n        // `[x = undefined] = foo` ---> `[x] = foo`\n        if (evaluateRight === undefined) {\n            self = self.left;\n        } else if (evaluateRight !== self.right) {\n            evaluateRight = make_node_from_constant(evaluateRight, self.right);\n            self.right = best_of_expression(evaluateRight, self.right);\n        }\n\n        return self;\n    });\n\n    def_optimize(AST_Conditional, function(self, compressor) {\n        if (!compressor.option(\"conditionals\")) return self;\n        // This looks like lift_sequences(), should probably be under \"sequences\"\n        if (self.condition instanceof AST_Sequence) {\n            var expressions = self.condition.expressions.slice();\n            self.condition = expressions.pop();\n            expressions.push(self);\n            return make_sequence(self, expressions);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        var arg_index;\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length > 0\n            && consequent.args.length == alternative.args.length\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !self.condition.has_side_effects(compressor)\n            && !consequent.expression.has_side_effects(compressor)\n            && typeof (arg_index = single_arg_diff()) == \"number\") {\n            var node = consequent.clone();\n            node.args[arg_index] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[arg_index],\n                alternative: alternative.args[arg_index]\n            });\n            return node;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_sequence(self, [\n                self.condition,\n                consequent\n            ]).optimize(compressor);\n        }\n        // x ? y || z : z --> x && y || z\n        if (consequent instanceof AST_Binary\n            && consequent.operator == \"||\"\n            && consequent.right.equivalent_to(alternative)) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: make_node(AST_Binary, self, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: consequent.left\n                }),\n                right: alternative\n            }).optimize(compressor);\n        }\n        var in_bool = compressor.in_boolean_context();\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || in_bool\n                    && node instanceof AST_Constant\n                    && node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.getValue());\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || in_bool\n                    && node instanceof AST_Constant\n                    && !node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && node.expression.getValue());\n        }\n\n        function single_arg_diff() {\n            var a = consequent.args;\n            var b = alternative.args;\n            for (var i = 0, len = a.length; i < len; i++) {\n                if (a[i] instanceof AST_Expansion) return;\n                if (!a[i].equivalent_to(b[i])) {\n                    if (b[i] instanceof AST_Expansion) return;\n                    for (var j = i + 1; j < len; j++) {\n                        if (a[j] instanceof AST_Expansion) return;\n                        if (!a[j].equivalent_to(b[j])) return;\n                    }\n                    return i;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Boolean, function(self, compressor) {\n        if (compressor.in_boolean_context()) return make_node(AST_Number, self, {\n            value: +self.value\n        });\n        var p = compressor.parent();\n        if (compressor.option(\"booleans_as_integers\")) {\n            if (p instanceof AST_Binary && (p.operator == \"===\" || p.operator == \"!==\")) {\n                p.operator = p.operator.replace(/=$/, \"\");\n            }\n            return make_node(AST_Number, self, {\n                value: +self.value\n            });\n        }\n        if (compressor.option(\"booleans\")) {\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    function safe_to_flatten(value, compressor) {\n        if (value instanceof AST_SymbolRef) {\n            value = value.fixed_value();\n        }\n        if (!value) return false;\n        return !(value instanceof AST_Lambda || value instanceof AST_Class)\n            || compressor.parent() instanceof AST_New\n            || !value.contains_this();\n    }\n\n    def_optimize(AST_Sub, function(self, compressor) {\n        var expr = self.expression;\n        var prop = self.property;\n        if (compressor.option(\"properties\")) {\n            var key = prop.evaluate(compressor);\n            if (key !== prop) {\n                if (typeof key == \"string\") {\n                    if (key == \"undefined\") {\n                        key = undefined;\n                    } else {\n                        var value = parseFloat(key);\n                        if (value.toString() == key) {\n                            key = value;\n                        }\n                    }\n                }\n                prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));\n                var property = \"\" + key;\n                if (is_identifier_string(property)\n                    && property.length <= prop.print_to_string().length + 1) {\n                    return make_node(AST_Dot, self, {\n                        expression: expr,\n                        property: property,\n                        quote: prop.quote,\n                    }).optimize(compressor);\n                }\n            }\n        }\n        var fn;\n        OPT_ARGUMENTS: if (compressor.option(\"arguments\")\n            && expr instanceof AST_SymbolRef\n            && expr.name == \"arguments\"\n            && expr.definition().orig.length == 1\n            && (fn = expr.scope) instanceof AST_Lambda\n            && fn.uses_arguments\n            && !(fn instanceof AST_Arrow)\n            && prop instanceof AST_Number) {\n            var index = prop.getValue();\n            var params = new Set();\n            var argnames = fn.argnames;\n            for (var n = 0; n < argnames.length; n++) {\n                if (!(argnames[n] instanceof AST_SymbolFunarg)) {\n                    break OPT_ARGUMENTS; // destructuring parameter - bail\n                }\n                var param = argnames[n].name;\n                if (params.has(param)) {\n                    break OPT_ARGUMENTS; // duplicate parameter - bail\n                }\n                params.add(param);\n            }\n            var argname = fn.argnames[index];\n            if (argname && compressor.has_directive(\"use strict\")) {\n                var def = argname.definition();\n                if (!compressor.option(\"reduce_vars\") || def.assignments || def.orig.length > 1) {\n                    argname = null;\n                }\n            } else if (!argname && !compressor.option(\"keep_fargs\") && index < fn.argnames.length + 5) {\n                while (index >= fn.argnames.length) {\n                    argname = make_node(AST_SymbolFunarg, fn, {\n                        name: fn.make_var_name(\"argument_\" + fn.argnames.length),\n                        scope: fn\n                    });\n                    fn.argnames.push(argname);\n                    fn.enclosed.push(fn.def_variable(argname));\n                }\n            }\n            if (argname) {\n                var sym = make_node(AST_SymbolRef, self, argname);\n                sym.reference({});\n                delete argname.__unused;\n                return sym;\n            }\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (key !== prop) {\n            var sub = self.flatten_object(property, compressor);\n            if (sub) {\n                expr = self.expression = sub.expression;\n                prop = self.property = sub.property;\n            }\n        }\n        if (compressor.option(\"properties\") && compressor.option(\"side_effects\")\n            && prop instanceof AST_Number && expr instanceof AST_Array) {\n            var index = prop.getValue();\n            var elements = expr.elements;\n            var retValue = elements[index];\n            FLATTEN: if (safe_to_flatten(retValue, compressor)) {\n                var flatten = true;\n                var values = [];\n                for (var i = elements.length; --i > index;) {\n                    var value = elements[i].drop_side_effect_free(compressor);\n                    if (value) {\n                        values.unshift(value);\n                        if (flatten && value.has_side_effects(compressor)) flatten = false;\n                    }\n                }\n                if (retValue instanceof AST_Expansion) break FLATTEN;\n                retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;\n                if (!flatten) values.unshift(retValue);\n                while (--i >= 0) {\n                    var value = elements[i];\n                    if (value instanceof AST_Expansion) break FLATTEN;\n                    value = value.drop_side_effect_free(compressor);\n                    if (value) values.unshift(value);\n                    else index--;\n                }\n                if (flatten) {\n                    values.push(retValue);\n                    return make_sequence(self, values).optimize(compressor);\n                } else return make_node(AST_Sub, self, {\n                    expression: make_node(AST_Array, expr, {\n                        elements: values\n                    }),\n                    property: make_node(AST_Number, prop, {\n                        value: index\n                    })\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    AST_Lambda.DEFMETHOD(\"contains_this\", function() {\n        var result;\n        var self = this;\n        self.walk(new TreeWalker(function(node) {\n            if (result) return true;\n            if (node instanceof AST_This) return result = true;\n            if (node !== self && node instanceof AST_Scope && !(node instanceof AST_Arrow)) return true;\n        }));\n        return result;\n    });\n\n    AST_PropAccess.DEFMETHOD(\"flatten_object\", function(key, compressor) {\n        if (!compressor.option(\"properties\")) return;\n        var arrows = compressor.option(\"unsafe_arrows\") && compressor.option(\"ecma\") >= 6;\n        var expr = this.expression;\n        if (expr instanceof AST_Object) {\n            var props = expr.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (\"\" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {\n                    if (!all(props, function(prop) {\n                        return prop instanceof AST_ObjectKeyVal\n                            || arrows && prop instanceof AST_ConciseMethod && !prop.is_generator;\n                    })) break;\n                    if (!safe_to_flatten(prop.value, compressor)) break;\n                    return make_node(AST_Sub, this, {\n                        expression: make_node(AST_Array, expr, {\n                            elements: props.map(function(prop) {\n                                var v = prop.value;\n                                if (v instanceof AST_Accessor) v = make_node(AST_Function, v, v);\n                                var k = prop.key;\n                                if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {\n                                    return make_sequence(prop, [ k, v ]);\n                                }\n                                return v;\n                            })\n                        }),\n                        property: make_node(AST_Number, this, {\n                            value: i\n                        })\n                    });\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Dot, function(self, compressor) {\n        if (self.property == \"arguments\" || self.property == \"caller\") {\n            compressor.warn(\"Function.prototype.{prop} not supported [{file}:{line},{col}]\", {\n                prop: self.property,\n                file: self.start.file,\n                line: self.start.line,\n                col: self.start.col\n            });\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Function\":\n                self.expression = make_node(AST_Function, self.expression, {\n                    argnames: [],\n                    body: []\n                });\n                break;\n              case \"Number\":\n                self.expression = make_node(AST_Number, self.expression, {\n                    value: 0\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"RegExp\":\n                self.expression = make_node(AST_RegExp, self.expression, {\n                    value: /t/\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        var sub = self.flatten_object(self.property, compressor);\n        if (sub) return sub.optimize(compressor);\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_sequence(self, [\n                self,\n                make_node(AST_True, self)\n            ]).optimize(compressor));\n        }\n        return self;\n    }\n\n    function inline_array_like_spread(self, compressor, elements) {\n        for (var i = 0; i < elements.length; i++) {\n            var el = elements[i];\n            if (el instanceof AST_Expansion) {\n                var expr = el.expression;\n                if ( expr instanceof AST_Array) {\n                    elements.splice.apply(elements, [i, 1].concat(expr.elements));\n                    // Step back one, as the element at i is now new.\n                    i--;\n                }\n                // In array-like spread, spreading a non-iterable value is TypeError.\n                // We therefore can’t optimize anything else, unlike with object spread.\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_Array, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        return inline_array_like_spread(self, compressor, self.elements);\n    });\n\n    def_optimize(AST_Object, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        var props = self.properties;\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            if (prop instanceof AST_Expansion) {\n                var expr = prop.expression;\n                if (expr instanceof AST_Object) {\n                    props.splice.apply(props, [i, 1].concat(prop.expression.properties));\n                    // Step back one, as the property at i is now new.\n                    i--;\n                } else if (expr instanceof AST_Constant\n                    && !(expr instanceof AST_String)) {\n                    // Unlike array-like spread, in object spread, spreading a\n                    // non-iterable value silently does nothing; it is thus safe\n                    // to remove. AST_String is the only iterable AST_Constant.\n                    props.splice(i, 1);\n                }\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_RegExp, literals_in_boolean_context);\n\n    def_optimize(AST_Return, function(self, compressor) {\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_Arrow, function(self, compressor) {\n        if (!(self.body instanceof AST_Node)) {\n            self = opt_AST_Lambda(self, compressor);\n        }\n        if (compressor.option(\"arrows\")\n            && self.body.length == 1\n            && self.body[0] instanceof AST_Return) {\n            var value = self.body[0].value;\n            self.body = value ? value : [];\n        }\n        return self;\n    });\n\n    def_optimize(AST_Function, function(self, compressor) {\n        self = opt_AST_Lambda(self, compressor);\n        if (compressor.option(\"unsafe_arrows\")\n            && compressor.option(\"ecma\") >= 6\n            && !self.name\n            && !self.is_generator\n            && !self.uses_arguments\n            && !self.pinned()) {\n            var has_special_symbol = false;\n            self.walk(new TreeWalker(function(node) {\n                if (has_special_symbol) return true;\n                if (node instanceof AST_This) {\n                    has_special_symbol = true;\n                    return true;\n                }\n            }));\n            if (!has_special_symbol) return make_node(AST_Arrow, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Class, function(self, compressor) {\n        // HACK to avoid compress failure.\n        // AST_Class is not really an AST_Scope/AST_Block as it lacks a body.\n        return self;\n    });\n\n    def_optimize(AST_Yield, function(self, compressor) {\n        if (self.expression && !self.is_star && is_undefined(self.expression, compressor)) {\n            self.expression = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_TemplateString, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")\n        || compressor.parent() instanceof AST_PrefixedTemplateString)\n            return self;\n\n        var segments = [];\n        for (var i = 0; i < self.segments.length; i++) {\n            var segment = self.segments[i];\n            if (segment instanceof AST_Node) {\n                var result = segment.evaluate(compressor);\n                // Evaluate to constant value\n                // Constant value shorter than ${segment}\n                if (result !== segment && (result + \"\").length <= segment.print_to_string().length + \"${}\".length) {\n                    // There should always be a previous and next segment if segment is a node\n                    segments[segments.length - 1].value = segments[segments.length - 1].value + result + self.segments[++i].value;\n                    continue;\n                }\n            }\n            segments.push(segment);\n        }\n        self.segments = segments;\n\n        return segments.length == 1 ? make_node(AST_String, self, segments[0]) : self;\n    });\n\n    def_optimize(AST_PrefixedTemplateString, function(self, compressor) {\n        return self;\n    });\n\n    // [\"p\"]:1 ---> p:1\n    // [42]:1 ---> 42:1\n    function lift_key(self, compressor) {\n        if (!compressor.option(\"computed_props\")) return self;\n        // save a comparison in the typical case\n        if (!(self.key instanceof AST_Constant)) return self;\n        // whitelist acceptable props as not all AST_Constants are true constants\n        if (self.key instanceof AST_String || self.key instanceof AST_Number) {\n            if (self.key.value === \"__proto__\") return self;\n            if (self.key.value == \"constructor\"\n                && compressor.parent() instanceof AST_Class) return self;\n            if (self instanceof AST_ObjectKeyVal) {\n                self.key = self.key.value;\n            } else {\n                self.key = make_node(AST_SymbolMethod, self.key, {\n                    name: self.key.value\n                });\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_ObjectProperty, lift_key);\n\n    def_optimize(AST_ConciseMethod, function(self, compressor) {\n        lift_key(self, compressor);\n        // p(){return x;} ---> p:()=>x\n        if (compressor.option(\"arrows\")\n            && compressor.parent() instanceof AST_Object\n            && !self.is_generator\n            && !self.value.uses_arguments\n            && !self.value.pinned()\n            && self.value.body.length == 1\n            && self.value.body[0] instanceof AST_Return\n            && self.value.body[0].value\n            && !self.value.contains_this()) {\n            var arrow = make_node(AST_Arrow, self.value, self.value);\n            arrow.async = self.async;\n            arrow.is_generator = self.is_generator;\n            return make_node(AST_ObjectKeyVal, self, {\n                key: self.key instanceof AST_SymbolMethod ? self.key.name : self.key,\n                value: arrow,\n                quote: self.quote,\n            });\n        }\n        return self;\n    });\n\n    def_optimize(AST_ObjectKeyVal, function(self, compressor) {\n        lift_key(self, compressor);\n        // p:function(){} ---> p(){}\n        // p:function*(){} ---> *p(){}\n        // p:async function(){} ---> async p(){}\n        // p:()=>{} ---> p(){}\n        // p:async()=>{} ---> async p(){}\n        var unsafe_methods = compressor.option(\"unsafe_methods\");\n        if (unsafe_methods\n            && compressor.option(\"ecma\") >= 6\n            && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self.key + \"\"))) {\n            var key = self.key;\n            var value = self.value;\n            var is_arrow_with_block = value instanceof AST_Arrow\n                && Array.isArray(value.body)\n                && !value.contains_this();\n            if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {\n                return make_node(AST_ConciseMethod, self, {\n                    async: value.async,\n                    is_generator: value.is_generator,\n                    key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self, {\n                        name: key,\n                    }),\n                    value: make_node(AST_Accessor, value, value),\n                    quote: self.quote,\n                });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_Destructuring, function(self, compressor) {\n        if (compressor.option(\"pure_getters\") == true\n            && compressor.option(\"unused\")\n            && !self.is_array\n            && Array.isArray(self.names)\n            && !is_destructuring_export_decl(compressor)) {\n            var keep = [];\n            for (var i = 0; i < self.names.length; i++) {\n                var elem = self.names[i];\n                if (!(elem instanceof AST_ObjectKeyVal\n                    && typeof elem.key == \"string\"\n                    && elem.value instanceof AST_SymbolDeclaration\n                    && !should_retain(compressor, elem.value.definition()))) {\n                    keep.push(elem);\n                }\n            }\n            if (keep.length != self.names.length) {\n                self.names = keep;\n            }\n        }\n        return self;\n\n        function is_destructuring_export_decl(compressor) {\n            var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];\n            for (var a = 0, p = 0, len = ancestors.length; a < len; p++) {\n                var parent = compressor.parent(p);\n                if (!parent) return false;\n                if (a === 0 && parent.TYPE == \"Destructuring\") continue;\n                if (!ancestors[a].test(parent.TYPE)) {\n                    return false;\n                }\n                a++;\n            }\n            return true;\n        }\n\n        function should_retain(compressor, def) {\n            if (def.references.length) return true;\n            if (!def.global) return false;\n            if (compressor.toplevel.vars) {\n                 if (compressor.top_retain) {\n                     return compressor.top_retain(def);\n                 }\n                 return false;\n            }\n            return true;\n        }\n    });\n})();\n\nexport {\n    Compressor,\n};\n","export var domprops = [\n    \"$&\",\n    \"$'\",\n    \"$*\",\n    \"$+\",\n    \"$1\",\n    \"$2\",\n    \"$3\",\n    \"$4\",\n    \"$5\",\n    \"$6\",\n    \"$7\",\n    \"$8\",\n    \"$9\",\n    \"$_\",\n    \"$`\",\n    \"$input\",\n    \"@@iterator\",\n    \"ABORT_ERR\",\n    \"ACTIVE\",\n    \"ACTIVE_ATTRIBUTES\",\n    \"ACTIVE_TEXTURE\",\n    \"ACTIVE_UNIFORMS\",\n    \"ADDITION\",\n    \"ALIASED_LINE_WIDTH_RANGE\",\n    \"ALIASED_POINT_SIZE_RANGE\",\n    \"ALLOW_KEYBOARD_INPUT\",\n    \"ALLPASS\",\n    \"ALPHA\",\n    \"ALPHA_BITS\",\n    \"ALT_MASK\",\n    \"ALWAYS\",\n    \"ANY_TYPE\",\n    \"ANY_UNORDERED_NODE_TYPE\",\n    \"ARRAY_BUFFER\",\n    \"ARRAY_BUFFER_BINDING\",\n    \"ATTACHED_SHADERS\",\n    \"ATTRIBUTE_NODE\",\n    \"AT_TARGET\",\n    \"AddSearchProvider\",\n    \"AnalyserNode\",\n    \"AnimationEvent\",\n    \"AnonXMLHttpRequest\",\n    \"ApplicationCache\",\n    \"ApplicationCacheErrorEvent\",\n    \"Array\",\n    \"ArrayBuffer\",\n    \"Attr\",\n    \"Audio\",\n    \"AudioBuffer\",\n    \"AudioBufferSourceNode\",\n    \"AudioContext\",\n    \"AudioDestinationNode\",\n    \"AudioListener\",\n    \"AudioNode\",\n    \"AudioParam\",\n    \"AudioProcessingEvent\",\n    \"AudioStreamTrack\",\n    \"AutocompleteErrorEvent\",\n    \"BACK\",\n    \"BAD_BOUNDARYPOINTS_ERR\",\n    \"BANDPASS\",\n    \"BLEND\",\n    \"BLEND_COLOR\",\n    \"BLEND_DST_ALPHA\",\n    \"BLEND_DST_RGB\",\n    \"BLEND_EQUATION\",\n    \"BLEND_EQUATION_ALPHA\",\n    \"BLEND_EQUATION_RGB\",\n    \"BLEND_SRC_ALPHA\",\n    \"BLEND_SRC_RGB\",\n    \"BLUE_BITS\",\n    \"BLUR\",\n    \"BOOL\",\n    \"BOOLEAN_TYPE\",\n    \"BOOL_VEC2\",\n    \"BOOL_VEC3\",\n    \"BOOL_VEC4\",\n    \"BOTH\",\n    \"BROWSER_DEFAULT_WEBGL\",\n    \"BUBBLING_PHASE\",\n    \"BUFFER_SIZE\",\n    \"BUFFER_USAGE\",\n    \"BYTE\",\n    \"BYTES_PER_ELEMENT\",\n    \"BarProp\",\n    \"BaseHref\",\n    \"BatteryManager\",\n    \"BeforeLoadEvent\",\n    \"BeforeUnloadEvent\",\n    \"BiquadFilterNode\",\n    \"Blob\",\n    \"BlobEvent\",\n    \"Boolean\",\n    \"CAPTURING_PHASE\",\n    \"CCW\",\n    \"CDATASection\",\n    \"CDATA_SECTION_NODE\",\n    \"CHANGE\",\n    \"CHARSET_RULE\",\n    \"CHECKING\",\n    \"CLAMP_TO_EDGE\",\n    \"CLICK\",\n    \"CLOSED\",\n    \"CLOSING\",\n    \"COLOR_ATTACHMENT0\",\n    \"COLOR_BUFFER_BIT\",\n    \"COLOR_CLEAR_VALUE\",\n    \"COLOR_WRITEMASK\",\n    \"COMMENT_NODE\",\n    \"COMPILE_STATUS\",\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\n    \"COMPRESSED_TEXTURE_FORMATS\",\n    \"CONNECTING\",\n    \"CONSTANT_ALPHA\",\n    \"CONSTANT_COLOR\",\n    \"CONSTRAINT_ERR\",\n    \"CONTEXT_LOST_WEBGL\",\n    \"CONTROL_MASK\",\n    \"COUNTER_STYLE_RULE\",\n    \"CSS\",\n    \"CSS2Properties\",\n    \"CSSCharsetRule\",\n    \"CSSConditionRule\",\n    \"CSSCounterStyleRule\",\n    \"CSSFontFaceRule\",\n    \"CSSFontFeatureValuesRule\",\n    \"CSSGroupingRule\",\n    \"CSSImportRule\",\n    \"CSSKeyframeRule\",\n    \"CSSKeyframesRule\",\n    \"CSSMediaRule\",\n    \"CSSMozDocumentRule\",\n    \"CSSNameSpaceRule\",\n    \"CSSPageRule\",\n    \"CSSPrimitiveValue\",\n    \"CSSRule\",\n    \"CSSRuleList\",\n    \"CSSStyleDeclaration\",\n    \"CSSStyleRule\",\n    \"CSSStyleSheet\",\n    \"CSSSupportsRule\",\n    \"CSSUnknownRule\",\n    \"CSSValue\",\n    \"CSSValueList\",\n    \"CSSVariablesDeclaration\",\n    \"CSSVariablesRule\",\n    \"CSSViewportRule\",\n    \"CSS_ATTR\",\n    \"CSS_CM\",\n    \"CSS_COUNTER\",\n    \"CSS_CUSTOM\",\n    \"CSS_DEG\",\n    \"CSS_DIMENSION\",\n    \"CSS_EMS\",\n    \"CSS_EXS\",\n    \"CSS_FILTER_BLUR\",\n    \"CSS_FILTER_BRIGHTNESS\",\n    \"CSS_FILTER_CONTRAST\",\n    \"CSS_FILTER_CUSTOM\",\n    \"CSS_FILTER_DROP_SHADOW\",\n    \"CSS_FILTER_GRAYSCALE\",\n    \"CSS_FILTER_HUE_ROTATE\",\n    \"CSS_FILTER_INVERT\",\n    \"CSS_FILTER_OPACITY\",\n    \"CSS_FILTER_REFERENCE\",\n    \"CSS_FILTER_SATURATE\",\n    \"CSS_FILTER_SEPIA\",\n    \"CSS_GRAD\",\n    \"CSS_HZ\",\n    \"CSS_IDENT\",\n    \"CSS_IN\",\n    \"CSS_INHERIT\",\n    \"CSS_KHZ\",\n    \"CSS_MATRIX\",\n    \"CSS_MATRIX3D\",\n    \"CSS_MM\",\n    \"CSS_MS\",\n    \"CSS_NUMBER\",\n    \"CSS_PC\",\n    \"CSS_PERCENTAGE\",\n    \"CSS_PERSPECTIVE\",\n    \"CSS_PRIMITIVE_VALUE\",\n    \"CSS_PT\",\n    \"CSS_PX\",\n    \"CSS_RAD\",\n    \"CSS_RECT\",\n    \"CSS_RGBCOLOR\",\n    \"CSS_ROTATE\",\n    \"CSS_ROTATE3D\",\n    \"CSS_ROTATEX\",\n    \"CSS_ROTATEY\",\n    \"CSS_ROTATEZ\",\n    \"CSS_S\",\n    \"CSS_SCALE\",\n    \"CSS_SCALE3D\",\n    \"CSS_SCALEX\",\n    \"CSS_SCALEY\",\n    \"CSS_SCALEZ\",\n    \"CSS_SKEW\",\n    \"CSS_SKEWX\",\n    \"CSS_SKEWY\",\n    \"CSS_STRING\",\n    \"CSS_TRANSLATE\",\n    \"CSS_TRANSLATE3D\",\n    \"CSS_TRANSLATEX\",\n    \"CSS_TRANSLATEY\",\n    \"CSS_TRANSLATEZ\",\n    \"CSS_UNKNOWN\",\n    \"CSS_URI\",\n    \"CSS_VALUE_LIST\",\n    \"CSS_VH\",\n    \"CSS_VMAX\",\n    \"CSS_VMIN\",\n    \"CSS_VW\",\n    \"CULL_FACE\",\n    \"CULL_FACE_MODE\",\n    \"CURRENT_PROGRAM\",\n    \"CURRENT_VERTEX_ATTRIB\",\n    \"CUSTOM\",\n    \"CW\",\n    \"CanvasGradient\",\n    \"CanvasPattern\",\n    \"CanvasRenderingContext2D\",\n    \"CaretPosition\",\n    \"ChannelMergerNode\",\n    \"ChannelSplitterNode\",\n    \"CharacterData\",\n    \"ClientRect\",\n    \"ClientRectList\",\n    \"Clipboard\",\n    \"ClipboardEvent\",\n    \"CloseEvent\",\n    \"Collator\",\n    \"CommandEvent\",\n    \"Comment\",\n    \"CompositionEvent\",\n    \"Console\",\n    \"Controllers\",\n    \"ConvolverNode\",\n    \"Counter\",\n    \"Crypto\",\n    \"CryptoKey\",\n    \"CustomEvent\",\n    \"DATABASE_ERR\",\n    \"DATA_CLONE_ERR\",\n    \"DATA_ERR\",\n    \"DBLCLICK\",\n    \"DECR\",\n    \"DECR_WRAP\",\n    \"DELETE_STATUS\",\n    \"DEPTH_ATTACHMENT\",\n    \"DEPTH_BITS\",\n    \"DEPTH_BUFFER_BIT\",\n    \"DEPTH_CLEAR_VALUE\",\n    \"DEPTH_COMPONENT\",\n    \"DEPTH_COMPONENT16\",\n    \"DEPTH_FUNC\",\n    \"DEPTH_RANGE\",\n    \"DEPTH_STENCIL\",\n    \"DEPTH_STENCIL_ATTACHMENT\",\n    \"DEPTH_TEST\",\n    \"DEPTH_WRITEMASK\",\n    \"DIRECTION_DOWN\",\n    \"DIRECTION_LEFT\",\n    \"DIRECTION_RIGHT\",\n    \"DIRECTION_UP\",\n    \"DISABLED\",\n    \"DISPATCH_REQUEST_ERR\",\n    \"DITHER\",\n    \"DOCUMENT_FRAGMENT_NODE\",\n    \"DOCUMENT_NODE\",\n    \"DOCUMENT_POSITION_CONTAINED_BY\",\n    \"DOCUMENT_POSITION_CONTAINS\",\n    \"DOCUMENT_POSITION_DISCONNECTED\",\n    \"DOCUMENT_POSITION_FOLLOWING\",\n    \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\",\n    \"DOCUMENT_POSITION_PRECEDING\",\n    \"DOCUMENT_TYPE_NODE\",\n    \"DOMCursor\",\n    \"DOMError\",\n    \"DOMException\",\n    \"DOMImplementation\",\n    \"DOMImplementationLS\",\n    \"DOMMatrix\",\n    \"DOMMatrixReadOnly\",\n    \"DOMParser\",\n    \"DOMPoint\",\n    \"DOMPointReadOnly\",\n    \"DOMQuad\",\n    \"DOMRect\",\n    \"DOMRectList\",\n    \"DOMRectReadOnly\",\n    \"DOMRequest\",\n    \"DOMSTRING_SIZE_ERR\",\n    \"DOMSettableTokenList\",\n    \"DOMStringList\",\n    \"DOMStringMap\",\n    \"DOMTokenList\",\n    \"DOMTransactionEvent\",\n    \"DOM_DELTA_LINE\",\n    \"DOM_DELTA_PAGE\",\n    \"DOM_DELTA_PIXEL\",\n    \"DOM_INPUT_METHOD_DROP\",\n    \"DOM_INPUT_METHOD_HANDWRITING\",\n    \"DOM_INPUT_METHOD_IME\",\n    \"DOM_INPUT_METHOD_KEYBOARD\",\n    \"DOM_INPUT_METHOD_MULTIMODAL\",\n    \"DOM_INPUT_METHOD_OPTION\",\n    \"DOM_INPUT_METHOD_PASTE\",\n    \"DOM_INPUT_METHOD_SCRIPT\",\n    \"DOM_INPUT_METHOD_UNKNOWN\",\n    \"DOM_INPUT_METHOD_VOICE\",\n    \"DOM_KEY_LOCATION_JOYSTICK\",\n    \"DOM_KEY_LOCATION_LEFT\",\n    \"DOM_KEY_LOCATION_MOBILE\",\n    \"DOM_KEY_LOCATION_NUMPAD\",\n    \"DOM_KEY_LOCATION_RIGHT\",\n    \"DOM_KEY_LOCATION_STANDARD\",\n    \"DOM_VK_0\",\n    \"DOM_VK_1\",\n    \"DOM_VK_2\",\n    \"DOM_VK_3\",\n    \"DOM_VK_4\",\n    \"DOM_VK_5\",\n    \"DOM_VK_6\",\n    \"DOM_VK_7\",\n    \"DOM_VK_8\",\n    \"DOM_VK_9\",\n    \"DOM_VK_A\",\n    \"DOM_VK_ACCEPT\",\n    \"DOM_VK_ADD\",\n    \"DOM_VK_ALT\",\n    \"DOM_VK_ALTGR\",\n    \"DOM_VK_AMPERSAND\",\n    \"DOM_VK_ASTERISK\",\n    \"DOM_VK_AT\",\n    \"DOM_VK_ATTN\",\n    \"DOM_VK_B\",\n    \"DOM_VK_BACKSPACE\",\n    \"DOM_VK_BACK_QUOTE\",\n    \"DOM_VK_BACK_SLASH\",\n    \"DOM_VK_BACK_SPACE\",\n    \"DOM_VK_C\",\n    \"DOM_VK_CANCEL\",\n    \"DOM_VK_CAPS_LOCK\",\n    \"DOM_VK_CIRCUMFLEX\",\n    \"DOM_VK_CLEAR\",\n    \"DOM_VK_CLOSE_BRACKET\",\n    \"DOM_VK_CLOSE_CURLY_BRACKET\",\n    \"DOM_VK_CLOSE_PAREN\",\n    \"DOM_VK_COLON\",\n    \"DOM_VK_COMMA\",\n    \"DOM_VK_CONTEXT_MENU\",\n    \"DOM_VK_CONTROL\",\n    \"DOM_VK_CONVERT\",\n    \"DOM_VK_CRSEL\",\n    \"DOM_VK_CTRL\",\n    \"DOM_VK_D\",\n    \"DOM_VK_DECIMAL\",\n    \"DOM_VK_DELETE\",\n    \"DOM_VK_DIVIDE\",\n    \"DOM_VK_DOLLAR\",\n    \"DOM_VK_DOUBLE_QUOTE\",\n    \"DOM_VK_DOWN\",\n    \"DOM_VK_E\",\n    \"DOM_VK_EISU\",\n    \"DOM_VK_END\",\n    \"DOM_VK_ENTER\",\n    \"DOM_VK_EQUALS\",\n    \"DOM_VK_EREOF\",\n    \"DOM_VK_ESCAPE\",\n    \"DOM_VK_EXCLAMATION\",\n    \"DOM_VK_EXECUTE\",\n    \"DOM_VK_EXSEL\",\n    \"DOM_VK_F\",\n    \"DOM_VK_F1\",\n    \"DOM_VK_F10\",\n    \"DOM_VK_F11\",\n    \"DOM_VK_F12\",\n    \"DOM_VK_F13\",\n    \"DOM_VK_F14\",\n    \"DOM_VK_F15\",\n    \"DOM_VK_F16\",\n    \"DOM_VK_F17\",\n    \"DOM_VK_F18\",\n    \"DOM_VK_F19\",\n    \"DOM_VK_F2\",\n    \"DOM_VK_F20\",\n    \"DOM_VK_F21\",\n    \"DOM_VK_F22\",\n    \"DOM_VK_F23\",\n    \"DOM_VK_F24\",\n    \"DOM_VK_F25\",\n    \"DOM_VK_F26\",\n    \"DOM_VK_F27\",\n    \"DOM_VK_F28\",\n    \"DOM_VK_F29\",\n    \"DOM_VK_F3\",\n    \"DOM_VK_F30\",\n    \"DOM_VK_F31\",\n    \"DOM_VK_F32\",\n    \"DOM_VK_F33\",\n    \"DOM_VK_F34\",\n    \"DOM_VK_F35\",\n    \"DOM_VK_F36\",\n    \"DOM_VK_F4\",\n    \"DOM_VK_F5\",\n    \"DOM_VK_F6\",\n    \"DOM_VK_F7\",\n    \"DOM_VK_F8\",\n    \"DOM_VK_F9\",\n    \"DOM_VK_FINAL\",\n    \"DOM_VK_FRONT\",\n    \"DOM_VK_G\",\n    \"DOM_VK_GREATER_THAN\",\n    \"DOM_VK_H\",\n    \"DOM_VK_HANGUL\",\n    \"DOM_VK_HANJA\",\n    \"DOM_VK_HASH\",\n    \"DOM_VK_HELP\",\n    \"DOM_VK_HK_TOGGLE\",\n    \"DOM_VK_HOME\",\n    \"DOM_VK_HYPHEN_MINUS\",\n    \"DOM_VK_I\",\n    \"DOM_VK_INSERT\",\n    \"DOM_VK_J\",\n    \"DOM_VK_JUNJA\",\n    \"DOM_VK_K\",\n    \"DOM_VK_KANA\",\n    \"DOM_VK_KANJI\",\n    \"DOM_VK_L\",\n    \"DOM_VK_LEFT\",\n    \"DOM_VK_LEFT_TAB\",\n    \"DOM_VK_LESS_THAN\",\n    \"DOM_VK_M\",\n    \"DOM_VK_META\",\n    \"DOM_VK_MODECHANGE\",\n    \"DOM_VK_MULTIPLY\",\n    \"DOM_VK_N\",\n    \"DOM_VK_NONCONVERT\",\n    \"DOM_VK_NUMPAD0\",\n    \"DOM_VK_NUMPAD1\",\n    \"DOM_VK_NUMPAD2\",\n    \"DOM_VK_NUMPAD3\",\n    \"DOM_VK_NUMPAD4\",\n    \"DOM_VK_NUMPAD5\",\n    \"DOM_VK_NUMPAD6\",\n    \"DOM_VK_NUMPAD7\",\n    \"DOM_VK_NUMPAD8\",\n    \"DOM_VK_NUMPAD9\",\n    \"DOM_VK_NUM_LOCK\",\n    \"DOM_VK_O\",\n    \"DOM_VK_OEM_1\",\n    \"DOM_VK_OEM_102\",\n    \"DOM_VK_OEM_2\",\n    \"DOM_VK_OEM_3\",\n    \"DOM_VK_OEM_4\",\n    \"DOM_VK_OEM_5\",\n    \"DOM_VK_OEM_6\",\n    \"DOM_VK_OEM_7\",\n    \"DOM_VK_OEM_8\",\n    \"DOM_VK_OEM_COMMA\",\n    \"DOM_VK_OEM_MINUS\",\n    \"DOM_VK_OEM_PERIOD\",\n    \"DOM_VK_OEM_PLUS\",\n    \"DOM_VK_OPEN_BRACKET\",\n    \"DOM_VK_OPEN_CURLY_BRACKET\",\n    \"DOM_VK_OPEN_PAREN\",\n    \"DOM_VK_P\",\n    \"DOM_VK_PA1\",\n    \"DOM_VK_PAGEDOWN\",\n    \"DOM_VK_PAGEUP\",\n    \"DOM_VK_PAGE_DOWN\",\n    \"DOM_VK_PAGE_UP\",\n    \"DOM_VK_PAUSE\",\n    \"DOM_VK_PERCENT\",\n    \"DOM_VK_PERIOD\",\n    \"DOM_VK_PIPE\",\n    \"DOM_VK_PLAY\",\n    \"DOM_VK_PLUS\",\n    \"DOM_VK_PRINT\",\n    \"DOM_VK_PRINTSCREEN\",\n    \"DOM_VK_PROCESSKEY\",\n    \"DOM_VK_PROPERITES\",\n    \"DOM_VK_Q\",\n    \"DOM_VK_QUESTION_MARK\",\n    \"DOM_VK_QUOTE\",\n    \"DOM_VK_R\",\n    \"DOM_VK_REDO\",\n    \"DOM_VK_RETURN\",\n    \"DOM_VK_RIGHT\",\n    \"DOM_VK_S\",\n    \"DOM_VK_SCROLL_LOCK\",\n    \"DOM_VK_SELECT\",\n    \"DOM_VK_SEMICOLON\",\n    \"DOM_VK_SEPARATOR\",\n    \"DOM_VK_SHIFT\",\n    \"DOM_VK_SLASH\",\n    \"DOM_VK_SLEEP\",\n    \"DOM_VK_SPACE\",\n    \"DOM_VK_SUBTRACT\",\n    \"DOM_VK_T\",\n    \"DOM_VK_TAB\",\n    \"DOM_VK_TILDE\",\n    \"DOM_VK_U\",\n    \"DOM_VK_UNDERSCORE\",\n    \"DOM_VK_UNDO\",\n    \"DOM_VK_UNICODE\",\n    \"DOM_VK_UP\",\n    \"DOM_VK_V\",\n    \"DOM_VK_VOLUME_DOWN\",\n    \"DOM_VK_VOLUME_MUTE\",\n    \"DOM_VK_VOLUME_UP\",\n    \"DOM_VK_W\",\n    \"DOM_VK_WIN\",\n    \"DOM_VK_WINDOW\",\n    \"DOM_VK_WIN_ICO_00\",\n    \"DOM_VK_WIN_ICO_CLEAR\",\n    \"DOM_VK_WIN_ICO_HELP\",\n    \"DOM_VK_WIN_OEM_ATTN\",\n    \"DOM_VK_WIN_OEM_AUTO\",\n    \"DOM_VK_WIN_OEM_BACKTAB\",\n    \"DOM_VK_WIN_OEM_CLEAR\",\n    \"DOM_VK_WIN_OEM_COPY\",\n    \"DOM_VK_WIN_OEM_CUSEL\",\n    \"DOM_VK_WIN_OEM_ENLW\",\n    \"DOM_VK_WIN_OEM_FINISH\",\n    \"DOM_VK_WIN_OEM_FJ_JISHO\",\n    \"DOM_VK_WIN_OEM_FJ_LOYA\",\n    \"DOM_VK_WIN_OEM_FJ_MASSHOU\",\n    \"DOM_VK_WIN_OEM_FJ_ROYA\",\n    \"DOM_VK_WIN_OEM_FJ_TOUROKU\",\n    \"DOM_VK_WIN_OEM_JUMP\",\n    \"DOM_VK_WIN_OEM_PA1\",\n    \"DOM_VK_WIN_OEM_PA2\",\n    \"DOM_VK_WIN_OEM_PA3\",\n    \"DOM_VK_WIN_OEM_RESET\",\n    \"DOM_VK_WIN_OEM_WSCTRL\",\n    \"DOM_VK_X\",\n    \"DOM_VK_XF86XK_ADD_FAVORITE\",\n    \"DOM_VK_XF86XK_APPLICATION_LEFT\",\n    \"DOM_VK_XF86XK_APPLICATION_RIGHT\",\n    \"DOM_VK_XF86XK_AUDIO_CYCLE_TRACK\",\n    \"DOM_VK_XF86XK_AUDIO_FORWARD\",\n    \"DOM_VK_XF86XK_AUDIO_LOWER_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_MEDIA\",\n    \"DOM_VK_XF86XK_AUDIO_MUTE\",\n    \"DOM_VK_XF86XK_AUDIO_NEXT\",\n    \"DOM_VK_XF86XK_AUDIO_PAUSE\",\n    \"DOM_VK_XF86XK_AUDIO_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_PREV\",\n    \"DOM_VK_XF86XK_AUDIO_RAISE_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_RANDOM_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_RECORD\",\n    \"DOM_VK_XF86XK_AUDIO_REPEAT\",\n    \"DOM_VK_XF86XK_AUDIO_REWIND\",\n    \"DOM_VK_XF86XK_AUDIO_STOP\",\n    \"DOM_VK_XF86XK_AWAY\",\n    \"DOM_VK_XF86XK_BACK\",\n    \"DOM_VK_XF86XK_BACK_FORWARD\",\n    \"DOM_VK_XF86XK_BATTERY\",\n    \"DOM_VK_XF86XK_BLUE\",\n    \"DOM_VK_XF86XK_BLUETOOTH\",\n    \"DOM_VK_XF86XK_BOOK\",\n    \"DOM_VK_XF86XK_BRIGHTNESS_ADJUST\",\n    \"DOM_VK_XF86XK_CALCULATOR\",\n    \"DOM_VK_XF86XK_CALENDAR\",\n    \"DOM_VK_XF86XK_CD\",\n    \"DOM_VK_XF86XK_CLOSE\",\n    \"DOM_VK_XF86XK_COMMUNITY\",\n    \"DOM_VK_XF86XK_CONTRAST_ADJUST\",\n    \"DOM_VK_XF86XK_COPY\",\n    \"DOM_VK_XF86XK_CUT\",\n    \"DOM_VK_XF86XK_CYCLE_ANGLE\",\n    \"DOM_VK_XF86XK_DISPLAY\",\n    \"DOM_VK_XF86XK_DOCUMENTS\",\n    \"DOM_VK_XF86XK_DOS\",\n    \"DOM_VK_XF86XK_EJECT\",\n    \"DOM_VK_XF86XK_EXCEL\",\n    \"DOM_VK_XF86XK_EXPLORER\",\n    \"DOM_VK_XF86XK_FAVORITES\",\n    \"DOM_VK_XF86XK_FINANCE\",\n    \"DOM_VK_XF86XK_FORWARD\",\n    \"DOM_VK_XF86XK_FRAME_BACK\",\n    \"DOM_VK_XF86XK_FRAME_FORWARD\",\n    \"DOM_VK_XF86XK_GAME\",\n    \"DOM_VK_XF86XK_GO\",\n    \"DOM_VK_XF86XK_GREEN\",\n    \"DOM_VK_XF86XK_HIBERNATE\",\n    \"DOM_VK_XF86XK_HISTORY\",\n    \"DOM_VK_XF86XK_HOME_PAGE\",\n    \"DOM_VK_XF86XK_HOT_LINKS\",\n    \"DOM_VK_XF86XK_I_TOUCH\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_KBD_LIGHT_ON_OFF\",\n    \"DOM_VK_XF86XK_LAUNCH0\",\n    \"DOM_VK_XF86XK_LAUNCH1\",\n    \"DOM_VK_XF86XK_LAUNCH2\",\n    \"DOM_VK_XF86XK_LAUNCH3\",\n    \"DOM_VK_XF86XK_LAUNCH4\",\n    \"DOM_VK_XF86XK_LAUNCH5\",\n    \"DOM_VK_XF86XK_LAUNCH6\",\n    \"DOM_VK_XF86XK_LAUNCH7\",\n    \"DOM_VK_XF86XK_LAUNCH8\",\n    \"DOM_VK_XF86XK_LAUNCH9\",\n    \"DOM_VK_XF86XK_LAUNCH_A\",\n    \"DOM_VK_XF86XK_LAUNCH_B\",\n    \"DOM_VK_XF86XK_LAUNCH_C\",\n    \"DOM_VK_XF86XK_LAUNCH_D\",\n    \"DOM_VK_XF86XK_LAUNCH_E\",\n    \"DOM_VK_XF86XK_LAUNCH_F\",\n    \"DOM_VK_XF86XK_LIGHT_BULB\",\n    \"DOM_VK_XF86XK_LOG_OFF\",\n    \"DOM_VK_XF86XK_MAIL\",\n    \"DOM_VK_XF86XK_MAIL_FORWARD\",\n    \"DOM_VK_XF86XK_MARKET\",\n    \"DOM_VK_XF86XK_MEETING\",\n    \"DOM_VK_XF86XK_MEMO\",\n    \"DOM_VK_XF86XK_MENU_KB\",\n    \"DOM_VK_XF86XK_MENU_PB\",\n    \"DOM_VK_XF86XK_MESSENGER\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_MUSIC\",\n    \"DOM_VK_XF86XK_MY_COMPUTER\",\n    \"DOM_VK_XF86XK_MY_SITES\",\n    \"DOM_VK_XF86XK_NEW\",\n    \"DOM_VK_XF86XK_NEWS\",\n    \"DOM_VK_XF86XK_OFFICE_HOME\",\n    \"DOM_VK_XF86XK_OPEN\",\n    \"DOM_VK_XF86XK_OPEN_URL\",\n    \"DOM_VK_XF86XK_OPTION\",\n    \"DOM_VK_XF86XK_PASTE\",\n    \"DOM_VK_XF86XK_PHONE\",\n    \"DOM_VK_XF86XK_PICTURES\",\n    \"DOM_VK_XF86XK_POWER_DOWN\",\n    \"DOM_VK_XF86XK_POWER_OFF\",\n    \"DOM_VK_XF86XK_RED\",\n    \"DOM_VK_XF86XK_REFRESH\",\n    \"DOM_VK_XF86XK_RELOAD\",\n    \"DOM_VK_XF86XK_REPLY\",\n    \"DOM_VK_XF86XK_ROCKER_DOWN\",\n    \"DOM_VK_XF86XK_ROCKER_ENTER\",\n    \"DOM_VK_XF86XK_ROCKER_UP\",\n    \"DOM_VK_XF86XK_ROTATE_WINDOWS\",\n    \"DOM_VK_XF86XK_ROTATION_KB\",\n    \"DOM_VK_XF86XK_ROTATION_PB\",\n    \"DOM_VK_XF86XK_SAVE\",\n    \"DOM_VK_XF86XK_SCREEN_SAVER\",\n    \"DOM_VK_XF86XK_SCROLL_CLICK\",\n    \"DOM_VK_XF86XK_SCROLL_DOWN\",\n    \"DOM_VK_XF86XK_SCROLL_UP\",\n    \"DOM_VK_XF86XK_SEARCH\",\n    \"DOM_VK_XF86XK_SEND\",\n    \"DOM_VK_XF86XK_SHOP\",\n    \"DOM_VK_XF86XK_SPELL\",\n    \"DOM_VK_XF86XK_SPLIT_SCREEN\",\n    \"DOM_VK_XF86XK_STANDBY\",\n    \"DOM_VK_XF86XK_START\",\n    \"DOM_VK_XF86XK_STOP\",\n    \"DOM_VK_XF86XK_SUBTITLE\",\n    \"DOM_VK_XF86XK_SUPPORT\",\n    \"DOM_VK_XF86XK_SUSPEND\",\n    \"DOM_VK_XF86XK_TASK_PANE\",\n    \"DOM_VK_XF86XK_TERMINAL\",\n    \"DOM_VK_XF86XK_TIME\",\n    \"DOM_VK_XF86XK_TOOLS\",\n    \"DOM_VK_XF86XK_TOP_MENU\",\n    \"DOM_VK_XF86XK_TO_DO_LIST\",\n    \"DOM_VK_XF86XK_TRAVEL\",\n    \"DOM_VK_XF86XK_USER1KB\",\n    \"DOM_VK_XF86XK_USER2KB\",\n    \"DOM_VK_XF86XK_USER_PB\",\n    \"DOM_VK_XF86XK_UWB\",\n    \"DOM_VK_XF86XK_VENDOR_HOME\",\n    \"DOM_VK_XF86XK_VIDEO\",\n    \"DOM_VK_XF86XK_VIEW\",\n    \"DOM_VK_XF86XK_WAKE_UP\",\n    \"DOM_VK_XF86XK_WEB_CAM\",\n    \"DOM_VK_XF86XK_WHEEL_BUTTON\",\n    \"DOM_VK_XF86XK_WLAN\",\n    \"DOM_VK_XF86XK_WORD\",\n    \"DOM_VK_XF86XK_WWW\",\n    \"DOM_VK_XF86XK_XFER\",\n    \"DOM_VK_XF86XK_YELLOW\",\n    \"DOM_VK_XF86XK_ZOOM_IN\",\n    \"DOM_VK_XF86XK_ZOOM_OUT\",\n    \"DOM_VK_Y\",\n    \"DOM_VK_Z\",\n    \"DOM_VK_ZOOM\",\n    \"DONE\",\n    \"DONT_CARE\",\n    \"DOWNLOADING\",\n    \"DRAGDROP\",\n    \"DST_ALPHA\",\n    \"DST_COLOR\",\n    \"DYNAMIC_DRAW\",\n    \"DataChannel\",\n    \"DataTransfer\",\n    \"DataTransferItem\",\n    \"DataTransferItemList\",\n    \"DataView\",\n    \"Date\",\n    \"DateTimeFormat\",\n    \"DelayNode\",\n    \"DesktopNotification\",\n    \"DesktopNotificationCenter\",\n    \"DeviceLightEvent\",\n    \"DeviceMotionEvent\",\n    \"DeviceOrientationEvent\",\n    \"DeviceProximityEvent\",\n    \"DeviceStorage\",\n    \"DeviceStorageChangeEvent\",\n    \"Document\",\n    \"DocumentFragment\",\n    \"DocumentType\",\n    \"DragEvent\",\n    \"DynamicsCompressorNode\",\n    \"E\",\n    \"ELEMENT_ARRAY_BUFFER\",\n    \"ELEMENT_ARRAY_BUFFER_BINDING\",\n    \"ELEMENT_NODE\",\n    \"EMPTY\",\n    \"ENCODING_ERR\",\n    \"ENDED\",\n    \"END_TO_END\",\n    \"END_TO_START\",\n    \"ENTITY_NODE\",\n    \"ENTITY_REFERENCE_NODE\",\n    \"EPSILON\",\n    \"EQUAL\",\n    \"EQUALPOWER\",\n    \"ERROR\",\n    \"EXPONENTIAL_DISTANCE\",\n    \"Element\",\n    \"ElementQuery\",\n    \"Entity\",\n    \"EntityReference\",\n    \"Error\",\n    \"ErrorEvent\",\n    \"EvalError\",\n    \"Event\",\n    \"EventException\",\n    \"EventSource\",\n    \"EventTarget\",\n    \"External\",\n    \"FASTEST\",\n    \"FIDOSDK\",\n    \"FILTER_ACCEPT\",\n    \"FILTER_INTERRUPT\",\n    \"FILTER_REJECT\",\n    \"FILTER_SKIP\",\n    \"FINISHED_STATE\",\n    \"FIRST_ORDERED_NODE_TYPE\",\n    \"FLOAT\",\n    \"FLOAT_MAT2\",\n    \"FLOAT_MAT3\",\n    \"FLOAT_MAT4\",\n    \"FLOAT_VEC2\",\n    \"FLOAT_VEC3\",\n    \"FLOAT_VEC4\",\n    \"FOCUS\",\n    \"FONT_FACE_RULE\",\n    \"FONT_FEATURE_VALUES_RULE\",\n    \"FRAGMENT_SHADER\",\n    \"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",\n    \"FRAMEBUFFER\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",\n    \"FRAMEBUFFER_BINDING\",\n    \"FRAMEBUFFER_COMPLETE\",\n    \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",\n    \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",\n    \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",\n    \"FRAMEBUFFER_UNSUPPORTED\",\n    \"FRONT\",\n    \"FRONT_AND_BACK\",\n    \"FRONT_FACE\",\n    \"FUNC_ADD\",\n    \"FUNC_REVERSE_SUBTRACT\",\n    \"FUNC_SUBTRACT\",\n    \"Feed\",\n    \"FeedEntry\",\n    \"File\",\n    \"FileError\",\n    \"FileList\",\n    \"FileReader\",\n    \"FindInPage\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"FocusEvent\",\n    \"FontFace\",\n    \"FormData\",\n    \"Function\",\n    \"GENERATE_MIPMAP_HINT\",\n    \"GEQUAL\",\n    \"GREATER\",\n    \"GREEN_BITS\",\n    \"GainNode\",\n    \"Gamepad\",\n    \"GamepadButton\",\n    \"GamepadEvent\",\n    \"GestureEvent\",\n    \"HAVE_CURRENT_DATA\",\n    \"HAVE_ENOUGH_DATA\",\n    \"HAVE_FUTURE_DATA\",\n    \"HAVE_METADATA\",\n    \"HAVE_NOTHING\",\n    \"HEADERS_RECEIVED\",\n    \"HIDDEN\",\n    \"HIERARCHY_REQUEST_ERR\",\n    \"HIGHPASS\",\n    \"HIGHSHELF\",\n    \"HIGH_FLOAT\",\n    \"HIGH_INT\",\n    \"HORIZONTAL\",\n    \"HORIZONTAL_AXIS\",\n    \"HRTF\",\n    \"HTMLAllCollection\",\n    \"HTMLAnchorElement\",\n    \"HTMLAppletElement\",\n    \"HTMLAreaElement\",\n    \"HTMLAudioElement\",\n    \"HTMLBRElement\",\n    \"HTMLBaseElement\",\n    \"HTMLBaseFontElement\",\n    \"HTMLBlockquoteElement\",\n    \"HTMLBodyElement\",\n    \"HTMLButtonElement\",\n    \"HTMLCanvasElement\",\n    \"HTMLCollection\",\n    \"HTMLCommandElement\",\n    \"HTMLContentElement\",\n    \"HTMLDListElement\",\n    \"HTMLDataElement\",\n    \"HTMLDataListElement\",\n    \"HTMLDetailsElement\",\n    \"HTMLDialogElement\",\n    \"HTMLDirectoryElement\",\n    \"HTMLDivElement\",\n    \"HTMLDocument\",\n    \"HTMLElement\",\n    \"HTMLEmbedElement\",\n    \"HTMLFieldSetElement\",\n    \"HTMLFontElement\",\n    \"HTMLFormControlsCollection\",\n    \"HTMLFormElement\",\n    \"HTMLFrameElement\",\n    \"HTMLFrameSetElement\",\n    \"HTMLHRElement\",\n    \"HTMLHeadElement\",\n    \"HTMLHeadingElement\",\n    \"HTMLHtmlElement\",\n    \"HTMLIFrameElement\",\n    \"HTMLImageElement\",\n    \"HTMLInputElement\",\n    \"HTMLIsIndexElement\",\n    \"HTMLKeygenElement\",\n    \"HTMLLIElement\",\n    \"HTMLLabelElement\",\n    \"HTMLLegendElement\",\n    \"HTMLLinkElement\",\n    \"HTMLMapElement\",\n    \"HTMLMarqueeElement\",\n    \"HTMLMediaElement\",\n    \"HTMLMenuElement\",\n    \"HTMLMenuItemElement\",\n    \"HTMLMetaElement\",\n    \"HTMLMeterElement\",\n    \"HTMLModElement\",\n    \"HTMLOListElement\",\n    \"HTMLObjectElement\",\n    \"HTMLOptGroupElement\",\n    \"HTMLOptionElement\",\n    \"HTMLOptionsCollection\",\n    \"HTMLOutputElement\",\n    \"HTMLParagraphElement\",\n    \"HTMLParamElement\",\n    \"HTMLPictureElement\",\n    \"HTMLPreElement\",\n    \"HTMLProgressElement\",\n    \"HTMLPropertiesCollection\",\n    \"HTMLQuoteElement\",\n    \"HTMLScriptElement\",\n    \"HTMLSelectElement\",\n    \"HTMLShadowElement\",\n    \"HTMLSourceElement\",\n    \"HTMLSpanElement\",\n    \"HTMLStyleElement\",\n    \"HTMLTableCaptionElement\",\n    \"HTMLTableCellElement\",\n    \"HTMLTableColElement\",\n    \"HTMLTableElement\",\n    \"HTMLTableRowElement\",\n    \"HTMLTableSectionElement\",\n    \"HTMLTemplateElement\",\n    \"HTMLTextAreaElement\",\n    \"HTMLTimeElement\",\n    \"HTMLTitleElement\",\n    \"HTMLTrackElement\",\n    \"HTMLUListElement\",\n    \"HTMLUnknownElement\",\n    \"HTMLVideoElement\",\n    \"HashChangeEvent\",\n    \"Headers\",\n    \"History\",\n    \"ICE_CHECKING\",\n    \"ICE_CLOSED\",\n    \"ICE_COMPLETED\",\n    \"ICE_CONNECTED\",\n    \"ICE_FAILED\",\n    \"ICE_GATHERING\",\n    \"ICE_WAITING\",\n    \"IDBCursor\",\n    \"IDBCursorWithValue\",\n    \"IDBDatabase\",\n    \"IDBDatabaseException\",\n    \"IDBFactory\",\n    \"IDBFileHandle\",\n    \"IDBFileRequest\",\n    \"IDBIndex\",\n    \"IDBKeyRange\",\n    \"IDBMutableFile\",\n    \"IDBObjectStore\",\n    \"IDBOpenDBRequest\",\n    \"IDBRequest\",\n    \"IDBTransaction\",\n    \"IDBVersionChangeEvent\",\n    \"IDLE\",\n    \"IMPLEMENTATION_COLOR_READ_FORMAT\",\n    \"IMPLEMENTATION_COLOR_READ_TYPE\",\n    \"IMPORT_RULE\",\n    \"INCR\",\n    \"INCR_WRAP\",\n    \"INDEX_SIZE_ERR\",\n    \"INT\",\n    \"INT_VEC2\",\n    \"INT_VEC3\",\n    \"INT_VEC4\",\n    \"INUSE_ATTRIBUTE_ERR\",\n    \"INVALID_ACCESS_ERR\",\n    \"INVALID_CHARACTER_ERR\",\n    \"INVALID_ENUM\",\n    \"INVALID_EXPRESSION_ERR\",\n    \"INVALID_FRAMEBUFFER_OPERATION\",\n    \"INVALID_MODIFICATION_ERR\",\n    \"INVALID_NODE_TYPE_ERR\",\n    \"INVALID_OPERATION\",\n    \"INVALID_STATE_ERR\",\n    \"INVALID_VALUE\",\n    \"INVERSE_DISTANCE\",\n    \"INVERT\",\n    \"IceCandidate\",\n    \"Image\",\n    \"ImageBitmap\",\n    \"ImageData\",\n    \"Infinity\",\n    \"InputEvent\",\n    \"InputMethodContext\",\n    \"InstallTrigger\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Intent\",\n    \"InternalError\",\n    \"Intl\",\n    \"IsSearchProviderInstalled\",\n    \"Iterator\",\n    \"JSON\",\n    \"KEEP\",\n    \"KEYDOWN\",\n    \"KEYFRAMES_RULE\",\n    \"KEYFRAME_RULE\",\n    \"KEYPRESS\",\n    \"KEYUP\",\n    \"KeyEvent\",\n    \"KeyboardEvent\",\n    \"LENGTHADJUST_SPACING\",\n    \"LENGTHADJUST_SPACINGANDGLYPHS\",\n    \"LENGTHADJUST_UNKNOWN\",\n    \"LEQUAL\",\n    \"LESS\",\n    \"LINEAR\",\n    \"LINEAR_DISTANCE\",\n    \"LINEAR_MIPMAP_LINEAR\",\n    \"LINEAR_MIPMAP_NEAREST\",\n    \"LINES\",\n    \"LINE_LOOP\",\n    \"LINE_STRIP\",\n    \"LINE_WIDTH\",\n    \"LINK_STATUS\",\n    \"LIVE\",\n    \"LN10\",\n    \"LN2\",\n    \"LOADED\",\n    \"LOADING\",\n    \"LOG10E\",\n    \"LOG2E\",\n    \"LOWPASS\",\n    \"LOWSHELF\",\n    \"LOW_FLOAT\",\n    \"LOW_INT\",\n    \"LSException\",\n    \"LSParserFilter\",\n    \"LUMINANCE\",\n    \"LUMINANCE_ALPHA\",\n    \"LocalMediaStream\",\n    \"Location\",\n    \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\n    \"MAX_CUBE_MAP_TEXTURE_SIZE\",\n    \"MAX_FRAGMENT_UNIFORM_VECTORS\",\n    \"MAX_RENDERBUFFER_SIZE\",\n    \"MAX_SAFE_INTEGER\",\n    \"MAX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"MAX_TEXTURE_SIZE\",\n    \"MAX_VALUE\",\n    \"MAX_VARYING_VECTORS\",\n    \"MAX_VERTEX_ATTRIBS\",\n    \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_VERTEX_UNIFORM_VECTORS\",\n    \"MAX_VIEWPORT_DIMS\",\n    \"MEDIA_ERR_ABORTED\",\n    \"MEDIA_ERR_DECODE\",\n    \"MEDIA_ERR_ENCRYPTED\",\n    \"MEDIA_ERR_NETWORK\",\n    \"MEDIA_ERR_SRC_NOT_SUPPORTED\",\n    \"MEDIA_KEYERR_CLIENT\",\n    \"MEDIA_KEYERR_DOMAIN\",\n    \"MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MEDIA_KEYERR_OUTPUT\",\n    \"MEDIA_KEYERR_SERVICE\",\n    \"MEDIA_KEYERR_UNKNOWN\",\n    \"MEDIA_RULE\",\n    \"MEDIUM_FLOAT\",\n    \"MEDIUM_INT\",\n    \"META_MASK\",\n    \"MIN_SAFE_INTEGER\",\n    \"MIN_VALUE\",\n    \"MIRRORED_REPEAT\",\n    \"MODE_ASYNCHRONOUS\",\n    \"MODE_SYNCHRONOUS\",\n    \"MODIFICATION\",\n    \"MOUSEDOWN\",\n    \"MOUSEDRAG\",\n    \"MOUSEMOVE\",\n    \"MOUSEOUT\",\n    \"MOUSEOVER\",\n    \"MOUSEUP\",\n    \"MOZ_KEYFRAMES_RULE\",\n    \"MOZ_KEYFRAME_RULE\",\n    \"MOZ_SOURCE_CURSOR\",\n    \"MOZ_SOURCE_ERASER\",\n    \"MOZ_SOURCE_KEYBOARD\",\n    \"MOZ_SOURCE_MOUSE\",\n    \"MOZ_SOURCE_PEN\",\n    \"MOZ_SOURCE_TOUCH\",\n    \"MOZ_SOURCE_UNKNOWN\",\n    \"MSGESTURE_FLAG_BEGIN\",\n    \"MSGESTURE_FLAG_CANCEL\",\n    \"MSGESTURE_FLAG_END\",\n    \"MSGESTURE_FLAG_INERTIA\",\n    \"MSGESTURE_FLAG_NONE\",\n    \"MSPOINTER_TYPE_MOUSE\",\n    \"MSPOINTER_TYPE_PEN\",\n    \"MSPOINTER_TYPE_TOUCH\",\n    \"MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE\",\n    \"MS_ASYNC_CALLBACK_STATUS_CANCEL\",\n    \"MS_ASYNC_CALLBACK_STATUS_CHOOSEANY\",\n    \"MS_ASYNC_CALLBACK_STATUS_ERROR\",\n    \"MS_ASYNC_CALLBACK_STATUS_JOIN\",\n    \"MS_ASYNC_OP_STATUS_CANCELED\",\n    \"MS_ASYNC_OP_STATUS_ERROR\",\n    \"MS_ASYNC_OP_STATUS_SUCCESS\",\n    \"MS_MANIPULATION_STATE_ACTIVE\",\n    \"MS_MANIPULATION_STATE_CANCELLED\",\n    \"MS_MANIPULATION_STATE_COMMITTED\",\n    \"MS_MANIPULATION_STATE_DRAGGING\",\n    \"MS_MANIPULATION_STATE_INERTIA\",\n    \"MS_MANIPULATION_STATE_PRESELECT\",\n    \"MS_MANIPULATION_STATE_SELECTING\",\n    \"MS_MANIPULATION_STATE_STOPPED\",\n    \"MS_MEDIA_ERR_ENCRYPTED\",\n    \"MS_MEDIA_KEYERR_CLIENT\",\n    \"MS_MEDIA_KEYERR_DOMAIN\",\n    \"MS_MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MS_MEDIA_KEYERR_OUTPUT\",\n    \"MS_MEDIA_KEYERR_SERVICE\",\n    \"MS_MEDIA_KEYERR_UNKNOWN\",\n    \"Map\",\n    \"Math\",\n    \"MediaController\",\n    \"MediaDevices\",\n    \"MediaElementAudioSourceNode\",\n    \"MediaEncryptedEvent\",\n    \"MediaError\",\n    \"MediaKeyError\",\n    \"MediaKeyEvent\",\n    \"MediaKeyMessageEvent\",\n    \"MediaKeyNeededEvent\",\n    \"MediaKeySession\",\n    \"MediaKeyStatusMap\",\n    \"MediaKeySystemAccess\",\n    \"MediaKeys\",\n    \"MediaList\",\n    \"MediaQueryList\",\n    \"MediaQueryListEvent\",\n    \"MediaRecorder\",\n    \"MediaSource\",\n    \"MediaStream\",\n    \"MediaStreamAudioDestinationNode\",\n    \"MediaStreamAudioSourceNode\",\n    \"MediaStreamEvent\",\n    \"MediaStreamTrack\",\n    \"MediaStreamTrackEvent\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"Methods\",\n    \"MimeType\",\n    \"MimeTypeArray\",\n    \"MouseEvent\",\n    \"MouseScrollEvent\",\n    \"MozAnimation\",\n    \"MozAnimationDelay\",\n    \"MozAnimationDirection\",\n    \"MozAnimationDuration\",\n    \"MozAnimationFillMode\",\n    \"MozAnimationIterationCount\",\n    \"MozAnimationName\",\n    \"MozAnimationPlayState\",\n    \"MozAnimationTimingFunction\",\n    \"MozAppearance\",\n    \"MozBackfaceVisibility\",\n    \"MozBinding\",\n    \"MozBorderBottomColors\",\n    \"MozBorderEnd\",\n    \"MozBorderEndColor\",\n    \"MozBorderEndStyle\",\n    \"MozBorderEndWidth\",\n    \"MozBorderImage\",\n    \"MozBorderLeftColors\",\n    \"MozBorderRightColors\",\n    \"MozBorderStart\",\n    \"MozBorderStartColor\",\n    \"MozBorderStartStyle\",\n    \"MozBorderStartWidth\",\n    \"MozBorderTopColors\",\n    \"MozBoxAlign\",\n    \"MozBoxDirection\",\n    \"MozBoxFlex\",\n    \"MozBoxOrdinalGroup\",\n    \"MozBoxOrient\",\n    \"MozBoxPack\",\n    \"MozBoxSizing\",\n    \"MozCSSKeyframeRule\",\n    \"MozCSSKeyframesRule\",\n    \"MozColumnCount\",\n    \"MozColumnFill\",\n    \"MozColumnGap\",\n    \"MozColumnRule\",\n    \"MozColumnRuleColor\",\n    \"MozColumnRuleStyle\",\n    \"MozColumnRuleWidth\",\n    \"MozColumnWidth\",\n    \"MozColumns\",\n    \"MozContactChangeEvent\",\n    \"MozFloatEdge\",\n    \"MozFontFeatureSettings\",\n    \"MozFontLanguageOverride\",\n    \"MozForceBrokenImageIcon\",\n    \"MozHyphens\",\n    \"MozImageRegion\",\n    \"MozMarginEnd\",\n    \"MozMarginStart\",\n    \"MozMmsEvent\",\n    \"MozMmsMessage\",\n    \"MozMobileMessageThread\",\n    \"MozOSXFontSmoothing\",\n    \"MozOrient\",\n    \"MozOutlineRadius\",\n    \"MozOutlineRadiusBottomleft\",\n    \"MozOutlineRadiusBottomright\",\n    \"MozOutlineRadiusTopleft\",\n    \"MozOutlineRadiusTopright\",\n    \"MozPaddingEnd\",\n    \"MozPaddingStart\",\n    \"MozPerspective\",\n    \"MozPerspectiveOrigin\",\n    \"MozPowerManager\",\n    \"MozSettingsEvent\",\n    \"MozSmsEvent\",\n    \"MozSmsMessage\",\n    \"MozStackSizing\",\n    \"MozTabSize\",\n    \"MozTextAlignLast\",\n    \"MozTextDecorationColor\",\n    \"MozTextDecorationLine\",\n    \"MozTextDecorationStyle\",\n    \"MozTextSizeAdjust\",\n    \"MozTransform\",\n    \"MozTransformOrigin\",\n    \"MozTransformStyle\",\n    \"MozTransition\",\n    \"MozTransitionDelay\",\n    \"MozTransitionDuration\",\n    \"MozTransitionProperty\",\n    \"MozTransitionTimingFunction\",\n    \"MozUserFocus\",\n    \"MozUserInput\",\n    \"MozUserModify\",\n    \"MozUserSelect\",\n    \"MozWindowDragging\",\n    \"MozWindowShadow\",\n    \"MutationEvent\",\n    \"MutationObserver\",\n    \"MutationRecord\",\n    \"NAMESPACE_ERR\",\n    \"NAMESPACE_RULE\",\n    \"NEAREST\",\n    \"NEAREST_MIPMAP_LINEAR\",\n    \"NEAREST_MIPMAP_NEAREST\",\n    \"NEGATIVE_INFINITY\",\n    \"NETWORK_EMPTY\",\n    \"NETWORK_ERR\",\n    \"NETWORK_IDLE\",\n    \"NETWORK_LOADED\",\n    \"NETWORK_LOADING\",\n    \"NETWORK_NO_SOURCE\",\n    \"NEVER\",\n    \"NEW\",\n    \"NEXT\",\n    \"NEXT_NO_DUPLICATE\",\n    \"NICEST\",\n    \"NODE_AFTER\",\n    \"NODE_BEFORE\",\n    \"NODE_BEFORE_AND_AFTER\",\n    \"NODE_INSIDE\",\n    \"NONE\",\n    \"NON_TRANSIENT_ERR\",\n    \"NOTATION_NODE\",\n    \"NOTCH\",\n    \"NOTEQUAL\",\n    \"NOT_ALLOWED_ERR\",\n    \"NOT_FOUND_ERR\",\n    \"NOT_READABLE_ERR\",\n    \"NOT_SUPPORTED_ERR\",\n    \"NO_DATA_ALLOWED_ERR\",\n    \"NO_ERR\",\n    \"NO_ERROR\",\n    \"NO_MODIFICATION_ALLOWED_ERR\",\n    \"NUMBER_TYPE\",\n    \"NUM_COMPRESSED_TEXTURE_FORMATS\",\n    \"NaN\",\n    \"NamedNodeMap\",\n    \"Navigator\",\n    \"NearbyLinks\",\n    \"NetworkInformation\",\n    \"Node\",\n    \"NodeFilter\",\n    \"NodeIterator\",\n    \"NodeList\",\n    \"Notation\",\n    \"Notification\",\n    \"NotifyPaintEvent\",\n    \"Number\",\n    \"NumberFormat\",\n    \"OBSOLETE\",\n    \"ONE\",\n    \"ONE_MINUS_CONSTANT_ALPHA\",\n    \"ONE_MINUS_CONSTANT_COLOR\",\n    \"ONE_MINUS_DST_ALPHA\",\n    \"ONE_MINUS_DST_COLOR\",\n    \"ONE_MINUS_SRC_ALPHA\",\n    \"ONE_MINUS_SRC_COLOR\",\n    \"OPEN\",\n    \"OPENED\",\n    \"OPENING\",\n    \"ORDERED_NODE_ITERATOR_TYPE\",\n    \"ORDERED_NODE_SNAPSHOT_TYPE\",\n    \"OUT_OF_MEMORY\",\n    \"Object\",\n    \"OfflineAudioCompletionEvent\",\n    \"OfflineAudioContext\",\n    \"OfflineResourceList\",\n    \"Option\",\n    \"OscillatorNode\",\n    \"OverflowEvent\",\n    \"PACK_ALIGNMENT\",\n    \"PAGE_RULE\",\n    \"PARSE_ERR\",\n    \"PATHSEG_ARC_ABS\",\n    \"PATHSEG_ARC_REL\",\n    \"PATHSEG_CLOSEPATH\",\n    \"PATHSEG_CURVETO_CUBIC_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_REL\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL\",\n    \"PATHSEG_LINETO_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_REL\",\n    \"PATHSEG_LINETO_REL\",\n    \"PATHSEG_LINETO_VERTICAL_ABS\",\n    \"PATHSEG_LINETO_VERTICAL_REL\",\n    \"PATHSEG_MOVETO_ABS\",\n    \"PATHSEG_MOVETO_REL\",\n    \"PATHSEG_UNKNOWN\",\n    \"PATH_EXISTS_ERR\",\n    \"PEAKING\",\n    \"PERMISSION_DENIED\",\n    \"PERSISTENT\",\n    \"PI\",\n    \"PLAYING_STATE\",\n    \"POINTS\",\n    \"POLYGON_OFFSET_FACTOR\",\n    \"POLYGON_OFFSET_FILL\",\n    \"POLYGON_OFFSET_UNITS\",\n    \"POSITION_UNAVAILABLE\",\n    \"POSITIVE_INFINITY\",\n    \"PREV\",\n    \"PREV_NO_DUPLICATE\",\n    \"PROCESSING_INSTRUCTION_NODE\",\n    \"PageChangeEvent\",\n    \"PageTransitionEvent\",\n    \"PaintRequest\",\n    \"PaintRequestList\",\n    \"PannerNode\",\n    \"Path2D\",\n    \"Performance\",\n    \"PerformanceEntry\",\n    \"PerformanceMark\",\n    \"PerformanceMeasure\",\n    \"PerformanceNavigation\",\n    \"PerformanceResourceTiming\",\n    \"PerformanceTiming\",\n    \"PeriodicWave\",\n    \"Plugin\",\n    \"PluginArray\",\n    \"PopStateEvent\",\n    \"PopupBlockedEvent\",\n    \"ProcessingInstruction\",\n    \"ProgressEvent\",\n    \"Promise\",\n    \"PropertyNodeList\",\n    \"Proxy\",\n    \"PushManager\",\n    \"PushSubscription\",\n    \"Q\",\n    \"QUOTA_ERR\",\n    \"QUOTA_EXCEEDED_ERR\",\n    \"QueryInterface\",\n    \"READ_ONLY\",\n    \"READ_ONLY_ERR\",\n    \"READ_WRITE\",\n    \"RED_BITS\",\n    \"REMOVAL\",\n    \"RENDERBUFFER\",\n    \"RENDERBUFFER_ALPHA_SIZE\",\n    \"RENDERBUFFER_BINDING\",\n    \"RENDERBUFFER_BLUE_SIZE\",\n    \"RENDERBUFFER_DEPTH_SIZE\",\n    \"RENDERBUFFER_GREEN_SIZE\",\n    \"RENDERBUFFER_HEIGHT\",\n    \"RENDERBUFFER_INTERNAL_FORMAT\",\n    \"RENDERBUFFER_RED_SIZE\",\n    \"RENDERBUFFER_STENCIL_SIZE\",\n    \"RENDERBUFFER_WIDTH\",\n    \"RENDERER\",\n    \"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC\",\n    \"RENDERING_INTENT_AUTO\",\n    \"RENDERING_INTENT_PERCEPTUAL\",\n    \"RENDERING_INTENT_RELATIVE_COLORIMETRIC\",\n    \"RENDERING_INTENT_SATURATION\",\n    \"RENDERING_INTENT_UNKNOWN\",\n    \"REPEAT\",\n    \"REPLACE\",\n    \"RGB\",\n    \"RGB565\",\n    \"RGB5_A1\",\n    \"RGBA\",\n    \"RGBA4\",\n    \"RGBColor\",\n    \"ROTATION_CLOCKWISE\",\n    \"ROTATION_COUNTERCLOCKWISE\",\n    \"RTCDataChannelEvent\",\n    \"RTCIceCandidate\",\n    \"RTCPeerConnectionIceEvent\",\n    \"RTCRtpReceiver\",\n    \"RTCRtpSender\",\n    \"RTCSessionDescription\",\n    \"RTCStatsReport\",\n    \"RadioNodeList\",\n    \"Range\",\n    \"RangeError\",\n    \"RangeException\",\n    \"RecordErrorEvent\",\n    \"Rect\",\n    \"ReferenceError\",\n    \"RegExp\",\n    \"Request\",\n    \"Response\",\n    \"SAMPLER_2D\",\n    \"SAMPLER_CUBE\",\n    \"SAMPLES\",\n    \"SAMPLE_ALPHA_TO_COVERAGE\",\n    \"SAMPLE_BUFFERS\",\n    \"SAMPLE_COVERAGE\",\n    \"SAMPLE_COVERAGE_INVERT\",\n    \"SAMPLE_COVERAGE_VALUE\",\n    \"SAWTOOTH\",\n    \"SCHEDULED_STATE\",\n    \"SCISSOR_BOX\",\n    \"SCISSOR_TEST\",\n    \"SCROLL_PAGE_DOWN\",\n    \"SCROLL_PAGE_UP\",\n    \"SDP_ANSWER\",\n    \"SDP_OFFER\",\n    \"SDP_PRANSWER\",\n    \"SECURITY_ERR\",\n    \"SELECT\",\n    \"SERIALIZE_ERR\",\n    \"SEVERITY_ERROR\",\n    \"SEVERITY_FATAL_ERROR\",\n    \"SEVERITY_WARNING\",\n    \"SHADER_COMPILER\",\n    \"SHADER_TYPE\",\n    \"SHADING_LANGUAGE_VERSION\",\n    \"SHIFT_MASK\",\n    \"SHORT\",\n    \"SHOWING\",\n    \"SHOW_ALL\",\n    \"SHOW_ATTRIBUTE\",\n    \"SHOW_CDATA_SECTION\",\n    \"SHOW_COMMENT\",\n    \"SHOW_DOCUMENT\",\n    \"SHOW_DOCUMENT_FRAGMENT\",\n    \"SHOW_DOCUMENT_TYPE\",\n    \"SHOW_ELEMENT\",\n    \"SHOW_ENTITY\",\n    \"SHOW_ENTITY_REFERENCE\",\n    \"SHOW_NOTATION\",\n    \"SHOW_PROCESSING_INSTRUCTION\",\n    \"SHOW_TEXT\",\n    \"SINE\",\n    \"SOUNDFIELD\",\n    \"SQLException\",\n    \"SQRT1_2\",\n    \"SQRT2\",\n    \"SQUARE\",\n    \"SRC_ALPHA\",\n    \"SRC_ALPHA_SATURATE\",\n    \"SRC_COLOR\",\n    \"START_TO_END\",\n    \"START_TO_START\",\n    \"STATIC_DRAW\",\n    \"STENCIL_ATTACHMENT\",\n    \"STENCIL_BACK_FAIL\",\n    \"STENCIL_BACK_FUNC\",\n    \"STENCIL_BACK_PASS_DEPTH_FAIL\",\n    \"STENCIL_BACK_PASS_DEPTH_PASS\",\n    \"STENCIL_BACK_REF\",\n    \"STENCIL_BACK_VALUE_MASK\",\n    \"STENCIL_BACK_WRITEMASK\",\n    \"STENCIL_BITS\",\n    \"STENCIL_BUFFER_BIT\",\n    \"STENCIL_CLEAR_VALUE\",\n    \"STENCIL_FAIL\",\n    \"STENCIL_FUNC\",\n    \"STENCIL_INDEX\",\n    \"STENCIL_INDEX8\",\n    \"STENCIL_PASS_DEPTH_FAIL\",\n    \"STENCIL_PASS_DEPTH_PASS\",\n    \"STENCIL_REF\",\n    \"STENCIL_TEST\",\n    \"STENCIL_VALUE_MASK\",\n    \"STENCIL_WRITEMASK\",\n    \"STREAM_DRAW\",\n    \"STRING_TYPE\",\n    \"STYLE_RULE\",\n    \"SUBPIXEL_BITS\",\n    \"SUPPORTS_RULE\",\n    \"SVGAElement\",\n    \"SVGAltGlyphDefElement\",\n    \"SVGAltGlyphElement\",\n    \"SVGAltGlyphItemElement\",\n    \"SVGAngle\",\n    \"SVGAnimateColorElement\",\n    \"SVGAnimateElement\",\n    \"SVGAnimateMotionElement\",\n    \"SVGAnimateTransformElement\",\n    \"SVGAnimatedAngle\",\n    \"SVGAnimatedBoolean\",\n    \"SVGAnimatedEnumeration\",\n    \"SVGAnimatedInteger\",\n    \"SVGAnimatedLength\",\n    \"SVGAnimatedLengthList\",\n    \"SVGAnimatedNumber\",\n    \"SVGAnimatedNumberList\",\n    \"SVGAnimatedPreserveAspectRatio\",\n    \"SVGAnimatedRect\",\n    \"SVGAnimatedString\",\n    \"SVGAnimatedTransformList\",\n    \"SVGAnimationElement\",\n    \"SVGCircleElement\",\n    \"SVGClipPathElement\",\n    \"SVGColor\",\n    \"SVGComponentTransferFunctionElement\",\n    \"SVGCursorElement\",\n    \"SVGDefsElement\",\n    \"SVGDescElement\",\n    \"SVGDiscardElement\",\n    \"SVGDocument\",\n    \"SVGElement\",\n    \"SVGElementInstance\",\n    \"SVGElementInstanceList\",\n    \"SVGEllipseElement\",\n    \"SVGException\",\n    \"SVGFEBlendElement\",\n    \"SVGFEColorMatrixElement\",\n    \"SVGFEComponentTransferElement\",\n    \"SVGFECompositeElement\",\n    \"SVGFEConvolveMatrixElement\",\n    \"SVGFEDiffuseLightingElement\",\n    \"SVGFEDisplacementMapElement\",\n    \"SVGFEDistantLightElement\",\n    \"SVGFEDropShadowElement\",\n    \"SVGFEFloodElement\",\n    \"SVGFEFuncAElement\",\n    \"SVGFEFuncBElement\",\n    \"SVGFEFuncGElement\",\n    \"SVGFEFuncRElement\",\n    \"SVGFEGaussianBlurElement\",\n    \"SVGFEImageElement\",\n    \"SVGFEMergeElement\",\n    \"SVGFEMergeNodeElement\",\n    \"SVGFEMorphologyElement\",\n    \"SVGFEOffsetElement\",\n    \"SVGFEPointLightElement\",\n    \"SVGFESpecularLightingElement\",\n    \"SVGFESpotLightElement\",\n    \"SVGFETileElement\",\n    \"SVGFETurbulenceElement\",\n    \"SVGFilterElement\",\n    \"SVGFontElement\",\n    \"SVGFontFaceElement\",\n    \"SVGFontFaceFormatElement\",\n    \"SVGFontFaceNameElement\",\n    \"SVGFontFaceSrcElement\",\n    \"SVGFontFaceUriElement\",\n    \"SVGForeignObjectElement\",\n    \"SVGGElement\",\n    \"SVGGeometryElement\",\n    \"SVGGlyphElement\",\n    \"SVGGlyphRefElement\",\n    \"SVGGradientElement\",\n    \"SVGGraphicsElement\",\n    \"SVGHKernElement\",\n    \"SVGImageElement\",\n    \"SVGLength\",\n    \"SVGLengthList\",\n    \"SVGLineElement\",\n    \"SVGLinearGradientElement\",\n    \"SVGMPathElement\",\n    \"SVGMarkerElement\",\n    \"SVGMaskElement\",\n    \"SVGMatrix\",\n    \"SVGMetadataElement\",\n    \"SVGMissingGlyphElement\",\n    \"SVGNumber\",\n    \"SVGNumberList\",\n    \"SVGPaint\",\n    \"SVGPathElement\",\n    \"SVGPathSeg\",\n    \"SVGPathSegArcAbs\",\n    \"SVGPathSegArcRel\",\n    \"SVGPathSegClosePath\",\n    \"SVGPathSegCurvetoCubicAbs\",\n    \"SVGPathSegCurvetoCubicRel\",\n    \"SVGPathSegCurvetoCubicSmoothAbs\",\n    \"SVGPathSegCurvetoCubicSmoothRel\",\n    \"SVGPathSegCurvetoQuadraticAbs\",\n    \"SVGPathSegCurvetoQuadraticRel\",\n    \"SVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"SVGPathSegCurvetoQuadraticSmoothRel\",\n    \"SVGPathSegLinetoAbs\",\n    \"SVGPathSegLinetoHorizontalAbs\",\n    \"SVGPathSegLinetoHorizontalRel\",\n    \"SVGPathSegLinetoRel\",\n    \"SVGPathSegLinetoVerticalAbs\",\n    \"SVGPathSegLinetoVerticalRel\",\n    \"SVGPathSegList\",\n    \"SVGPathSegMovetoAbs\",\n    \"SVGPathSegMovetoRel\",\n    \"SVGPatternElement\",\n    \"SVGPoint\",\n    \"SVGPointList\",\n    \"SVGPolygonElement\",\n    \"SVGPolylineElement\",\n    \"SVGPreserveAspectRatio\",\n    \"SVGRadialGradientElement\",\n    \"SVGRect\",\n    \"SVGRectElement\",\n    \"SVGRenderingIntent\",\n    \"SVGSVGElement\",\n    \"SVGScriptElement\",\n    \"SVGSetElement\",\n    \"SVGStopElement\",\n    \"SVGStringList\",\n    \"SVGStyleElement\",\n    \"SVGSwitchElement\",\n    \"SVGSymbolElement\",\n    \"SVGTRefElement\",\n    \"SVGTSpanElement\",\n    \"SVGTextContentElement\",\n    \"SVGTextElement\",\n    \"SVGTextPathElement\",\n    \"SVGTextPositioningElement\",\n    \"SVGTitleElement\",\n    \"SVGTransform\",\n    \"SVGTransformList\",\n    \"SVGUnitTypes\",\n    \"SVGUseElement\",\n    \"SVGVKernElement\",\n    \"SVGViewElement\",\n    \"SVGViewSpec\",\n    \"SVGZoomAndPan\",\n    \"SVGZoomEvent\",\n    \"SVG_ANGLETYPE_DEG\",\n    \"SVG_ANGLETYPE_GRAD\",\n    \"SVG_ANGLETYPE_RAD\",\n    \"SVG_ANGLETYPE_UNKNOWN\",\n    \"SVG_ANGLETYPE_UNSPECIFIED\",\n    \"SVG_CHANNEL_A\",\n    \"SVG_CHANNEL_B\",\n    \"SVG_CHANNEL_G\",\n    \"SVG_CHANNEL_R\",\n    \"SVG_CHANNEL_UNKNOWN\",\n    \"SVG_COLORTYPE_CURRENTCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_COLORTYPE_UNKNOWN\",\n    \"SVG_EDGEMODE_DUPLICATE\",\n    \"SVG_EDGEMODE_NONE\",\n    \"SVG_EDGEMODE_UNKNOWN\",\n    \"SVG_EDGEMODE_WRAP\",\n    \"SVG_FEBLEND_MODE_COLOR\",\n    \"SVG_FEBLEND_MODE_COLOR_BURN\",\n    \"SVG_FEBLEND_MODE_COLOR_DODGE\",\n    \"SVG_FEBLEND_MODE_DARKEN\",\n    \"SVG_FEBLEND_MODE_DIFFERENCE\",\n    \"SVG_FEBLEND_MODE_EXCLUSION\",\n    \"SVG_FEBLEND_MODE_HARD_LIGHT\",\n    \"SVG_FEBLEND_MODE_HUE\",\n    \"SVG_FEBLEND_MODE_LIGHTEN\",\n    \"SVG_FEBLEND_MODE_LUMINOSITY\",\n    \"SVG_FEBLEND_MODE_MULTIPLY\",\n    \"SVG_FEBLEND_MODE_NORMAL\",\n    \"SVG_FEBLEND_MODE_OVERLAY\",\n    \"SVG_FEBLEND_MODE_SATURATION\",\n    \"SVG_FEBLEND_MODE_SCREEN\",\n    \"SVG_FEBLEND_MODE_SOFT_LIGHT\",\n    \"SVG_FEBLEND_MODE_UNKNOWN\",\n    \"SVG_FECOLORMATRIX_TYPE_HUEROTATE\",\n    \"SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA\",\n    \"SVG_FECOLORMATRIX_TYPE_MATRIX\",\n    \"SVG_FECOLORMATRIX_TYPE_SATURATE\",\n    \"SVG_FECOLORMATRIX_TYPE_UNKNOWN\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_TABLE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_ARITHMETIC\",\n    \"SVG_FECOMPOSITE_OPERATOR_ATOP\",\n    \"SVG_FECOMPOSITE_OPERATOR_IN\",\n    \"SVG_FECOMPOSITE_OPERATOR_OUT\",\n    \"SVG_FECOMPOSITE_OPERATOR_OVER\",\n    \"SVG_FECOMPOSITE_OPERATOR_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_XOR\",\n    \"SVG_INVALID_VALUE_ERR\",\n    \"SVG_LENGTHTYPE_CM\",\n    \"SVG_LENGTHTYPE_EMS\",\n    \"SVG_LENGTHTYPE_EXS\",\n    \"SVG_LENGTHTYPE_IN\",\n    \"SVG_LENGTHTYPE_MM\",\n    \"SVG_LENGTHTYPE_NUMBER\",\n    \"SVG_LENGTHTYPE_PC\",\n    \"SVG_LENGTHTYPE_PERCENTAGE\",\n    \"SVG_LENGTHTYPE_PT\",\n    \"SVG_LENGTHTYPE_PX\",\n    \"SVG_LENGTHTYPE_UNKNOWN\",\n    \"SVG_MARKERUNITS_STROKEWIDTH\",\n    \"SVG_MARKERUNITS_UNKNOWN\",\n    \"SVG_MARKERUNITS_USERSPACEONUSE\",\n    \"SVG_MARKER_ORIENT_ANGLE\",\n    \"SVG_MARKER_ORIENT_AUTO\",\n    \"SVG_MARKER_ORIENT_UNKNOWN\",\n    \"SVG_MASKTYPE_ALPHA\",\n    \"SVG_MASKTYPE_LUMINANCE\",\n    \"SVG_MATRIX_NOT_INVERTABLE\",\n    \"SVG_MEETORSLICE_MEET\",\n    \"SVG_MEETORSLICE_SLICE\",\n    \"SVG_MEETORSLICE_UNKNOWN\",\n    \"SVG_MORPHOLOGY_OPERATOR_DILATE\",\n    \"SVG_MORPHOLOGY_OPERATOR_ERODE\",\n    \"SVG_MORPHOLOGY_OPERATOR_UNKNOWN\",\n    \"SVG_PAINTTYPE_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_NONE\",\n    \"SVG_PAINTTYPE_RGBCOLOR\",\n    \"SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PAINTTYPE_UNKNOWN\",\n    \"SVG_PAINTTYPE_URI\",\n    \"SVG_PAINTTYPE_URI_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_URI_NONE\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PRESERVEASPECTRATIO_NONE\",\n    \"SVG_PRESERVEASPECTRATIO_UNKNOWN\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMIN\",\n    \"SVG_SPREADMETHOD_PAD\",\n    \"SVG_SPREADMETHOD_REFLECT\",\n    \"SVG_SPREADMETHOD_REPEAT\",\n    \"SVG_SPREADMETHOD_UNKNOWN\",\n    \"SVG_STITCHTYPE_NOSTITCH\",\n    \"SVG_STITCHTYPE_STITCH\",\n    \"SVG_STITCHTYPE_UNKNOWN\",\n    \"SVG_TRANSFORM_MATRIX\",\n    \"SVG_TRANSFORM_ROTATE\",\n    \"SVG_TRANSFORM_SCALE\",\n    \"SVG_TRANSFORM_SKEWX\",\n    \"SVG_TRANSFORM_SKEWY\",\n    \"SVG_TRANSFORM_TRANSLATE\",\n    \"SVG_TRANSFORM_UNKNOWN\",\n    \"SVG_TURBULENCE_TYPE_FRACTALNOISE\",\n    \"SVG_TURBULENCE_TYPE_TURBULENCE\",\n    \"SVG_TURBULENCE_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\",\n    \"SVG_UNIT_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_USERSPACEONUSE\",\n    \"SVG_WRONG_TYPE_ERR\",\n    \"SVG_ZOOMANDPAN_DISABLE\",\n    \"SVG_ZOOMANDPAN_MAGNIFY\",\n    \"SVG_ZOOMANDPAN_UNKNOWN\",\n    \"SYNTAX_ERR\",\n    \"SavedPages\",\n    \"Screen\",\n    \"ScreenOrientation\",\n    \"Script\",\n    \"ScriptProcessorNode\",\n    \"ScrollAreaEvent\",\n    \"SecurityPolicyViolationEvent\",\n    \"Selection\",\n    \"ServiceWorker\",\n    \"ServiceWorkerContainer\",\n    \"ServiceWorkerRegistration\",\n    \"SessionDescription\",\n    \"Set\",\n    \"ShadowRoot\",\n    \"SharedWorker\",\n    \"SimpleGestureEvent\",\n    \"SpeechSynthesisEvent\",\n    \"SpeechSynthesisUtterance\",\n    \"StopIteration\",\n    \"Storage\",\n    \"StorageEvent\",\n    \"String\",\n    \"StyleSheet\",\n    \"StyleSheetList\",\n    \"SubtleCrypto\",\n    \"Symbol\",\n    \"SyntaxError\",\n    \"TEMPORARY\",\n    \"TEXTPATH_METHODTYPE_ALIGN\",\n    \"TEXTPATH_METHODTYPE_STRETCH\",\n    \"TEXTPATH_METHODTYPE_UNKNOWN\",\n    \"TEXTPATH_SPACINGTYPE_AUTO\",\n    \"TEXTPATH_SPACINGTYPE_EXACT\",\n    \"TEXTPATH_SPACINGTYPE_UNKNOWN\",\n    \"TEXTURE\",\n    \"TEXTURE0\",\n    \"TEXTURE1\",\n    \"TEXTURE10\",\n    \"TEXTURE11\",\n    \"TEXTURE12\",\n    \"TEXTURE13\",\n    \"TEXTURE14\",\n    \"TEXTURE15\",\n    \"TEXTURE16\",\n    \"TEXTURE17\",\n    \"TEXTURE18\",\n    \"TEXTURE19\",\n    \"TEXTURE2\",\n    \"TEXTURE20\",\n    \"TEXTURE21\",\n    \"TEXTURE22\",\n    \"TEXTURE23\",\n    \"TEXTURE24\",\n    \"TEXTURE25\",\n    \"TEXTURE26\",\n    \"TEXTURE27\",\n    \"TEXTURE28\",\n    \"TEXTURE29\",\n    \"TEXTURE3\",\n    \"TEXTURE30\",\n    \"TEXTURE31\",\n    \"TEXTURE4\",\n    \"TEXTURE5\",\n    \"TEXTURE6\",\n    \"TEXTURE7\",\n    \"TEXTURE8\",\n    \"TEXTURE9\",\n    \"TEXTURE_2D\",\n    \"TEXTURE_BINDING_2D\",\n    \"TEXTURE_BINDING_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\",\n    \"TEXTURE_MAG_FILTER\",\n    \"TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"TEXTURE_MIN_FILTER\",\n    \"TEXTURE_WRAP_S\",\n    \"TEXTURE_WRAP_T\",\n    \"TEXT_NODE\",\n    \"TIMEOUT\",\n    \"TIMEOUT_ERR\",\n    \"TOO_LARGE_ERR\",\n    \"TRANSACTION_INACTIVE_ERR\",\n    \"TRIANGLE\",\n    \"TRIANGLES\",\n    \"TRIANGLE_FAN\",\n    \"TRIANGLE_STRIP\",\n    \"TYPE_BACK_FORWARD\",\n    \"TYPE_ERR\",\n    \"TYPE_MISMATCH_ERR\",\n    \"TYPE_NAVIGATE\",\n    \"TYPE_RELOAD\",\n    \"TYPE_RESERVED\",\n    \"Text\",\n    \"TextDecoder\",\n    \"TextEncoder\",\n    \"TextEvent\",\n    \"TextMetrics\",\n    \"TextTrack\",\n    \"TextTrackCue\",\n    \"TextTrackCueList\",\n    \"TextTrackList\",\n    \"TimeEvent\",\n    \"TimeRanges\",\n    \"Touch\",\n    \"TouchEvent\",\n    \"TouchList\",\n    \"TrackEvent\",\n    \"TransitionEvent\",\n    \"TreeWalker\",\n    \"TypeError\",\n    \"UIEvent\",\n    \"UNCACHED\",\n    \"UNKNOWN_ERR\",\n    \"UNKNOWN_RULE\",\n    \"UNMASKED_RENDERER_WEBGL\",\n    \"UNMASKED_VENDOR_WEBGL\",\n    \"UNORDERED_NODE_ITERATOR_TYPE\",\n    \"UNORDERED_NODE_SNAPSHOT_TYPE\",\n    \"UNPACK_ALIGNMENT\",\n    \"UNPACK_COLORSPACE_CONVERSION_WEBGL\",\n    \"UNPACK_FLIP_Y_WEBGL\",\n    \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",\n    \"UNSCHEDULED_STATE\",\n    \"UNSENT\",\n    \"UNSIGNED_BYTE\",\n    \"UNSIGNED_INT\",\n    \"UNSIGNED_SHORT\",\n    \"UNSIGNED_SHORT_4_4_4_4\",\n    \"UNSIGNED_SHORT_5_5_5_1\",\n    \"UNSIGNED_SHORT_5_6_5\",\n    \"UNSPECIFIED_EVENT_TYPE_ERR\",\n    \"UPDATEREADY\",\n    \"URIError\",\n    \"URL\",\n    \"URLSearchParams\",\n    \"URLUnencoded\",\n    \"URL_MISMATCH_ERR\",\n    \"UTC\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"UserMessageHandler\",\n    \"UserMessageHandlersNamespace\",\n    \"UserProximityEvent\",\n    \"VALIDATE_STATUS\",\n    \"VALIDATION_ERR\",\n    \"VARIABLES_RULE\",\n    \"VENDOR\",\n    \"VERSION\",\n    \"VERSION_CHANGE\",\n    \"VERSION_ERR\",\n    \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",\n    \"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",\n    \"VERTEX_ATTRIB_ARRAY_ENABLED\",\n    \"VERTEX_ATTRIB_ARRAY_NORMALIZED\",\n    \"VERTEX_ATTRIB_ARRAY_POINTER\",\n    \"VERTEX_ATTRIB_ARRAY_SIZE\",\n    \"VERTEX_ATTRIB_ARRAY_STRIDE\",\n    \"VERTEX_ATTRIB_ARRAY_TYPE\",\n    \"VERTEX_SHADER\",\n    \"VERTICAL\",\n    \"VERTICAL_AXIS\",\n    \"VER_ERR\",\n    \"VIEWPORT\",\n    \"VIEWPORT_RULE\",\n    \"VTTCue\",\n    \"VTTRegion\",\n    \"ValidityState\",\n    \"VideoStreamTrack\",\n    \"WEBKIT_FILTER_RULE\",\n    \"WEBKIT_KEYFRAMES_RULE\",\n    \"WEBKIT_KEYFRAME_RULE\",\n    \"WEBKIT_REGION_RULE\",\n    \"WRONG_DOCUMENT_ERR\",\n    \"WaveShaperNode\",\n    \"WeakMap\",\n    \"WeakSet\",\n    \"WebGLActiveInfo\",\n    \"WebGLBuffer\",\n    \"WebGLContextEvent\",\n    \"WebGLFramebuffer\",\n    \"WebGLProgram\",\n    \"WebGLRenderbuffer\",\n    \"WebGLRenderingContext\",\n    \"WebGLShader\",\n    \"WebGLShaderPrecisionFormat\",\n    \"WebGLTexture\",\n    \"WebGLUniformLocation\",\n    \"WebGLVertexArray\",\n    \"WebKitAnimationEvent\",\n    \"WebKitBlobBuilder\",\n    \"WebKitCSSFilterRule\",\n    \"WebKitCSSFilterValue\",\n    \"WebKitCSSKeyframeRule\",\n    \"WebKitCSSKeyframesRule\",\n    \"WebKitCSSMatrix\",\n    \"WebKitCSSRegionRule\",\n    \"WebKitCSSTransformValue\",\n    \"WebKitDataCue\",\n    \"WebKitGamepad\",\n    \"WebKitMediaKeyError\",\n    \"WebKitMediaKeyMessageEvent\",\n    \"WebKitMediaKeySession\",\n    \"WebKitMediaKeys\",\n    \"WebKitMediaSource\",\n    \"WebKitMutationObserver\",\n    \"WebKitNamespace\",\n    \"WebKitPlaybackTargetAvailabilityEvent\",\n    \"WebKitPoint\",\n    \"WebKitShadowRoot\",\n    \"WebKitSourceBuffer\",\n    \"WebKitSourceBufferList\",\n    \"WebKitTransitionEvent\",\n    \"WebSocket\",\n    \"WheelEvent\",\n    \"Window\",\n    \"Worker\",\n    \"XMLDocument\",\n    \"XMLHttpRequest\",\n    \"XMLHttpRequestEventTarget\",\n    \"XMLHttpRequestException\",\n    \"XMLHttpRequestProgressEvent\",\n    \"XMLHttpRequestUpload\",\n    \"XMLSerializer\",\n    \"XMLStylesheetProcessingInstruction\",\n    \"XPathEvaluator\",\n    \"XPathException\",\n    \"XPathExpression\",\n    \"XPathNSResolver\",\n    \"XPathResult\",\n    \"XSLTProcessor\",\n    \"ZERO\",\n    \"_XD0M_\",\n    \"_YD0M_\",\n    \"__defineGetter__\",\n    \"__defineSetter__\",\n    \"__lookupGetter__\",\n    \"__lookupSetter__\",\n    \"__opera\",\n    \"__proto__\",\n    \"_browserjsran\",\n    \"a\",\n    \"aLink\",\n    \"abbr\",\n    \"abort\",\n    \"abs\",\n    \"absolute\",\n    \"acceleration\",\n    \"accelerationIncludingGravity\",\n    \"accelerator\",\n    \"accept\",\n    \"acceptCharset\",\n    \"acceptNode\",\n    \"accessKey\",\n    \"accessKeyLabel\",\n    \"accuracy\",\n    \"acos\",\n    \"acosh\",\n    \"action\",\n    \"actionURL\",\n    \"active\",\n    \"activeCues\",\n    \"activeElement\",\n    \"activeSourceBuffers\",\n    \"activeSourceCount\",\n    \"activeTexture\",\n    \"add\",\n    \"addBehavior\",\n    \"addCandidate\",\n    \"addColorStop\",\n    \"addCue\",\n    \"addElement\",\n    \"addEventListener\",\n    \"addFilter\",\n    \"addFromString\",\n    \"addFromUri\",\n    \"addIceCandidate\",\n    \"addImport\",\n    \"addListener\",\n    \"addNamed\",\n    \"addPageRule\",\n    \"addPath\",\n    \"addPointer\",\n    \"addRange\",\n    \"addRegion\",\n    \"addRule\",\n    \"addSearchEngine\",\n    \"addSourceBuffer\",\n    \"addStream\",\n    \"addTextTrack\",\n    \"addTrack\",\n    \"addWakeLockListener\",\n    \"addedNodes\",\n    \"additionalName\",\n    \"additiveSymbols\",\n    \"addons\",\n    \"adoptNode\",\n    \"adr\",\n    \"advance\",\n    \"alert\",\n    \"algorithm\",\n    \"align\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignContent\",\n    \"alignItems\",\n    \"alignSelf\",\n    \"alignmentBaseline\",\n    \"alinkColor\",\n    \"all\",\n    \"allowFullscreen\",\n    \"allowedDirections\",\n    \"alpha\",\n    \"alt\",\n    \"altGraphKey\",\n    \"altHtml\",\n    \"altKey\",\n    \"altLeft\",\n    \"altitude\",\n    \"altitudeAccuracy\",\n    \"amplitude\",\n    \"ancestorOrigins\",\n    \"anchor\",\n    \"anchorNode\",\n    \"anchorOffset\",\n    \"anchors\",\n    \"angle\",\n    \"animVal\",\n    \"animate\",\n    \"animatedInstanceRoot\",\n    \"animatedNormalizedPathSegList\",\n    \"animatedPathSegList\",\n    \"animatedPoints\",\n    \"animation\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-timing-function\",\n    \"animationDelay\",\n    \"animationDirection\",\n    \"animationDuration\",\n    \"animationFillMode\",\n    \"animationIterationCount\",\n    \"animationName\",\n    \"animationPlayState\",\n    \"animationStartTime\",\n    \"animationTimingFunction\",\n    \"animationsPaused\",\n    \"anniversary\",\n    \"app\",\n    \"appCodeName\",\n    \"appMinorVersion\",\n    \"appName\",\n    \"appNotifications\",\n    \"appVersion\",\n    \"append\",\n    \"appendBuffer\",\n    \"appendChild\",\n    \"appendData\",\n    \"appendItem\",\n    \"appendMedium\",\n    \"appendNamed\",\n    \"appendRule\",\n    \"appendStream\",\n    \"appendWindowEnd\",\n    \"appendWindowStart\",\n    \"applets\",\n    \"applicationCache\",\n    \"apply\",\n    \"applyElement\",\n    \"arc\",\n    \"arcTo\",\n    \"archive\",\n    \"areas\",\n    \"arguments\",\n    \"arrayBuffer\",\n    \"asin\",\n    \"asinh\",\n    \"assert\",\n    \"assign\",\n    \"async\",\n    \"atEnd\",\n    \"atan\",\n    \"atan2\",\n    \"atanh\",\n    \"atob\",\n    \"attachEvent\",\n    \"attachShader\",\n    \"attachments\",\n    \"attack\",\n    \"attrChange\",\n    \"attrName\",\n    \"attributeFilter\",\n    \"attributeName\",\n    \"attributeNamespace\",\n    \"attributeOldValue\",\n    \"attributes\",\n    \"audioTracks\",\n    \"autoIncrement\",\n    \"autobuffer\",\n    \"autocapitalize\",\n    \"autocomplete\",\n    \"autocorrect\",\n    \"autofocus\",\n    \"autoplay\",\n    \"availHeight\",\n    \"availLeft\",\n    \"availTop\",\n    \"availWidth\",\n    \"availability\",\n    \"available\",\n    \"aversion\",\n    \"axes\",\n    \"axis\",\n    \"azimuth\",\n    \"b\",\n    \"back\",\n    \"backface-visibility\",\n    \"backfaceVisibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-repeat\",\n    \"background-size\",\n    \"backgroundAttachment\",\n    \"backgroundBlendMode\",\n    \"backgroundClip\",\n    \"backgroundColor\",\n    \"backgroundImage\",\n    \"backgroundOrigin\",\n    \"backgroundPosition\",\n    \"backgroundPositionX\",\n    \"backgroundPositionY\",\n    \"backgroundRepeat\",\n    \"backgroundSize\",\n    \"badInput\",\n    \"balance\",\n    \"baseFrequencyX\",\n    \"baseFrequencyY\",\n    \"baseNode\",\n    \"baseOffset\",\n    \"baseURI\",\n    \"baseVal\",\n    \"baselineShift\",\n    \"battery\",\n    \"bday\",\n    \"beginElement\",\n    \"beginElementAt\",\n    \"beginPath\",\n    \"behavior\",\n    \"behaviorCookie\",\n    \"behaviorPart\",\n    \"behaviorUrns\",\n    \"beta\",\n    \"bezierCurveTo\",\n    \"bgColor\",\n    \"bgProperties\",\n    \"bias\",\n    \"big\",\n    \"binaryType\",\n    \"bind\",\n    \"bindAttribLocation\",\n    \"bindBuffer\",\n    \"bindFramebuffer\",\n    \"bindRenderbuffer\",\n    \"bindTexture\",\n    \"blendColor\",\n    \"blendEquation\",\n    \"blendEquationSeparate\",\n    \"blendFunc\",\n    \"blendFuncSeparate\",\n    \"blink\",\n    \"blob\",\n    \"blockDirection\",\n    \"blue\",\n    \"blur\",\n    \"body\",\n    \"bodyUsed\",\n    \"bold\",\n    \"bookmarks\",\n    \"booleanValue\",\n    \"border\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"borderBottom\",\n    \"borderBottomColor\",\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n    \"borderBottomStyle\",\n    \"borderBottomWidth\",\n    \"borderCollapse\",\n    \"borderColor\",\n    \"borderColorDark\",\n    \"borderColorLight\",\n    \"borderImage\",\n    \"borderImageOutset\",\n    \"borderImageRepeat\",\n    \"borderImageSlice\",\n    \"borderImageSource\",\n    \"borderImageWidth\",\n    \"borderLeft\",\n    \"borderLeftColor\",\n    \"borderLeftStyle\",\n    \"borderLeftWidth\",\n    \"borderRadius\",\n    \"borderRight\",\n    \"borderRightColor\",\n    \"borderRightStyle\",\n    \"borderRightWidth\",\n    \"borderSpacing\",\n    \"borderStyle\",\n    \"borderTop\",\n    \"borderTopColor\",\n    \"borderTopLeftRadius\",\n    \"borderTopRightRadius\",\n    \"borderTopStyle\",\n    \"borderTopWidth\",\n    \"borderWidth\",\n    \"bottom\",\n    \"bottomMargin\",\n    \"bound\",\n    \"boundElements\",\n    \"boundingClientRect\",\n    \"boundingHeight\",\n    \"boundingLeft\",\n    \"boundingTop\",\n    \"boundingWidth\",\n    \"bounds\",\n    \"box-decoration-break\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"boxDecorationBreak\",\n    \"boxShadow\",\n    \"boxSizing\",\n    \"breakAfter\",\n    \"breakBefore\",\n    \"breakInside\",\n    \"browserLanguage\",\n    \"btoa\",\n    \"bubbles\",\n    \"buffer\",\n    \"bufferData\",\n    \"bufferDepth\",\n    \"bufferSize\",\n    \"bufferSubData\",\n    \"buffered\",\n    \"bufferedAmount\",\n    \"buildID\",\n    \"buildNumber\",\n    \"button\",\n    \"buttonID\",\n    \"buttons\",\n    \"byteLength\",\n    \"byteOffset\",\n    \"c\",\n    \"call\",\n    \"caller\",\n    \"canBeFormatted\",\n    \"canBeMounted\",\n    \"canBeShared\",\n    \"canHaveChildren\",\n    \"canHaveHTML\",\n    \"canPlayType\",\n    \"cancel\",\n    \"cancelAnimationFrame\",\n    \"cancelBubble\",\n    \"cancelScheduledValues\",\n    \"cancelable\",\n    \"candidate\",\n    \"canvas\",\n    \"caption\",\n    \"caption-side\",\n    \"captionSide\",\n    \"captureEvents\",\n    \"captureStackTrace\",\n    \"caretPositionFromPoint\",\n    \"caretRangeFromPoint\",\n    \"cast\",\n    \"catch\",\n    \"category\",\n    \"cbrt\",\n    \"cd\",\n    \"ceil\",\n    \"cellIndex\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"cells\",\n    \"ch\",\n    \"chOff\",\n    \"chain\",\n    \"challenge\",\n    \"changedTouches\",\n    \"channel\",\n    \"channelCount\",\n    \"channelCountMode\",\n    \"channelInterpretation\",\n    \"char\",\n    \"charAt\",\n    \"charCode\",\n    \"charCodeAt\",\n    \"charIndex\",\n    \"characterSet\",\n    \"characterData\",\n    \"characterDataOldValue\",\n    \"charging\",\n    \"chargingTime\",\n    \"charset\",\n    \"checkEnclosure\",\n    \"checkFramebufferStatus\",\n    \"checkIntersection\",\n    \"checkValidity\",\n    \"checked\",\n    \"childElementCount\",\n    \"childList\",\n    \"childNodes\",\n    \"children\",\n    \"chrome\",\n    \"ciphertext\",\n    \"cite\",\n    \"classList\",\n    \"className\",\n    \"classid\",\n    \"clear\",\n    \"clearAttributes\",\n    \"clearColor\",\n    \"clearData\",\n    \"clearDepth\",\n    \"clearImmediate\",\n    \"clearInterval\",\n    \"clearMarks\",\n    \"clearMeasures\",\n    \"clearParameters\",\n    \"clearRect\",\n    \"clearResourceTimings\",\n    \"clearShadow\",\n    \"clearStencil\",\n    \"clearTimeout\",\n    \"clearWatch\",\n    \"click\",\n    \"clickCount\",\n    \"clientHeight\",\n    \"clientInformation\",\n    \"clientLeft\",\n    \"clientRect\",\n    \"clientRects\",\n    \"clientTop\",\n    \"clientWidth\",\n    \"clientX\",\n    \"clientY\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"clipBottom\",\n    \"clipLeft\",\n    \"clipPath\",\n    \"clipPathUnits\",\n    \"clipRight\",\n    \"clipRule\",\n    \"clipTop\",\n    \"clipboardData\",\n    \"clone\",\n    \"cloneContents\",\n    \"cloneNode\",\n    \"cloneRange\",\n    \"close\",\n    \"closePath\",\n    \"closed\",\n    \"closest\",\n    \"clz\",\n    \"clz32\",\n    \"cmp\",\n    \"code\",\n    \"codeBase\",\n    \"codePointAt\",\n    \"codeType\",\n    \"colSpan\",\n    \"collapse\",\n    \"collapseToEnd\",\n    \"collapseToStart\",\n    \"collapsed\",\n    \"collect\",\n    \"colno\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"colorDepth\",\n    \"colorInterpolation\",\n    \"colorInterpolationFilters\",\n    \"colorMask\",\n    \"colorType\",\n    \"cols\",\n    \"columnCount\",\n    \"columnFill\",\n    \"columnGap\",\n    \"columnNumber\",\n    \"columnRule\",\n    \"columnRuleColor\",\n    \"columnRuleStyle\",\n    \"columnRuleWidth\",\n    \"columnSpan\",\n    \"columnWidth\",\n    \"columns\",\n    \"command\",\n    \"commitPreferences\",\n    \"commonAncestorContainer\",\n    \"compact\",\n    \"compareBoundaryPoints\",\n    \"compareDocumentPosition\",\n    \"compareEndPoints\",\n    \"compareNode\",\n    \"comparePoint\",\n    \"compatMode\",\n    \"compatible\",\n    \"compile\",\n    \"compileShader\",\n    \"complete\",\n    \"componentFromPoint\",\n    \"compositionEndOffset\",\n    \"compositionStartOffset\",\n    \"compressedTexImage2D\",\n    \"compressedTexSubImage2D\",\n    \"concat\",\n    \"conditionText\",\n    \"coneInnerAngle\",\n    \"coneOuterAngle\",\n    \"coneOuterGain\",\n    \"confirm\",\n    \"confirmComposition\",\n    \"confirmSiteSpecificTrackingException\",\n    \"confirmWebWideTrackingException\",\n    \"connect\",\n    \"connectEnd\",\n    \"connectStart\",\n    \"connected\",\n    \"connection\",\n    \"connectionSpeed\",\n    \"console\",\n    \"consolidate\",\n    \"constrictionActive\",\n    \"constructor\",\n    \"contactID\",\n    \"contains\",\n    \"containsNode\",\n    \"content\",\n    \"contentDocument\",\n    \"contentEditable\",\n    \"contentOverflow\",\n    \"contentScriptType\",\n    \"contentStyleType\",\n    \"contentType\",\n    \"contentWindow\",\n    \"context\",\n    \"contextMenu\",\n    \"contextmenu\",\n    \"continue\",\n    \"continuous\",\n    \"control\",\n    \"controller\",\n    \"controls\",\n    \"convertToSpecifiedUnits\",\n    \"cookie\",\n    \"cookieEnabled\",\n    \"coords\",\n    \"copyFromChannel\",\n    \"copyTexImage2D\",\n    \"copyTexSubImage2D\",\n    \"copyToChannel\",\n    \"copyWithin\",\n    \"correspondingElement\",\n    \"correspondingUseElement\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counterIncrement\",\n    \"counterReset\",\n    \"cpuClass\",\n    \"cpuSleepAllowed\",\n    \"create\",\n    \"createAnalyser\",\n    \"createAnswer\",\n    \"createAttribute\",\n    \"createAttributeNS\",\n    \"createBiquadFilter\",\n    \"createBuffer\",\n    \"createBufferSource\",\n    \"createCDATASection\",\n    \"createCSSStyleSheet\",\n    \"createCaption\",\n    \"createChannelMerger\",\n    \"createChannelSplitter\",\n    \"createComment\",\n    \"createContextualFragment\",\n    \"createControlRange\",\n    \"createConvolver\",\n    \"createDTMFSender\",\n    \"createDataChannel\",\n    \"createDelay\",\n    \"createDelayNode\",\n    \"createDocument\",\n    \"createDocumentFragment\",\n    \"createDocumentType\",\n    \"createDynamicsCompressor\",\n    \"createElement\",\n    \"createElementNS\",\n    \"createEntityReference\",\n    \"createEvent\",\n    \"createEventObject\",\n    \"createExpression\",\n    \"createFramebuffer\",\n    \"createFunction\",\n    \"createGain\",\n    \"createGainNode\",\n    \"createHTMLDocument\",\n    \"createImageBitmap\",\n    \"createImageData\",\n    \"createIndex\",\n    \"createJavaScriptNode\",\n    \"createLinearGradient\",\n    \"createMediaElementSource\",\n    \"createMediaKeys\",\n    \"createMediaStreamDestination\",\n    \"createMediaStreamSource\",\n    \"createMutableFile\",\n    \"createNSResolver\",\n    \"createNodeIterator\",\n    \"createNotification\",\n    \"createObjectStore\",\n    \"createObjectURL\",\n    \"createOffer\",\n    \"createOscillator\",\n    \"createPanner\",\n    \"createPattern\",\n    \"createPeriodicWave\",\n    \"createPopup\",\n    \"createProcessingInstruction\",\n    \"createProgram\",\n    \"createRadialGradient\",\n    \"createRange\",\n    \"createRangeCollection\",\n    \"createRenderbuffer\",\n    \"createSVGAngle\",\n    \"createSVGLength\",\n    \"createSVGMatrix\",\n    \"createSVGNumber\",\n    \"createSVGPathSegArcAbs\",\n    \"createSVGPathSegArcRel\",\n    \"createSVGPathSegClosePath\",\n    \"createSVGPathSegCurvetoCubicAbs\",\n    \"createSVGPathSegCurvetoCubicRel\",\n    \"createSVGPathSegCurvetoCubicSmoothAbs\",\n    \"createSVGPathSegCurvetoCubicSmoothRel\",\n    \"createSVGPathSegCurvetoQuadraticAbs\",\n    \"createSVGPathSegCurvetoQuadraticRel\",\n    \"createSVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"createSVGPathSegCurvetoQuadraticSmoothRel\",\n    \"createSVGPathSegLinetoAbs\",\n    \"createSVGPathSegLinetoHorizontalAbs\",\n    \"createSVGPathSegLinetoHorizontalRel\",\n    \"createSVGPathSegLinetoRel\",\n    \"createSVGPathSegLinetoVerticalAbs\",\n    \"createSVGPathSegLinetoVerticalRel\",\n    \"createSVGPathSegMovetoAbs\",\n    \"createSVGPathSegMovetoRel\",\n    \"createSVGPoint\",\n    \"createSVGRect\",\n    \"createSVGTransform\",\n    \"createSVGTransformFromMatrix\",\n    \"createScriptProcessor\",\n    \"createSession\",\n    \"createShader\",\n    \"createShadowRoot\",\n    \"createStereoPanner\",\n    \"createStyleSheet\",\n    \"createTBody\",\n    \"createTFoot\",\n    \"createTHead\",\n    \"createTextNode\",\n    \"createTextRange\",\n    \"createTexture\",\n    \"createTouch\",\n    \"createTouchList\",\n    \"createTreeWalker\",\n    \"createWaveShaper\",\n    \"creationTime\",\n    \"crossOrigin\",\n    \"crypto\",\n    \"csi\",\n    \"cssFloat\",\n    \"cssRules\",\n    \"cssText\",\n    \"cssValueType\",\n    \"ctrlKey\",\n    \"ctrlLeft\",\n    \"cues\",\n    \"cullFace\",\n    \"currentNode\",\n    \"currentPage\",\n    \"currentScale\",\n    \"currentScript\",\n    \"currentSrc\",\n    \"currentState\",\n    \"currentStyle\",\n    \"currentTarget\",\n    \"currentTime\",\n    \"currentTranslate\",\n    \"currentView\",\n    \"cursor\",\n    \"curve\",\n    \"customError\",\n    \"cx\",\n    \"cy\",\n    \"d\",\n    \"data\",\n    \"dataFld\",\n    \"dataFormatAs\",\n    \"dataPageSize\",\n    \"dataSrc\",\n    \"dataTransfer\",\n    \"database\",\n    \"dataset\",\n    \"dateTime\",\n    \"db\",\n    \"debug\",\n    \"debuggerEnabled\",\n    \"declare\",\n    \"decode\",\n    \"decodeAudioData\",\n    \"decodingInfo\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"decrypt\",\n    \"default\",\n    \"defaultCharset\",\n    \"defaultChecked\",\n    \"defaultMuted\",\n    \"defaultPlaybackRate\",\n    \"defaultPrevented\",\n    \"defaultSelected\",\n    \"defaultStatus\",\n    \"defaultURL\",\n    \"defaultValue\",\n    \"defaultView\",\n    \"defaultstatus\",\n    \"defer\",\n    \"defineMagicFunction\",\n    \"defineMagicVariable\",\n    \"defineProperties\",\n    \"defineProperty\",\n    \"delayTime\",\n    \"delete\",\n    \"deleteBuffer\",\n    \"deleteCaption\",\n    \"deleteCell\",\n    \"deleteContents\",\n    \"deleteData\",\n    \"deleteDatabase\",\n    \"deleteFramebuffer\",\n    \"deleteFromDocument\",\n    \"deleteIndex\",\n    \"deleteMedium\",\n    \"deleteObjectStore\",\n    \"deleteProgram\",\n    \"deleteRenderbuffer\",\n    \"deleteRow\",\n    \"deleteRule\",\n    \"deleteShader\",\n    \"deleteTFoot\",\n    \"deleteTHead\",\n    \"deleteTexture\",\n    \"deliverChangeRecords\",\n    \"delivery\",\n    \"deliveryInfo\",\n    \"deliveryStatus\",\n    \"deliveryTimestamp\",\n    \"delta\",\n    \"deltaMode\",\n    \"deltaX\",\n    \"deltaY\",\n    \"deltaZ\",\n    \"depthFunc\",\n    \"depthMask\",\n    \"depthRange\",\n    \"deriveBits\",\n    \"deriveKey\",\n    \"description\",\n    \"deselectAll\",\n    \"designMode\",\n    \"destination\",\n    \"destinationURL\",\n    \"detach\",\n    \"detachEvent\",\n    \"detachShader\",\n    \"detail\",\n    \"detune\",\n    \"devicePixelRatio\",\n    \"deviceXDPI\",\n    \"deviceYDPI\",\n    \"diffuseConstant\",\n    \"digest\",\n    \"dimensions\",\n    \"dir\",\n    \"dirName\",\n    \"direction\",\n    \"dirxml\",\n    \"disable\",\n    \"disableVertexAttribArray\",\n    \"disabled\",\n    \"dischargingTime\",\n    \"disconnect\",\n    \"dispatchEvent\",\n    \"display\",\n    \"distanceModel\",\n    \"divisor\",\n    \"djsapi\",\n    \"djsproxy\",\n    \"doImport\",\n    \"doNotTrack\",\n    \"doScroll\",\n    \"doctype\",\n    \"document\",\n    \"documentElement\",\n    \"documentMode\",\n    \"documentURI\",\n    \"dolphin\",\n    \"dolphinGameCenter\",\n    \"dolphininfo\",\n    \"dolphinmeta\",\n    \"domComplete\",\n    \"domContentLoadedEventEnd\",\n    \"domContentLoadedEventStart\",\n    \"domInteractive\",\n    \"domLoading\",\n    \"domain\",\n    \"domainLookupEnd\",\n    \"domainLookupStart\",\n    \"dominant-baseline\",\n    \"dominantBaseline\",\n    \"done\",\n    \"dopplerFactor\",\n    \"download\",\n    \"dragDrop\",\n    \"draggable\",\n    \"drawArrays\",\n    \"drawArraysInstancedANGLE\",\n    \"drawCustomFocusRing\",\n    \"drawElements\",\n    \"drawElementsInstancedANGLE\",\n    \"drawFocusIfNeeded\",\n    \"drawImage\",\n    \"drawImageFromRect\",\n    \"drawSystemFocusRing\",\n    \"drawingBufferHeight\",\n    \"drawingBufferWidth\",\n    \"dropEffect\",\n    \"droppedVideoFrames\",\n    \"dropzone\",\n    \"dump\",\n    \"duplicate\",\n    \"duration\",\n    \"dvname\",\n    \"dvnum\",\n    \"dx\",\n    \"dy\",\n    \"dynsrc\",\n    \"e\",\n    \"edgeMode\",\n    \"effectAllowed\",\n    \"elapsedTime\",\n    \"elementFromPoint\",\n    \"elements\",\n    \"elevation\",\n    \"ellipse\",\n    \"email\",\n    \"embeds\",\n    \"empty\",\n    \"empty-cells\",\n    \"emptyCells\",\n    \"enable\",\n    \"enableBackground\",\n    \"enableStyleSheetsForSet\",\n    \"enableVertexAttribArray\",\n    \"enabled\",\n    \"enabledPlugin\",\n    \"encode\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"encoding\",\n    \"encrypt\",\n    \"enctype\",\n    \"end\",\n    \"endContainer\",\n    \"endElement\",\n    \"endElementAt\",\n    \"endOfStream\",\n    \"endOffset\",\n    \"endTime\",\n    \"ended\",\n    \"endsWith\",\n    \"entities\",\n    \"entries\",\n    \"entryType\",\n    \"enumerate\",\n    \"enumerateEditable\",\n    \"error\",\n    \"errorCode\",\n    \"escape\",\n    \"eval\",\n    \"evaluate\",\n    \"event\",\n    \"eventPhase\",\n    \"every\",\n    \"exception\",\n    \"exec\",\n    \"execCommand\",\n    \"execCommandShowHelp\",\n    \"execScript\",\n    \"exitFullscreen\",\n    \"exitPointerLock\",\n    \"exp\",\n    \"expand\",\n    \"expandEntityReferences\",\n    \"expando\",\n    \"expansion\",\n    \"expiryDate\",\n    \"explicitOriginalTarget\",\n    \"expm1\",\n    \"exponent\",\n    \"exponentialRampToValueAtTime\",\n    \"exportKey\",\n    \"extend\",\n    \"extensions\",\n    \"extentNode\",\n    \"extentOffset\",\n    \"external\",\n    \"externalResourcesRequired\",\n    \"extractContents\",\n    \"extractable\",\n    \"f\",\n    \"face\",\n    \"factoryReset\",\n    \"fallback\",\n    \"familyName\",\n    \"farthestViewportElement\",\n    \"fastSeek\",\n    \"fatal\",\n    \"fetch\",\n    \"fetchStart\",\n    \"fftSize\",\n    \"fgColor\",\n    \"fileCreatedDate\",\n    \"fileHandle\",\n    \"fileModifiedDate\",\n    \"fileName\",\n    \"fileSize\",\n    \"fileUpdatedDate\",\n    \"filename\",\n    \"files\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"fillOpacity\",\n    \"fillRect\",\n    \"fillRule\",\n    \"fillStyle\",\n    \"fillText\",\n    \"filter\",\n    \"filterResX\",\n    \"filterResY\",\n    \"filterUnits\",\n    \"filters\",\n    \"finally\",\n    \"find\",\n    \"findIndex\",\n    \"findRule\",\n    \"findText\",\n    \"finish\",\n    \"fireEvent\",\n    \"firstChild\",\n    \"firstElementChild\",\n    \"firstPage\",\n    \"fixed\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"flexBasis\",\n    \"flexDirection\",\n    \"flexFlow\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexWrap\",\n    \"flipX\",\n    \"flipY\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"floodColor\",\n    \"floodOpacity\",\n    \"floor\",\n    \"flush\",\n    \"focus\",\n    \"focusNode\",\n    \"focusOffset\",\n    \"font\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-weight\",\n    \"fontFamily\",\n    \"fontFeatureSettings\",\n    \"fontKerning\",\n    \"fontLanguageOverride\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"fontSmoothingEnabled\",\n    \"fontStretch\",\n    \"fontStyle\",\n    \"fontSynthesis\",\n    \"fontVariant\",\n    \"fontVariantAlternates\",\n    \"fontVariantCaps\",\n    \"fontVariantEastAsian\",\n    \"fontVariantLigatures\",\n    \"fontVariantNumeric\",\n    \"fontVariantPosition\",\n    \"fontWeight\",\n    \"fontcolor\",\n    \"fonts\",\n    \"fontsize\",\n    \"for\",\n    \"forEach\",\n    \"forceRedraw\",\n    \"form\",\n    \"formAction\",\n    \"formEnctype\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"format\",\n    \"forms\",\n    \"forward\",\n    \"fr\",\n    \"frame\",\n    \"frameBorder\",\n    \"frameElement\",\n    \"frameSpacing\",\n    \"framebufferRenderbuffer\",\n    \"framebufferTexture2D\",\n    \"frames\",\n    \"freeSpace\",\n    \"freeze\",\n    \"frequency\",\n    \"frequencyBinCount\",\n    \"from\",\n    \"fromCharCode\",\n    \"fromCodePoint\",\n    \"fromElement\",\n    \"frontFace\",\n    \"fround\",\n    \"fullScreen\",\n    \"fullscreenElement\",\n    \"fullscreenEnabled\",\n    \"fx\",\n    \"fy\",\n    \"gain\",\n    \"gamepad\",\n    \"gamma\",\n    \"genderIdentity\",\n    \"generateKey\",\n    \"generateMipmap\",\n    \"generateRequest\",\n    \"geolocation\",\n    \"gestureObject\",\n    \"get\",\n    \"getActiveAttrib\",\n    \"getActiveUniform\",\n    \"getAdjacentText\",\n    \"getAll\",\n    \"getAllResponseHeaders\",\n    \"getAsFile\",\n    \"getAsString\",\n    \"getAttachedShaders\",\n    \"getAttribLocation\",\n    \"getAttribute\",\n    \"getAttributeNS\",\n    \"getAttributeNode\",\n    \"getAttributeNodeNS\",\n    \"getAudioTracks\",\n    \"getBBox\",\n    \"getBattery\",\n    \"getBlob\",\n    \"getBookmark\",\n    \"getBoundingClientRect\",\n    \"getBufferParameter\",\n    \"getByteFrequencyData\",\n    \"getByteTimeDomainData\",\n    \"getCSSCanvasContext\",\n    \"getCTM\",\n    \"getCandidateWindowClientRect\",\n    \"getChannelData\",\n    \"getCharNumAtPosition\",\n    \"getClientRect\",\n    \"getClientRects\",\n    \"getCompositionAlternatives\",\n    \"getComputedStyle\",\n    \"getComputedTextLength\",\n    \"getConfiguration\",\n    \"getContext\",\n    \"getContextAttributes\",\n    \"getCounterValue\",\n    \"getCueAsHTML\",\n    \"getCueById\",\n    \"getCurrentPosition\",\n    \"getCurrentTime\",\n    \"getData\",\n    \"getDatabaseNames\",\n    \"getDate\",\n    \"getDay\",\n    \"getDefaultComputedStyle\",\n    \"getDestinationInsertionPoints\",\n    \"getDistributedNodes\",\n    \"getEditable\",\n    \"getElementById\",\n    \"getElementsByClassName\",\n    \"getElementsByName\",\n    \"getElementsByTagName\",\n    \"getElementsByTagNameNS\",\n    \"getEnclosureList\",\n    \"getEndPositionOfChar\",\n    \"getEntries\",\n    \"getEntriesByName\",\n    \"getEntriesByType\",\n    \"getError\",\n    \"getExtension\",\n    \"getExtentOfChar\",\n    \"getFeature\",\n    \"getFile\",\n    \"getFloat32\",\n    \"getFloat64\",\n    \"getFloatFrequencyData\",\n    \"getFloatTimeDomainData\",\n    \"getFloatValue\",\n    \"getFramebufferAttachmentParameter\",\n    \"getFrequencyResponse\",\n    \"getFullYear\",\n    \"getGamepads\",\n    \"getHours\",\n    \"getImageData\",\n    \"getInt16\",\n    \"getInt32\",\n    \"getInt8\",\n    \"getIntersectionList\",\n    \"getItem\",\n    \"getItems\",\n    \"getKey\",\n    \"getLineDash\",\n    \"getLocalStreams\",\n    \"getMarks\",\n    \"getMatchedCSSRules\",\n    \"getMeasures\",\n    \"getMetadata\",\n    \"getMilliseconds\",\n    \"getMinutes\",\n    \"getModifierState\",\n    \"getMonth\",\n    \"getNamedItem\",\n    \"getNamedItemNS\",\n    \"getNotifier\",\n    \"getNumberOfChars\",\n    \"getOverrideHistoryNavigationMode\",\n    \"getOverrideStyle\",\n    \"getOwnPropertyDescriptor\",\n    \"getOwnPropertyNames\",\n    \"getOwnPropertySymbols\",\n    \"getParameter\",\n    \"getPathSegAtLength\",\n    \"getPointAtLength\",\n    \"getPreference\",\n    \"getPreferenceDefault\",\n    \"getPresentationAttribute\",\n    \"getPreventDefault\",\n    \"getProgramInfoLog\",\n    \"getProgramParameter\",\n    \"getPropertyCSSValue\",\n    \"getPropertyPriority\",\n    \"getPropertyShorthand\",\n    \"getPropertyValue\",\n    \"getPrototypeOf\",\n    \"getRGBColorValue\",\n    \"getRandomValues\",\n    \"getRangeAt\",\n    \"getReceivers\",\n    \"getRectValue\",\n    \"getRegistration\",\n    \"getRemoteStreams\",\n    \"getRenderbufferParameter\",\n    \"getResponseHeader\",\n    \"getRoot\",\n    \"getRotationOfChar\",\n    \"getSVGDocument\",\n    \"getScreenCTM\",\n    \"getSeconds\",\n    \"getSelection\",\n    \"getSenders\",\n    \"getShaderInfoLog\",\n    \"getShaderParameter\",\n    \"getShaderPrecisionFormat\",\n    \"getShaderSource\",\n    \"getSimpleDuration\",\n    \"getSiteIcons\",\n    \"getSources\",\n    \"getSpeculativeParserUrls\",\n    \"getStartPositionOfChar\",\n    \"getStartTime\",\n    \"getStats\",\n    \"getStorageUpdates\",\n    \"getStreamById\",\n    \"getStringValue\",\n    \"getSubStringLength\",\n    \"getSubscription\",\n    \"getSupportedExtensions\",\n    \"getTexParameter\",\n    \"getTime\",\n    \"getTimezoneOffset\",\n    \"getTotalLength\",\n    \"getTrackById\",\n    \"getTracks\",\n    \"getTransformToElement\",\n    \"getUTCDate\",\n    \"getUTCDay\",\n    \"getUTCFullYear\",\n    \"getUTCHours\",\n    \"getUTCMilliseconds\",\n    \"getUTCMinutes\",\n    \"getUTCMonth\",\n    \"getUTCSeconds\",\n    \"getUint16\",\n    \"getUint32\",\n    \"getUint8\",\n    \"getUniform\",\n    \"getUniformLocation\",\n    \"getUserMedia\",\n    \"getValues\",\n    \"getVarDate\",\n    \"getVariableValue\",\n    \"getVertexAttrib\",\n    \"getVertexAttribOffset\",\n    \"getVideoPlaybackQuality\",\n    \"getVideoTracks\",\n    \"getWakeLockState\",\n    \"getYear\",\n    \"givenName\",\n    \"global\",\n    \"globalAlpha\",\n    \"globalCompositeOperation\",\n    \"glyphOrientationHorizontal\",\n    \"glyphOrientationVertical\",\n    \"glyphRef\",\n    \"go\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"grammars\",\n    \"green\",\n    \"group\",\n    \"groupCollapsed\",\n    \"groupEnd\",\n    \"hardwareConcurrency\",\n    \"has\",\n    \"hasAttribute\",\n    \"hasAttributeNS\",\n    \"hasAttributes\",\n    \"hasChildNodes\",\n    \"hasComposition\",\n    \"hasExtension\",\n    \"hasFeature\",\n    \"hasFocus\",\n    \"hasLayout\",\n    \"hasOwnProperty\",\n    \"hash\",\n    \"head\",\n    \"headers\",\n    \"heading\",\n    \"height\",\n    \"hidden\",\n    \"hide\",\n    \"hideFocus\",\n    \"high\",\n    \"hint\",\n    \"history\",\n    \"honorificPrefix\",\n    \"honorificSuffix\",\n    \"horizontalOverflow\",\n    \"host\",\n    \"hostname\",\n    \"href\",\n    \"hreflang\",\n    \"hspace\",\n    \"html5TagCheckInerface\",\n    \"htmlFor\",\n    \"htmlText\",\n    \"httpEquiv\",\n    \"hwTimestamp\",\n    \"hypot\",\n    \"iccId\",\n    \"iceConnectionState\",\n    \"iceGatheringState\",\n    \"icon\",\n    \"id\",\n    \"identifier\",\n    \"identity\",\n    \"ignoreBOM\",\n    \"ignoreCase\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"imageOrientation\",\n    \"imageRendering\",\n    \"images\",\n    \"ime-mode\",\n    \"imeMode\",\n    \"implementation\",\n    \"importKey\",\n    \"importNode\",\n    \"importStylesheet\",\n    \"imports\",\n    \"impp\",\n    \"imul\",\n    \"in1\",\n    \"in2\",\n    \"inBandMetadataTrackDispatchType\",\n    \"inRange\",\n    \"includes\",\n    \"incremental\",\n    \"indeterminate\",\n    \"index\",\n    \"indexNames\",\n    \"indexOf\",\n    \"indexedDB\",\n    \"inertiaDestinationX\",\n    \"inertiaDestinationY\",\n    \"info\",\n    \"init\",\n    \"initAnimationEvent\",\n    \"initBeforeLoadEvent\",\n    \"initClipboardEvent\",\n    \"initCloseEvent\",\n    \"initCommandEvent\",\n    \"initCompositionEvent\",\n    \"initCustomEvent\",\n    \"initData\",\n    \"initDeviceMotionEvent\",\n    \"initDeviceOrientationEvent\",\n    \"initDragEvent\",\n    \"initErrorEvent\",\n    \"initEvent\",\n    \"initFocusEvent\",\n    \"initGestureEvent\",\n    \"initHashChangeEvent\",\n    \"initKeyEvent\",\n    \"initKeyboardEvent\",\n    \"initMSManipulationEvent\",\n    \"initMessageEvent\",\n    \"initMouseEvent\",\n    \"initMouseScrollEvent\",\n    \"initMouseWheelEvent\",\n    \"initMutationEvent\",\n    \"initNSMouseEvent\",\n    \"initOverflowEvent\",\n    \"initPageEvent\",\n    \"initPageTransitionEvent\",\n    \"initPointerEvent\",\n    \"initPopStateEvent\",\n    \"initProgressEvent\",\n    \"initScrollAreaEvent\",\n    \"initSimpleGestureEvent\",\n    \"initStorageEvent\",\n    \"initTextEvent\",\n    \"initTimeEvent\",\n    \"initTouchEvent\",\n    \"initTransitionEvent\",\n    \"initUIEvent\",\n    \"initWebKitAnimationEvent\",\n    \"initWebKitTransitionEvent\",\n    \"initWebKitWheelEvent\",\n    \"initWheelEvent\",\n    \"initialTime\",\n    \"initialize\",\n    \"initiatorType\",\n    \"inner\",\n    \"innerHTML\",\n    \"innerHeight\",\n    \"innerText\",\n    \"innerWidth\",\n    \"input\",\n    \"inputBuffer\",\n    \"inputEncoding\",\n    \"inputMethod\",\n    \"insertAdjacentElement\",\n    \"insertAdjacentHTML\",\n    \"insertAdjacentText\",\n    \"insertBefore\",\n    \"insertCell\",\n    \"insertData\",\n    \"insertItemBefore\",\n    \"insertNode\",\n    \"insertRow\",\n    \"insertRule\",\n    \"instanceRoot\",\n    \"intercept\",\n    \"interimResults\",\n    \"internalSubset\",\n    \"intersectsNode\",\n    \"interval\",\n    \"invalidIteratorState\",\n    \"inverse\",\n    \"invertSelf\",\n    \"is\",\n    \"is2D\",\n    \"isAlternate\",\n    \"isArray\",\n    \"isBingCurrentSearchDefault\",\n    \"isBuffer\",\n    \"isCandidateWindowVisible\",\n    \"isChar\",\n    \"isCollapsed\",\n    \"isComposing\",\n    \"isContentEditable\",\n    \"isContentHandlerRegistered\",\n    \"isContextLost\",\n    \"isDefaultNamespace\",\n    \"isDisabled\",\n    \"isEnabled\",\n    \"isEqual\",\n    \"isEqualNode\",\n    \"isExtensible\",\n    \"isFinite\",\n    \"isFramebuffer\",\n    \"isFrozen\",\n    \"isGenerator\",\n    \"isId\",\n    \"isInjected\",\n    \"isInteger\",\n    \"isMap\",\n    \"isMultiLine\",\n    \"isNaN\",\n    \"isOpen\",\n    \"isPointInFill\",\n    \"isPointInPath\",\n    \"isPointInRange\",\n    \"isPointInStroke\",\n    \"isPrefAlternate\",\n    \"isPrimary\",\n    \"isProgram\",\n    \"isPropertyImplicit\",\n    \"isProtocolHandlerRegistered\",\n    \"isPrototypeOf\",\n    \"isRenderbuffer\",\n    \"isSafeInteger\",\n    \"isSameNode\",\n    \"isSealed\",\n    \"isShader\",\n    \"isSupported\",\n    \"isTextEdit\",\n    \"isTexture\",\n    \"isTrusted\",\n    \"isTypeSupported\",\n    \"isView\",\n    \"isolation\",\n    \"italics\",\n    \"item\",\n    \"itemId\",\n    \"itemProp\",\n    \"itemRef\",\n    \"itemScope\",\n    \"itemType\",\n    \"itemValue\",\n    \"iterateNext\",\n    \"iterator\",\n    \"javaEnabled\",\n    \"jobTitle\",\n    \"join\",\n    \"json\",\n    \"justify-content\",\n    \"justifyContent\",\n    \"k1\",\n    \"k2\",\n    \"k3\",\n    \"k4\",\n    \"kernelMatrix\",\n    \"kernelUnitLengthX\",\n    \"kernelUnitLengthY\",\n    \"kerning\",\n    \"key\",\n    \"keyCode\",\n    \"keyFor\",\n    \"keyIdentifier\",\n    \"keyLightEnabled\",\n    \"keyLocation\",\n    \"keyPath\",\n    \"keySystem\",\n    \"keyText\",\n    \"keyUsage\",\n    \"keys\",\n    \"keytype\",\n    \"kind\",\n    \"knee\",\n    \"label\",\n    \"labels\",\n    \"lang\",\n    \"language\",\n    \"languages\",\n    \"largeArcFlag\",\n    \"lastChild\",\n    \"lastElementChild\",\n    \"lastEventId\",\n    \"lastIndex\",\n    \"lastIndexOf\",\n    \"lastMatch\",\n    \"lastMessageSubject\",\n    \"lastMessageType\",\n    \"lastModified\",\n    \"lastModifiedDate\",\n    \"lastPage\",\n    \"lastParen\",\n    \"lastState\",\n    \"lastStyleSheetSet\",\n    \"latitude\",\n    \"layerX\",\n    \"layerY\",\n    \"layoutFlow\",\n    \"layoutGrid\",\n    \"layoutGridChar\",\n    \"layoutGridLine\",\n    \"layoutGridMode\",\n    \"layoutGridType\",\n    \"lbound\",\n    \"left\",\n    \"leftContext\",\n    \"leftMargin\",\n    \"length\",\n    \"lengthAdjust\",\n    \"lengthComputable\",\n    \"letter-spacing\",\n    \"letterSpacing\",\n    \"level\",\n    \"lighting-color\",\n    \"lightingColor\",\n    \"limitingConeAngle\",\n    \"line\",\n    \"line-height\",\n    \"lineAlign\",\n    \"lineBreak\",\n    \"lineCap\",\n    \"lineDashOffset\",\n    \"lineHeight\",\n    \"lineJoin\",\n    \"lineNumber\",\n    \"lineTo\",\n    \"lineWidth\",\n    \"linearRampToValueAtTime\",\n    \"lineno\",\n    \"link\",\n    \"linkColor\",\n    \"linkProgram\",\n    \"links\",\n    \"list\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"listStyle\",\n    \"listStyleImage\",\n    \"listStylePosition\",\n    \"listStyleType\",\n    \"listener\",\n    \"load\",\n    \"loadEventEnd\",\n    \"loadEventStart\",\n    \"loadTimes\",\n    \"loaded\",\n    \"localDescription\",\n    \"localName\",\n    \"localStorage\",\n    \"locale\",\n    \"localeCompare\",\n    \"location\",\n    \"locationbar\",\n    \"lock\",\n    \"lockedFile\",\n    \"log\",\n    \"log10\",\n    \"log1p\",\n    \"log2\",\n    \"logicalXDPI\",\n    \"logicalYDPI\",\n    \"longDesc\",\n    \"longitude\",\n    \"lookupNamespaceURI\",\n    \"lookupPrefix\",\n    \"loop\",\n    \"loopEnd\",\n    \"loopStart\",\n    \"looping\",\n    \"low\",\n    \"lower\",\n    \"lowerBound\",\n    \"lowerOpen\",\n    \"lowsrc\",\n    \"m11\",\n    \"m12\",\n    \"m13\",\n    \"m14\",\n    \"m21\",\n    \"m22\",\n    \"m23\",\n    \"m24\",\n    \"m31\",\n    \"m32\",\n    \"m33\",\n    \"m34\",\n    \"m41\",\n    \"m42\",\n    \"m43\",\n    \"m44\",\n    \"manifest\",\n    \"map\",\n    \"mapping\",\n    \"margin\",\n    \"margin-bottom\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"marginBottom\",\n    \"marginHeight\",\n    \"marginLeft\",\n    \"marginRight\",\n    \"marginTop\",\n    \"marginWidth\",\n    \"mark\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-offset\",\n    \"marker-start\",\n    \"markerEnd\",\n    \"markerHeight\",\n    \"markerMid\",\n    \"markerOffset\",\n    \"markerStart\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"marks\",\n    \"mask\",\n    \"mask-type\",\n    \"maskContentUnits\",\n    \"maskType\",\n    \"maskUnits\",\n    \"match\",\n    \"matchMedia\",\n    \"matchMedium\",\n    \"matches\",\n    \"matrix\",\n    \"matrixTransform\",\n    \"max\",\n    \"max-height\",\n    \"max-width\",\n    \"maxAlternatives\",\n    \"maxChannelCount\",\n    \"maxConnectionsPerServer\",\n    \"maxDecibels\",\n    \"maxDistance\",\n    \"maxHeight\",\n    \"maxLength\",\n    \"maxTouchPoints\",\n    \"maxValue\",\n    \"maxWidth\",\n    \"measure\",\n    \"measureText\",\n    \"media\",\n    \"mediaCapabilities\",\n    \"mediaDevices\",\n    \"mediaElement\",\n    \"mediaGroup\",\n    \"mediaKeys\",\n    \"mediaText\",\n    \"meetOrSlice\",\n    \"memory\",\n    \"menubar\",\n    \"mergeAttributes\",\n    \"message\",\n    \"messageClass\",\n    \"messageHandlers\",\n    \"metaKey\",\n    \"method\",\n    \"mimeType\",\n    \"mimeTypes\",\n    \"min\",\n    \"min-height\",\n    \"min-width\",\n    \"minDecibels\",\n    \"minHeight\",\n    \"minValue\",\n    \"minWidth\",\n    \"miterLimit\",\n    \"mix-blend-mode\",\n    \"mixBlendMode\",\n    \"mode\",\n    \"modify\",\n    \"mount\",\n    \"move\",\n    \"moveBy\",\n    \"moveEnd\",\n    \"moveFirst\",\n    \"moveFocusDown\",\n    \"moveFocusLeft\",\n    \"moveFocusRight\",\n    \"moveFocusUp\",\n    \"moveNext\",\n    \"moveRow\",\n    \"moveStart\",\n    \"moveTo\",\n    \"moveToBookmark\",\n    \"moveToElementText\",\n    \"moveToPoint\",\n    \"mozAdd\",\n    \"mozAnimationStartTime\",\n    \"mozAnon\",\n    \"mozApps\",\n    \"mozAudioCaptured\",\n    \"mozAudioChannelType\",\n    \"mozAutoplayEnabled\",\n    \"mozCancelAnimationFrame\",\n    \"mozCancelFullScreen\",\n    \"mozCancelRequestAnimationFrame\",\n    \"mozCaptureStream\",\n    \"mozCaptureStreamUntilEnded\",\n    \"mozClearDataAt\",\n    \"mozContact\",\n    \"mozContacts\",\n    \"mozCreateFileHandle\",\n    \"mozCurrentTransform\",\n    \"mozCurrentTransformInverse\",\n    \"mozCursor\",\n    \"mozDash\",\n    \"mozDashOffset\",\n    \"mozDecodedFrames\",\n    \"mozExitPointerLock\",\n    \"mozFillRule\",\n    \"mozFragmentEnd\",\n    \"mozFrameDelay\",\n    \"mozFullScreen\",\n    \"mozFullScreenElement\",\n    \"mozFullScreenEnabled\",\n    \"mozGetAll\",\n    \"mozGetAllKeys\",\n    \"mozGetAsFile\",\n    \"mozGetDataAt\",\n    \"mozGetMetadata\",\n    \"mozGetUserMedia\",\n    \"mozHasAudio\",\n    \"mozHasItem\",\n    \"mozHidden\",\n    \"mozImageSmoothingEnabled\",\n    \"mozIndexedDB\",\n    \"mozInnerScreenX\",\n    \"mozInnerScreenY\",\n    \"mozInputSource\",\n    \"mozIsTextField\",\n    \"mozItem\",\n    \"mozItemCount\",\n    \"mozItems\",\n    \"mozLength\",\n    \"mozLockOrientation\",\n    \"mozMatchesSelector\",\n    \"mozMovementX\",\n    \"mozMovementY\",\n    \"mozOpaque\",\n    \"mozOrientation\",\n    \"mozPaintCount\",\n    \"mozPaintedFrames\",\n    \"mozParsedFrames\",\n    \"mozPay\",\n    \"mozPointerLockElement\",\n    \"mozPresentedFrames\",\n    \"mozPreservesPitch\",\n    \"mozPressure\",\n    \"mozPrintCallback\",\n    \"mozRTCIceCandidate\",\n    \"mozRTCPeerConnection\",\n    \"mozRTCSessionDescription\",\n    \"mozRemove\",\n    \"mozRequestAnimationFrame\",\n    \"mozRequestFullScreen\",\n    \"mozRequestPointerLock\",\n    \"mozSetDataAt\",\n    \"mozSetImageElement\",\n    \"mozSourceNode\",\n    \"mozSrcObject\",\n    \"mozSystem\",\n    \"mozTCPSocket\",\n    \"mozTextStyle\",\n    \"mozTypesAt\",\n    \"mozUnlockOrientation\",\n    \"mozUserCancelled\",\n    \"mozVisibilityState\",\n    \"msAnimation\",\n    \"msAnimationDelay\",\n    \"msAnimationDirection\",\n    \"msAnimationDuration\",\n    \"msAnimationFillMode\",\n    \"msAnimationIterationCount\",\n    \"msAnimationName\",\n    \"msAnimationPlayState\",\n    \"msAnimationStartTime\",\n    \"msAnimationTimingFunction\",\n    \"msBackfaceVisibility\",\n    \"msBlockProgression\",\n    \"msCSSOMElementFloatMetrics\",\n    \"msCaching\",\n    \"msCachingEnabled\",\n    \"msCancelRequestAnimationFrame\",\n    \"msCapsLockWarningOff\",\n    \"msClearImmediate\",\n    \"msClose\",\n    \"msContentZoomChaining\",\n    \"msContentZoomFactor\",\n    \"msContentZoomLimit\",\n    \"msContentZoomLimitMax\",\n    \"msContentZoomLimitMin\",\n    \"msContentZoomSnap\",\n    \"msContentZoomSnapPoints\",\n    \"msContentZoomSnapType\",\n    \"msContentZooming\",\n    \"msConvertURL\",\n    \"msCrypto\",\n    \"msDoNotTrack\",\n    \"msElementsFromPoint\",\n    \"msElementsFromRect\",\n    \"msExitFullscreen\",\n    \"msExtendedCode\",\n    \"msFillRule\",\n    \"msFirstPaint\",\n    \"msFlex\",\n    \"msFlexAlign\",\n    \"msFlexDirection\",\n    \"msFlexFlow\",\n    \"msFlexItemAlign\",\n    \"msFlexLinePack\",\n    \"msFlexNegative\",\n    \"msFlexOrder\",\n    \"msFlexPack\",\n    \"msFlexPositive\",\n    \"msFlexPreferredSize\",\n    \"msFlexWrap\",\n    \"msFlowFrom\",\n    \"msFlowInto\",\n    \"msFontFeatureSettings\",\n    \"msFullscreenElement\",\n    \"msFullscreenEnabled\",\n    \"msGetInputContext\",\n    \"msGetRegionContent\",\n    \"msGetUntransformedBounds\",\n    \"msGraphicsTrustStatus\",\n    \"msGridColumn\",\n    \"msGridColumnAlign\",\n    \"msGridColumnSpan\",\n    \"msGridColumns\",\n    \"msGridRow\",\n    \"msGridRowAlign\",\n    \"msGridRowSpan\",\n    \"msGridRows\",\n    \"msHidden\",\n    \"msHighContrastAdjust\",\n    \"msHyphenateLimitChars\",\n    \"msHyphenateLimitLines\",\n    \"msHyphenateLimitZone\",\n    \"msHyphens\",\n    \"msImageSmoothingEnabled\",\n    \"msImeAlign\",\n    \"msIndexedDB\",\n    \"msInterpolationMode\",\n    \"msIsStaticHTML\",\n    \"msKeySystem\",\n    \"msKeys\",\n    \"msLaunchUri\",\n    \"msLockOrientation\",\n    \"msManipulationViewsEnabled\",\n    \"msMatchMedia\",\n    \"msMatchesSelector\",\n    \"msMaxTouchPoints\",\n    \"msOrientation\",\n    \"msOverflowStyle\",\n    \"msPerspective\",\n    \"msPerspectiveOrigin\",\n    \"msPlayToDisabled\",\n    \"msPlayToPreferredSourceUri\",\n    \"msPlayToPrimary\",\n    \"msPointerEnabled\",\n    \"msRegionOverflow\",\n    \"msReleasePointerCapture\",\n    \"msRequestAnimationFrame\",\n    \"msRequestFullscreen\",\n    \"msSaveBlob\",\n    \"msSaveOrOpenBlob\",\n    \"msScrollChaining\",\n    \"msScrollLimit\",\n    \"msScrollLimitXMax\",\n    \"msScrollLimitXMin\",\n    \"msScrollLimitYMax\",\n    \"msScrollLimitYMin\",\n    \"msScrollRails\",\n    \"msScrollSnapPointsX\",\n    \"msScrollSnapPointsY\",\n    \"msScrollSnapType\",\n    \"msScrollSnapX\",\n    \"msScrollSnapY\",\n    \"msScrollTranslation\",\n    \"msSetImmediate\",\n    \"msSetMediaKeys\",\n    \"msSetPointerCapture\",\n    \"msTextCombineHorizontal\",\n    \"msTextSizeAdjust\",\n    \"msToBlob\",\n    \"msTouchAction\",\n    \"msTouchSelect\",\n    \"msTraceAsyncCallbackCompleted\",\n    \"msTraceAsyncCallbackStarting\",\n    \"msTraceAsyncOperationCompleted\",\n    \"msTraceAsyncOperationStarting\",\n    \"msTransform\",\n    \"msTransformOrigin\",\n    \"msTransformStyle\",\n    \"msTransition\",\n    \"msTransitionDelay\",\n    \"msTransitionDuration\",\n    \"msTransitionProperty\",\n    \"msTransitionTimingFunction\",\n    \"msUnlockOrientation\",\n    \"msUpdateAsyncCallbackRelation\",\n    \"msUserSelect\",\n    \"msVisibilityState\",\n    \"msWrapFlow\",\n    \"msWrapMargin\",\n    \"msWrapThrough\",\n    \"msWriteProfilerMark\",\n    \"msZoom\",\n    \"msZoomTo\",\n    \"mt\",\n    \"multiEntry\",\n    \"multiSelectionObj\",\n    \"multiline\",\n    \"multiple\",\n    \"multiply\",\n    \"multiplySelf\",\n    \"mutableFile\",\n    \"muted\",\n    \"n\",\n    \"name\",\n    \"nameProp\",\n    \"namedItem\",\n    \"namedRecordset\",\n    \"names\",\n    \"namespaceURI\",\n    \"namespaces\",\n    \"naturalHeight\",\n    \"naturalWidth\",\n    \"navigate\",\n    \"navigation\",\n    \"navigationMode\",\n    \"navigationStart\",\n    \"navigator\",\n    \"near\",\n    \"nearestViewportElement\",\n    \"negative\",\n    \"netscape\",\n    \"networkState\",\n    \"newScale\",\n    \"newTranslate\",\n    \"newURL\",\n    \"newValue\",\n    \"newValueSpecifiedUnits\",\n    \"newVersion\",\n    \"newhome\",\n    \"next\",\n    \"nextElementSibling\",\n    \"nextNode\",\n    \"nextPage\",\n    \"nextSibling\",\n    \"nickname\",\n    \"noHref\",\n    \"noResize\",\n    \"noShade\",\n    \"noValidate\",\n    \"noWrap\",\n    \"nodeName\",\n    \"nodeType\",\n    \"nodeValue\",\n    \"normalize\",\n    \"normalizedPathSegList\",\n    \"notationName\",\n    \"notations\",\n    \"note\",\n    \"noteGrainOn\",\n    \"noteOff\",\n    \"noteOn\",\n    \"now\",\n    \"numOctaves\",\n    \"number\",\n    \"numberOfChannels\",\n    \"numberOfInputs\",\n    \"numberOfItems\",\n    \"numberOfOutputs\",\n    \"numberValue\",\n    \"oMatchesSelector\",\n    \"object\",\n    \"object-fit\",\n    \"object-position\",\n    \"objectFit\",\n    \"objectPosition\",\n    \"objectStore\",\n    \"objectStoreNames\",\n    \"observe\",\n    \"of\",\n    \"offscreenBuffering\",\n    \"offset\",\n    \"offsetHeight\",\n    \"offsetLeft\",\n    \"offsetNode\",\n    \"offsetParent\",\n    \"offsetTop\",\n    \"offsetWidth\",\n    \"offsetX\",\n    \"offsetY\",\n    \"ok\",\n    \"oldURL\",\n    \"oldValue\",\n    \"oldVersion\",\n    \"olderShadowRoot\",\n    \"onLine\",\n    \"onabort\",\n    \"onactivate\",\n    \"onactive\",\n    \"onaddstream\",\n    \"onaddtrack\",\n    \"onafterprint\",\n    \"onafterscriptexecute\",\n    \"onafterupdate\",\n    \"onaudioend\",\n    \"onaudioprocess\",\n    \"onaudiostart\",\n    \"onautocomplete\",\n    \"onautocompleteerror\",\n    \"onbeforeactivate\",\n    \"onbeforecopy\",\n    \"onbeforecut\",\n    \"onbeforedeactivate\",\n    \"onbeforeeditfocus\",\n    \"onbeforepaste\",\n    \"onbeforeprint\",\n    \"onbeforescriptexecute\",\n    \"onbeforeunload\",\n    \"onbeforeupdate\",\n    \"onblocked\",\n    \"onblur\",\n    \"onbounce\",\n    \"onboundary\",\n    \"oncached\",\n    \"oncancel\",\n    \"oncandidatewindowhide\",\n    \"oncandidatewindowshow\",\n    \"oncandidatewindowupdate\",\n    \"oncanplay\",\n    \"oncanplaythrough\",\n    \"oncellchange\",\n    \"onchange\",\n    \"onchargingchange\",\n    \"onchargingtimechange\",\n    \"onchecking\",\n    \"onclick\",\n    \"onclose\",\n    \"oncompassneedscalibration\",\n    \"oncomplete\",\n    \"oncontextmenu\",\n    \"oncontrolselect\",\n    \"oncopy\",\n    \"oncuechange\",\n    \"oncut\",\n    \"ondataavailable\",\n    \"ondatachannel\",\n    \"ondatasetchanged\",\n    \"ondatasetcomplete\",\n    \"ondblclick\",\n    \"ondeactivate\",\n    \"ondevicelight\",\n    \"ondevicemotion\",\n    \"ondeviceorientation\",\n    \"ondeviceproximity\",\n    \"ondischargingtimechange\",\n    \"ondisplay\",\n    \"ondownloading\",\n    \"ondrag\",\n    \"ondragend\",\n    \"ondragenter\",\n    \"ondragleave\",\n    \"ondragover\",\n    \"ondragstart\",\n    \"ondrop\",\n    \"ondurationchange\",\n    \"onemptied\",\n    \"onencrypted\",\n    \"onend\",\n    \"onended\",\n    \"onenter\",\n    \"onerror\",\n    \"onerrorupdate\",\n    \"onexit\",\n    \"onfilterchange\",\n    \"onfinish\",\n    \"onfocus\",\n    \"onfocusin\",\n    \"onfocusout\",\n    \"onfullscreenchange\",\n    \"onfullscreenerror\",\n    \"ongesturechange\",\n    \"ongestureend\",\n    \"ongesturestart\",\n    \"ongotpointercapture\",\n    \"onhashchange\",\n    \"onhelp\",\n    \"onicecandidate\",\n    \"oniceconnectionstatechange\",\n    \"oninactive\",\n    \"oninput\",\n    \"oninvalid\",\n    \"onkeydown\",\n    \"onkeypress\",\n    \"onkeyup\",\n    \"onlanguagechange\",\n    \"onlayoutcomplete\",\n    \"onlevelchange\",\n    \"onload\",\n    \"onloadeddata\",\n    \"onloadedmetadata\",\n    \"onloadend\",\n    \"onloadstart\",\n    \"onlosecapture\",\n    \"onlostpointercapture\",\n    \"only\",\n    \"onmark\",\n    \"onmessage\",\n    \"onmousedown\",\n    \"onmouseenter\",\n    \"onmouseleave\",\n    \"onmousemove\",\n    \"onmouseout\",\n    \"onmouseover\",\n    \"onmouseup\",\n    \"onmousewheel\",\n    \"onmove\",\n    \"onmoveend\",\n    \"onmovestart\",\n    \"onmozfullscreenchange\",\n    \"onmozfullscreenerror\",\n    \"onmozorientationchange\",\n    \"onmozpointerlockchange\",\n    \"onmozpointerlockerror\",\n    \"onmscontentzoom\",\n    \"onmsfullscreenchange\",\n    \"onmsfullscreenerror\",\n    \"onmsgesturechange\",\n    \"onmsgesturedoubletap\",\n    \"onmsgestureend\",\n    \"onmsgesturehold\",\n    \"onmsgesturestart\",\n    \"onmsgesturetap\",\n    \"onmsgotpointercapture\",\n    \"onmsinertiastart\",\n    \"onmslostpointercapture\",\n    \"onmsmanipulationstatechanged\",\n    \"onmsneedkey\",\n    \"onmsorientationchange\",\n    \"onmspointercancel\",\n    \"onmspointerdown\",\n    \"onmspointerenter\",\n    \"onmspointerhover\",\n    \"onmspointerleave\",\n    \"onmspointermove\",\n    \"onmspointerout\",\n    \"onmspointerover\",\n    \"onmspointerup\",\n    \"onmssitemodejumplistitemremoved\",\n    \"onmsthumbnailclick\",\n    \"onnegotiationneeded\",\n    \"onnomatch\",\n    \"onnoupdate\",\n    \"onobsolete\",\n    \"onoffline\",\n    \"ononline\",\n    \"onopen\",\n    \"onorientationchange\",\n    \"onpagechange\",\n    \"onpagehide\",\n    \"onpageshow\",\n    \"onpaste\",\n    \"onpause\",\n    \"onplay\",\n    \"onplaying\",\n    \"onpluginstreamstart\",\n    \"onpointercancel\",\n    \"onpointerdown\",\n    \"onpointerenter\",\n    \"onpointerleave\",\n    \"onpointerlockchange\",\n    \"onpointerlockerror\",\n    \"onpointermove\",\n    \"onpointerout\",\n    \"onpointerover\",\n    \"onpointerup\",\n    \"onpopstate\",\n    \"onprogress\",\n    \"onpropertychange\",\n    \"onratechange\",\n    \"onreadystatechange\",\n    \"onremovestream\",\n    \"onremovetrack\",\n    \"onreset\",\n    \"onresize\",\n    \"onresizeend\",\n    \"onresizestart\",\n    \"onresourcetimingbufferfull\",\n    \"onresult\",\n    \"onresume\",\n    \"onrowenter\",\n    \"onrowexit\",\n    \"onrowsdelete\",\n    \"onrowsinserted\",\n    \"onscroll\",\n    \"onsearch\",\n    \"onseeked\",\n    \"onseeking\",\n    \"onselect\",\n    \"onselectionchange\",\n    \"onselectstart\",\n    \"onshow\",\n    \"onsignalingstatechange\",\n    \"onsoundend\",\n    \"onsoundstart\",\n    \"onspeechend\",\n    \"onspeechstart\",\n    \"onstalled\",\n    \"onstart\",\n    \"onstatechange\",\n    \"onstop\",\n    \"onstorage\",\n    \"onstoragecommit\",\n    \"onsubmit\",\n    \"onsuccess\",\n    \"onsuspend\",\n    \"ontextinput\",\n    \"ontimeout\",\n    \"ontimeupdate\",\n    \"ontoggle\",\n    \"ontouchcancel\",\n    \"ontouchend\",\n    \"ontouchmove\",\n    \"ontouchstart\",\n    \"ontransitionend\",\n    \"onunload\",\n    \"onupdateready\",\n    \"onupgradeneeded\",\n    \"onuserproximity\",\n    \"onversionchange\",\n    \"onvoiceschanged\",\n    \"onvolumechange\",\n    \"onwaiting\",\n    \"onwarning\",\n    \"onwebkitanimationend\",\n    \"onwebkitanimationiteration\",\n    \"onwebkitanimationstart\",\n    \"onwebkitcurrentplaybacktargetiswirelesschanged\",\n    \"onwebkitfullscreenchange\",\n    \"onwebkitfullscreenerror\",\n    \"onwebkitkeyadded\",\n    \"onwebkitkeyerror\",\n    \"onwebkitkeymessage\",\n    \"onwebkitneedkey\",\n    \"onwebkitorientationchange\",\n    \"onwebkitplaybacktargetavailabilitychanged\",\n    \"onwebkitpointerlockchange\",\n    \"onwebkitpointerlockerror\",\n    \"onwebkitresourcetimingbufferfull\",\n    \"onwebkittransitionend\",\n    \"onwheel\",\n    \"onzoom\",\n    \"opacity\",\n    \"open\",\n    \"openCursor\",\n    \"openDatabase\",\n    \"openKeyCursor\",\n    \"opener\",\n    \"opera\",\n    \"operationType\",\n    \"operator\",\n    \"opr\",\n    \"optimum\",\n    \"options\",\n    \"order\",\n    \"orderX\",\n    \"orderY\",\n    \"ordered\",\n    \"org\",\n    \"orient\",\n    \"orientAngle\",\n    \"orientType\",\n    \"orientation\",\n    \"origin\",\n    \"originalTarget\",\n    \"orphans\",\n    \"oscpu\",\n    \"outerHTML\",\n    \"outerHeight\",\n    \"outerText\",\n    \"outerWidth\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"outlineColor\",\n    \"outlineOffset\",\n    \"outlineStyle\",\n    \"outlineWidth\",\n    \"outputBuffer\",\n    \"overflow\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overflowX\",\n    \"overflowY\",\n    \"overrideMimeType\",\n    \"oversample\",\n    \"ownerDocument\",\n    \"ownerElement\",\n    \"ownerNode\",\n    \"ownerRule\",\n    \"ownerSVGElement\",\n    \"owningElement\",\n    \"p1\",\n    \"p2\",\n    \"p3\",\n    \"p4\",\n    \"pad\",\n    \"padding\",\n    \"padding-bottom\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    \"paddingRight\",\n    \"paddingTop\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"pageBreakAfter\",\n    \"pageBreakBefore\",\n    \"pageBreakInside\",\n    \"pageCount\",\n    \"pageX\",\n    \"pageXOffset\",\n    \"pageY\",\n    \"pageYOffset\",\n    \"pages\",\n    \"paint-order\",\n    \"paintOrder\",\n    \"paintRequests\",\n    \"paintType\",\n    \"palette\",\n    \"panningModel\",\n    \"parent\",\n    \"parentElement\",\n    \"parentNode\",\n    \"parentRule\",\n    \"parentStyleSheet\",\n    \"parentTextEdit\",\n    \"parentWindow\",\n    \"parse\",\n    \"parseFloat\",\n    \"parseFromString\",\n    \"parseInt\",\n    \"participants\",\n    \"password\",\n    \"pasteHTML\",\n    \"path\",\n    \"pathLength\",\n    \"pathSegList\",\n    \"pathSegType\",\n    \"pathSegTypeAsLetter\",\n    \"pathname\",\n    \"pattern\",\n    \"patternContentUnits\",\n    \"patternMismatch\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pause\",\n    \"pauseAnimations\",\n    \"pauseOnExit\",\n    \"paused\",\n    \"pending\",\n    \"performance\",\n    \"permission\",\n    \"persisted\",\n    \"personalbar\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"perspectiveOrigin\",\n    \"phoneticFamilyName\",\n    \"phoneticGivenName\",\n    \"photo\",\n    \"ping\",\n    \"pitch\",\n    \"pixelBottom\",\n    \"pixelDepth\",\n    \"pixelHeight\",\n    \"pixelLeft\",\n    \"pixelRight\",\n    \"pixelStorei\",\n    \"pixelTop\",\n    \"pixelUnitToMillimeterX\",\n    \"pixelUnitToMillimeterY\",\n    \"pixelWidth\",\n    \"placeholder\",\n    \"platform\",\n    \"play\",\n    \"playbackRate\",\n    \"playbackState\",\n    \"playbackTime\",\n    \"played\",\n    \"plugins\",\n    \"pluginspage\",\n    \"pname\",\n    \"pointer-events\",\n    \"pointerBeforeReferenceNode\",\n    \"pointerEnabled\",\n    \"pointerEvents\",\n    \"pointerId\",\n    \"pointerLockElement\",\n    \"pointerType\",\n    \"points\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"polygonOffset\",\n    \"pop\",\n    \"popupWindowFeatures\",\n    \"popupWindowName\",\n    \"popupWindowURI\",\n    \"port\",\n    \"port1\",\n    \"port2\",\n    \"ports\",\n    \"posBottom\",\n    \"posHeight\",\n    \"posLeft\",\n    \"posRight\",\n    \"posTop\",\n    \"posWidth\",\n    \"position\",\n    \"positionAlign\",\n    \"postError\",\n    \"postMessage\",\n    \"poster\",\n    \"pow\",\n    \"powerOff\",\n    \"preMultiplySelf\",\n    \"precision\",\n    \"preferredStyleSheetSet\",\n    \"preferredStylesheetSet\",\n    \"prefix\",\n    \"preload\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"preserveAspectRatioString\",\n    \"pressed\",\n    \"pressure\",\n    \"prevValue\",\n    \"preventDefault\",\n    \"preventExtensions\",\n    \"previousElementSibling\",\n    \"previousNode\",\n    \"previousPage\",\n    \"previousScale\",\n    \"previousSibling\",\n    \"previousTranslate\",\n    \"primaryKey\",\n    \"primitiveType\",\n    \"primitiveUnits\",\n    \"principals\",\n    \"print\",\n    \"privateKey\",\n    \"probablySupportsContext\",\n    \"process\",\n    \"processIceMessage\",\n    \"product\",\n    \"productSub\",\n    \"profile\",\n    \"profileEnd\",\n    \"profiles\",\n    \"prompt\",\n    \"properties\",\n    \"propertyIsEnumerable\",\n    \"propertyName\",\n    \"protocol\",\n    \"protocolLong\",\n    \"prototype\",\n    \"pseudoClass\",\n    \"pseudoElement\",\n    \"publicId\",\n    \"publicKey\",\n    \"published\",\n    \"push\",\n    \"pushNotification\",\n    \"pushState\",\n    \"put\",\n    \"putImageData\",\n    \"quadraticCurveTo\",\n    \"qualifier\",\n    \"queryCommandEnabled\",\n    \"queryCommandIndeterm\",\n    \"queryCommandState\",\n    \"queryCommandSupported\",\n    \"queryCommandText\",\n    \"queryCommandValue\",\n    \"querySelector\",\n    \"querySelectorAll\",\n    \"quote\",\n    \"quotes\",\n    \"r\",\n    \"r1\",\n    \"r2\",\n    \"race\",\n    \"radiogroup\",\n    \"radiusX\",\n    \"radiusY\",\n    \"random\",\n    \"range\",\n    \"rangeCount\",\n    \"rangeMax\",\n    \"rangeMin\",\n    \"rangeOffset\",\n    \"rangeOverflow\",\n    \"rangeParent\",\n    \"rangeUnderflow\",\n    \"rate\",\n    \"ratio\",\n    \"raw\",\n    \"read\",\n    \"readAsArrayBuffer\",\n    \"readAsBinaryString\",\n    \"readAsBlob\",\n    \"readAsDataURL\",\n    \"readAsText\",\n    \"readOnly\",\n    \"readPixels\",\n    \"readReportRequested\",\n    \"readyState\",\n    \"reason\",\n    \"reboot\",\n    \"receiver\",\n    \"receivers\",\n    \"recordNumber\",\n    \"recordset\",\n    \"rect\",\n    \"red\",\n    \"redirectCount\",\n    \"redirectEnd\",\n    \"redirectStart\",\n    \"reduce\",\n    \"reduceRight\",\n    \"reduction\",\n    \"refDistance\",\n    \"refX\",\n    \"refY\",\n    \"referenceNode\",\n    \"referrer\",\n    \"refresh\",\n    \"region\",\n    \"regionAnchorX\",\n    \"regionAnchorY\",\n    \"regionId\",\n    \"regions\",\n    \"register\",\n    \"registerContentHandler\",\n    \"registerElement\",\n    \"registerProtocolHandler\",\n    \"reject\",\n    \"rel\",\n    \"relList\",\n    \"relatedNode\",\n    \"relatedTarget\",\n    \"release\",\n    \"releaseCapture\",\n    \"releaseEvents\",\n    \"releasePointerCapture\",\n    \"releaseShaderCompiler\",\n    \"reliable\",\n    \"reload\",\n    \"remainingSpace\",\n    \"remoteDescription\",\n    \"remove\",\n    \"removeAllRanges\",\n    \"removeAttribute\",\n    \"removeAttributeNS\",\n    \"removeAttributeNode\",\n    \"removeBehavior\",\n    \"removeChild\",\n    \"removeCue\",\n    \"removeEventListener\",\n    \"removeFilter\",\n    \"removeImport\",\n    \"removeItem\",\n    \"removeListener\",\n    \"removeNamedItem\",\n    \"removeNamedItemNS\",\n    \"removeNode\",\n    \"removeParameter\",\n    \"removeProperty\",\n    \"removeRange\",\n    \"removeRegion\",\n    \"removeRule\",\n    \"removeSiteSpecificTrackingException\",\n    \"removeSourceBuffer\",\n    \"removeStream\",\n    \"removeTrack\",\n    \"removeVariable\",\n    \"removeWakeLockListener\",\n    \"removeWebWideTrackingException\",\n    \"removedNodes\",\n    \"renderbufferStorage\",\n    \"renderedBuffer\",\n    \"renderingMode\",\n    \"repeat\",\n    \"replace\",\n    \"replaceAdjacentText\",\n    \"replaceChild\",\n    \"replaceData\",\n    \"replaceId\",\n    \"replaceItem\",\n    \"replaceNode\",\n    \"replaceState\",\n    \"replaceTrack\",\n    \"replaceWholeText\",\n    \"reportValidity\",\n    \"requestAnimationFrame\",\n    \"requestAutocomplete\",\n    \"requestData\",\n    \"requestFullscreen\",\n    \"requestMediaKeySystemAccess\",\n    \"requestPermission\",\n    \"requestPointerLock\",\n    \"requestStart\",\n    \"requestingWindow\",\n    \"required\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"reset\",\n    \"resetTransform\",\n    \"resize\",\n    \"resizeBy\",\n    \"resizeTo\",\n    \"resolve\",\n    \"response\",\n    \"responseBody\",\n    \"responseEnd\",\n    \"responseStart\",\n    \"responseText\",\n    \"responseType\",\n    \"responseURL\",\n    \"responseXML\",\n    \"restore\",\n    \"result\",\n    \"resultType\",\n    \"resume\",\n    \"returnValue\",\n    \"rev\",\n    \"reverse\",\n    \"reversed\",\n    \"revocable\",\n    \"revokeObjectURL\",\n    \"rgbColor\",\n    \"right\",\n    \"rightContext\",\n    \"rightMargin\",\n    \"rolloffFactor\",\n    \"root\",\n    \"rootElement\",\n    \"rotate\",\n    \"rotateAxisAngle\",\n    \"rotateAxisAngleSelf\",\n    \"rotateFromVector\",\n    \"rotateFromVectorSelf\",\n    \"rotateSelf\",\n    \"rotation\",\n    \"rotationRate\",\n    \"round\",\n    \"rowIndex\",\n    \"rowSpan\",\n    \"rows\",\n    \"rubyAlign\",\n    \"rubyOverhang\",\n    \"rubyPosition\",\n    \"rules\",\n    \"runtime\",\n    \"runtimeStyle\",\n    \"rx\",\n    \"ry\",\n    \"safari\",\n    \"sampleCoverage\",\n    \"sampleRate\",\n    \"sandbox\",\n    \"save\",\n    \"scale\",\n    \"scale3d\",\n    \"scale3dSelf\",\n    \"scaleNonUniform\",\n    \"scaleNonUniformSelf\",\n    \"scaleSelf\",\n    \"scheme\",\n    \"scissor\",\n    \"scope\",\n    \"scopeName\",\n    \"scoped\",\n    \"screen\",\n    \"screenBrightness\",\n    \"screenEnabled\",\n    \"screenLeft\",\n    \"screenPixelToMillimeterX\",\n    \"screenPixelToMillimeterY\",\n    \"screenTop\",\n    \"screenX\",\n    \"screenY\",\n    \"scripts\",\n    \"scroll\",\n    \"scroll-behavior\",\n    \"scrollAmount\",\n    \"scrollBehavior\",\n    \"scrollBy\",\n    \"scrollByLines\",\n    \"scrollByPages\",\n    \"scrollDelay\",\n    \"scrollHeight\",\n    \"scrollIntoView\",\n    \"scrollIntoViewIfNeeded\",\n    \"scrollLeft\",\n    \"scrollLeftMax\",\n    \"scrollMaxX\",\n    \"scrollMaxY\",\n    \"scrollTo\",\n    \"scrollTop\",\n    \"scrollTopMax\",\n    \"scrollWidth\",\n    \"scrollX\",\n    \"scrollY\",\n    \"scrollbar3dLightColor\",\n    \"scrollbarArrowColor\",\n    \"scrollbarBaseColor\",\n    \"scrollbarDarkShadowColor\",\n    \"scrollbarFaceColor\",\n    \"scrollbarHighlightColor\",\n    \"scrollbarShadowColor\",\n    \"scrollbarTrackColor\",\n    \"scrollbars\",\n    \"scrolling\",\n    \"sdp\",\n    \"sdpMLineIndex\",\n    \"sdpMid\",\n    \"seal\",\n    \"search\",\n    \"searchBox\",\n    \"searchBoxJavaBridge_\",\n    \"searchParams\",\n    \"sectionRowIndex\",\n    \"secureConnectionStart\",\n    \"security\",\n    \"seed\",\n    \"seekable\",\n    \"seeking\",\n    \"select\",\n    \"selectAllChildren\",\n    \"selectNode\",\n    \"selectNodeContents\",\n    \"selectNodes\",\n    \"selectSingleNode\",\n    \"selectSubString\",\n    \"selected\",\n    \"selectedIndex\",\n    \"selectedOptions\",\n    \"selectedStyleSheetSet\",\n    \"selectedStylesheetSet\",\n    \"selection\",\n    \"selectionDirection\",\n    \"selectionEnd\",\n    \"selectionStart\",\n    \"selector\",\n    \"selectorText\",\n    \"self\",\n    \"send\",\n    \"sendAsBinary\",\n    \"sendBeacon\",\n    \"sender\",\n    \"sentTimestamp\",\n    \"separator\",\n    \"serializeToString\",\n    \"serviceWorker\",\n    \"sessionId\",\n    \"sessionStorage\",\n    \"set\",\n    \"setActive\",\n    \"setAlpha\",\n    \"setAttribute\",\n    \"setAttributeNS\",\n    \"setAttributeNode\",\n    \"setAttributeNodeNS\",\n    \"setBaseAndExtent\",\n    \"setBingCurrentSearchDefault\",\n    \"setCapture\",\n    \"setColor\",\n    \"setCompositeOperation\",\n    \"setCurrentTime\",\n    \"setCustomValidity\",\n    \"setData\",\n    \"setDate\",\n    \"setDragImage\",\n    \"setEnd\",\n    \"setEndAfter\",\n    \"setEndBefore\",\n    \"setEndPoint\",\n    \"setFillColor\",\n    \"setFilterRes\",\n    \"setFloat32\",\n    \"setFloat64\",\n    \"setFloatValue\",\n    \"setFullYear\",\n    \"setHours\",\n    \"setImmediate\",\n    \"setInt16\",\n    \"setInt32\",\n    \"setInt8\",\n    \"setInterval\",\n    \"setItem\",\n    \"setLineCap\",\n    \"setLineDash\",\n    \"setLineJoin\",\n    \"setLineWidth\",\n    \"setLocalDescription\",\n    \"setMatrix\",\n    \"setMatrixValue\",\n    \"setMediaKeys\",\n    \"setMilliseconds\",\n    \"setMinutes\",\n    \"setMiterLimit\",\n    \"setMonth\",\n    \"setNamedItem\",\n    \"setNamedItemNS\",\n    \"setNonUserCodeExceptions\",\n    \"setOrientToAngle\",\n    \"setOrientToAuto\",\n    \"setOrientation\",\n    \"setOverrideHistoryNavigationMode\",\n    \"setPaint\",\n    \"setParameter\",\n    \"setPeriodicWave\",\n    \"setPointerCapture\",\n    \"setPosition\",\n    \"setPreference\",\n    \"setProperty\",\n    \"setPrototypeOf\",\n    \"setRGBColor\",\n    \"setRGBColorICCColor\",\n    \"setRadius\",\n    \"setRangeText\",\n    \"setRemoteDescription\",\n    \"setRequestHeader\",\n    \"setResizable\",\n    \"setResourceTimingBufferSize\",\n    \"setRotate\",\n    \"setScale\",\n    \"setSeconds\",\n    \"setSelectionRange\",\n    \"setServerCertificate\",\n    \"setShadow\",\n    \"setSkewX\",\n    \"setSkewY\",\n    \"setStart\",\n    \"setStartAfter\",\n    \"setStartBefore\",\n    \"setStdDeviation\",\n    \"setStringValue\",\n    \"setStrokeColor\",\n    \"setSuggestResult\",\n    \"setTargetAtTime\",\n    \"setTargetValueAtTime\",\n    \"setTime\",\n    \"setTimeout\",\n    \"setTransform\",\n    \"setTranslate\",\n    \"setUTCDate\",\n    \"setUTCFullYear\",\n    \"setUTCHours\",\n    \"setUTCMilliseconds\",\n    \"setUTCMinutes\",\n    \"setUTCMonth\",\n    \"setUTCSeconds\",\n    \"setUint16\",\n    \"setUint32\",\n    \"setUint8\",\n    \"setUri\",\n    \"setValueAtTime\",\n    \"setValueCurveAtTime\",\n    \"setVariable\",\n    \"setVelocity\",\n    \"setVersion\",\n    \"setYear\",\n    \"settingName\",\n    \"settingValue\",\n    \"sex\",\n    \"shaderSource\",\n    \"shadowBlur\",\n    \"shadowColor\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\",\n    \"shadowRoot\",\n    \"shape\",\n    \"shape-rendering\",\n    \"shapeRendering\",\n    \"sheet\",\n    \"shift\",\n    \"shiftKey\",\n    \"shiftLeft\",\n    \"show\",\n    \"showHelp\",\n    \"showModal\",\n    \"showModalDialog\",\n    \"showModelessDialog\",\n    \"showNotification\",\n    \"sidebar\",\n    \"sign\",\n    \"signalingState\",\n    \"sin\",\n    \"singleNodeValue\",\n    \"sinh\",\n    \"size\",\n    \"sizeToContent\",\n    \"sizes\",\n    \"skewX\",\n    \"skewXSelf\",\n    \"skewY\",\n    \"skewYSelf\",\n    \"slice\",\n    \"slope\",\n    \"small\",\n    \"smooth\",\n    \"smil\",\n    \"smoothingTimeConstant\",\n    \"snapToLines\",\n    \"snapshotItem\",\n    \"snapshotLength\",\n    \"some\",\n    \"sort\",\n    \"source\",\n    \"sourceBuffer\",\n    \"sourceBuffers\",\n    \"sourceIndex\",\n    \"spacing\",\n    \"span\",\n    \"speakAs\",\n    \"speaking\",\n    \"specified\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"speechSynthesis\",\n    \"speed\",\n    \"speedOfSound\",\n    \"spellcheck\",\n    \"splice\",\n    \"split\",\n    \"splitText\",\n    \"spreadMethod\",\n    \"sqrt\",\n    \"src\",\n    \"srcElement\",\n    \"srcFilter\",\n    \"srcUrn\",\n    \"srcdoc\",\n    \"srclang\",\n    \"srcset\",\n    \"stack\",\n    \"stackTraceLimit\",\n    \"stacktrace\",\n    \"standalone\",\n    \"standby\",\n    \"start\",\n    \"startContainer\",\n    \"startIce\",\n    \"startOffset\",\n    \"startRendering\",\n    \"startTime\",\n    \"startsWith\",\n    \"state\",\n    \"status\",\n    \"statusMessage\",\n    \"statusText\",\n    \"statusbar\",\n    \"stdDeviationX\",\n    \"stdDeviationY\",\n    \"stencilFunc\",\n    \"stencilFuncSeparate\",\n    \"stencilMask\",\n    \"stencilMaskSeparate\",\n    \"stencilOp\",\n    \"stencilOpSeparate\",\n    \"step\",\n    \"stepDown\",\n    \"stepMismatch\",\n    \"stepUp\",\n    \"sticky\",\n    \"stitchTiles\",\n    \"stop\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stopColor\",\n    \"stopImmediatePropagation\",\n    \"stopOpacity\",\n    \"stopPropagation\",\n    \"storageArea\",\n    \"storageName\",\n    \"storageStatus\",\n    \"storeSiteSpecificTrackingException\",\n    \"storeWebWideTrackingException\",\n    \"stpVersion\",\n    \"stream\",\n    \"strike\",\n    \"stringValue\",\n    \"stringify\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeMiterlimit\",\n    \"strokeOpacity\",\n    \"strokeRect\",\n    \"strokeStyle\",\n    \"strokeText\",\n    \"strokeWidth\",\n    \"style\",\n    \"styleFloat\",\n    \"styleMedia\",\n    \"styleSheet\",\n    \"styleSheetSets\",\n    \"styleSheets\",\n    \"sub\",\n    \"subarray\",\n    \"subject\",\n    \"submit\",\n    \"subscribe\",\n    \"substr\",\n    \"substring\",\n    \"substringData\",\n    \"subtle\",\n    \"subtree\",\n    \"suffix\",\n    \"suffixes\",\n    \"summary\",\n    \"sup\",\n    \"supports\",\n    \"surfaceScale\",\n    \"surroundContents\",\n    \"suspend\",\n    \"suspendRedraw\",\n    \"swapCache\",\n    \"swapNode\",\n    \"sweepFlag\",\n    \"symbols\",\n    \"system\",\n    \"systemCode\",\n    \"systemId\",\n    \"systemLanguage\",\n    \"systemXDPI\",\n    \"systemYDPI\",\n    \"tBodies\",\n    \"tFoot\",\n    \"tHead\",\n    \"tabIndex\",\n    \"table\",\n    \"table-layout\",\n    \"tableLayout\",\n    \"tableValues\",\n    \"tag\",\n    \"tagName\",\n    \"tagUrn\",\n    \"tags\",\n    \"taintEnabled\",\n    \"takeRecords\",\n    \"tan\",\n    \"tanh\",\n    \"target\",\n    \"targetElement\",\n    \"targetTouches\",\n    \"targetX\",\n    \"targetY\",\n    \"tel\",\n    \"terminate\",\n    \"test\",\n    \"texImage2D\",\n    \"texParameterf\",\n    \"texParameteri\",\n    \"texSubImage2D\",\n    \"text\",\n    \"text-align\",\n    \"text-anchor\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-style\",\n    \"text-indent\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-transform\",\n    \"textAlign\",\n    \"textAlignLast\",\n    \"textAnchor\",\n    \"textAutospace\",\n    \"textBaseline\",\n    \"textContent\",\n    \"textDecoration\",\n    \"textDecorationBlink\",\n    \"textDecorationColor\",\n    \"textDecorationLine\",\n    \"textDecorationLineThrough\",\n    \"textDecorationNone\",\n    \"textDecorationOverline\",\n    \"textDecorationStyle\",\n    \"textDecorationUnderline\",\n    \"textIndent\",\n    \"textJustify\",\n    \"textJustifyTrim\",\n    \"textKashida\",\n    \"textKashidaSpace\",\n    \"textLength\",\n    \"textOverflow\",\n    \"textRendering\",\n    \"textShadow\",\n    \"textTracks\",\n    \"textTransform\",\n    \"textUnderlinePosition\",\n    \"then\",\n    \"threadId\",\n    \"threshold\",\n    \"tiltX\",\n    \"tiltY\",\n    \"time\",\n    \"timeEnd\",\n    \"timeStamp\",\n    \"timeout\",\n    \"timestamp\",\n    \"timestampOffset\",\n    \"timing\",\n    \"title\",\n    \"toArray\",\n    \"toBlob\",\n    \"toDataURL\",\n    \"toDateString\",\n    \"toElement\",\n    \"toExponential\",\n    \"toFixed\",\n    \"toFloat32Array\",\n    \"toFloat64Array\",\n    \"toGMTString\",\n    \"toISOString\",\n    \"toJSON\",\n    \"toLocaleDateString\",\n    \"toLocaleFormat\",\n    \"toLocaleLowerCase\",\n    \"toLocaleString\",\n    \"toLocaleTimeString\",\n    \"toLocaleUpperCase\",\n    \"toLowerCase\",\n    \"toMethod\",\n    \"toPrecision\",\n    \"toSdp\",\n    \"toSource\",\n    \"toStaticHTML\",\n    \"toString\",\n    \"toStringTag\",\n    \"toTimeString\",\n    \"toUTCString\",\n    \"toUpperCase\",\n    \"toggle\",\n    \"toggleLongPressEnabled\",\n    \"tooLong\",\n    \"toolbar\",\n    \"top\",\n    \"topMargin\",\n    \"total\",\n    \"totalFrameDelay\",\n    \"totalVideoFrames\",\n    \"touchAction\",\n    \"touches\",\n    \"trace\",\n    \"track\",\n    \"transaction\",\n    \"transactions\",\n    \"transform\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transformOrigin\",\n    \"transformPoint\",\n    \"transformString\",\n    \"transformStyle\",\n    \"transformToDocument\",\n    \"transformToFragment\",\n    \"transition\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"transitionDelay\",\n    \"transitionDuration\",\n    \"transitionProperty\",\n    \"transitionTimingFunction\",\n    \"translate\",\n    \"translateSelf\",\n    \"translationX\",\n    \"translationY\",\n    \"trim\",\n    \"trimLeft\",\n    \"trimRight\",\n    \"trueSpeed\",\n    \"trunc\",\n    \"truncate\",\n    \"type\",\n    \"typeDetail\",\n    \"typeMismatch\",\n    \"typeMustMatch\",\n    \"types\",\n    \"ubound\",\n    \"undefined\",\n    \"unescape\",\n    \"uneval\",\n    \"unicode-bidi\",\n    \"unicodeBidi\",\n    \"uniform1f\",\n    \"uniform1fv\",\n    \"uniform1i\",\n    \"uniform1iv\",\n    \"uniform2f\",\n    \"uniform2fv\",\n    \"uniform2i\",\n    \"uniform2iv\",\n    \"uniform3f\",\n    \"uniform3fv\",\n    \"uniform3i\",\n    \"uniform3iv\",\n    \"uniform4f\",\n    \"uniform4fv\",\n    \"uniform4i\",\n    \"uniform4iv\",\n    \"uniformMatrix2fv\",\n    \"uniformMatrix3fv\",\n    \"uniformMatrix4fv\",\n    \"unique\",\n    \"uniqueID\",\n    \"uniqueNumber\",\n    \"unitType\",\n    \"units\",\n    \"unloadEventEnd\",\n    \"unloadEventStart\",\n    \"unlock\",\n    \"unmount\",\n    \"unobserve\",\n    \"unpause\",\n    \"unpauseAnimations\",\n    \"unreadCount\",\n    \"unregister\",\n    \"unregisterContentHandler\",\n    \"unregisterProtocolHandler\",\n    \"unscopables\",\n    \"unselectable\",\n    \"unshift\",\n    \"unsubscribe\",\n    \"unsuspendRedraw\",\n    \"unsuspendRedrawAll\",\n    \"unwatch\",\n    \"unwrapKey\",\n    \"update\",\n    \"updateCommands\",\n    \"updateIce\",\n    \"updateInterval\",\n    \"updateSettings\",\n    \"updated\",\n    \"updating\",\n    \"upload\",\n    \"upper\",\n    \"upperBound\",\n    \"upperOpen\",\n    \"uri\",\n    \"url\",\n    \"urn\",\n    \"urns\",\n    \"usages\",\n    \"useCurrentView\",\n    \"useMap\",\n    \"useProgram\",\n    \"usedSpace\",\n    \"userAgent\",\n    \"userLanguage\",\n    \"username\",\n    \"v8BreakIterator\",\n    \"vAlign\",\n    \"vLink\",\n    \"valid\",\n    \"validateProgram\",\n    \"validationMessage\",\n    \"validity\",\n    \"value\",\n    \"valueAsDate\",\n    \"valueAsNumber\",\n    \"valueAsString\",\n    \"valueInSpecifiedUnits\",\n    \"valueMissing\",\n    \"valueOf\",\n    \"valueText\",\n    \"valueType\",\n    \"values\",\n    \"vector-effect\",\n    \"vectorEffect\",\n    \"velocityAngular\",\n    \"velocityExpansion\",\n    \"velocityX\",\n    \"velocityY\",\n    \"vendor\",\n    \"vendorSub\",\n    \"verify\",\n    \"version\",\n    \"vertexAttrib1f\",\n    \"vertexAttrib1fv\",\n    \"vertexAttrib2f\",\n    \"vertexAttrib2fv\",\n    \"vertexAttrib3f\",\n    \"vertexAttrib3fv\",\n    \"vertexAttrib4f\",\n    \"vertexAttrib4fv\",\n    \"vertexAttribDivisorANGLE\",\n    \"vertexAttribPointer\",\n    \"vertical\",\n    \"vertical-align\",\n    \"verticalAlign\",\n    \"verticalOverflow\",\n    \"vibrate\",\n    \"videoHeight\",\n    \"videoTracks\",\n    \"videoWidth\",\n    \"view\",\n    \"viewBox\",\n    \"viewBoxString\",\n    \"viewTarget\",\n    \"viewTargetString\",\n    \"viewport\",\n    \"viewportAnchorX\",\n    \"viewportAnchorY\",\n    \"viewportElement\",\n    \"visibility\",\n    \"visibilityState\",\n    \"visible\",\n    \"vlinkColor\",\n    \"voice\",\n    \"volume\",\n    \"vrml\",\n    \"vspace\",\n    \"w\",\n    \"wand\",\n    \"warn\",\n    \"wasClean\",\n    \"watch\",\n    \"watchPosition\",\n    \"webdriver\",\n    \"webkitAddKey\",\n    \"webkitAnimation\",\n    \"webkitAnimationDelay\",\n    \"webkitAnimationDirection\",\n    \"webkitAnimationDuration\",\n    \"webkitAnimationFillMode\",\n    \"webkitAnimationIterationCount\",\n    \"webkitAnimationName\",\n    \"webkitAnimationPlayState\",\n    \"webkitAnimationTimingFunction\",\n    \"webkitAppearance\",\n    \"webkitAudioContext\",\n    \"webkitAudioDecodedByteCount\",\n    \"webkitAudioPannerNode\",\n    \"webkitBackfaceVisibility\",\n    \"webkitBackground\",\n    \"webkitBackgroundAttachment\",\n    \"webkitBackgroundClip\",\n    \"webkitBackgroundColor\",\n    \"webkitBackgroundImage\",\n    \"webkitBackgroundOrigin\",\n    \"webkitBackgroundPosition\",\n    \"webkitBackgroundPositionX\",\n    \"webkitBackgroundPositionY\",\n    \"webkitBackgroundRepeat\",\n    \"webkitBackgroundSize\",\n    \"webkitBackingStorePixelRatio\",\n    \"webkitBorderImage\",\n    \"webkitBorderImageOutset\",\n    \"webkitBorderImageRepeat\",\n    \"webkitBorderImageSlice\",\n    \"webkitBorderImageSource\",\n    \"webkitBorderImageWidth\",\n    \"webkitBoxAlign\",\n    \"webkitBoxDirection\",\n    \"webkitBoxFlex\",\n    \"webkitBoxOrdinalGroup\",\n    \"webkitBoxOrient\",\n    \"webkitBoxPack\",\n    \"webkitBoxSizing\",\n    \"webkitCancelAnimationFrame\",\n    \"webkitCancelFullScreen\",\n    \"webkitCancelKeyRequest\",\n    \"webkitCancelRequestAnimationFrame\",\n    \"webkitClearResourceTimings\",\n    \"webkitClosedCaptionsVisible\",\n    \"webkitConvertPointFromNodeToPage\",\n    \"webkitConvertPointFromPageToNode\",\n    \"webkitCreateShadowRoot\",\n    \"webkitCurrentFullScreenElement\",\n    \"webkitCurrentPlaybackTargetIsWireless\",\n    \"webkitDirectionInvertedFromDevice\",\n    \"webkitDisplayingFullscreen\",\n    \"webkitEnterFullScreen\",\n    \"webkitEnterFullscreen\",\n    \"webkitExitFullScreen\",\n    \"webkitExitFullscreen\",\n    \"webkitExitPointerLock\",\n    \"webkitFullScreenKeyboardInputAllowed\",\n    \"webkitFullscreenElement\",\n    \"webkitFullscreenEnabled\",\n    \"webkitGenerateKeyRequest\",\n    \"webkitGetAsEntry\",\n    \"webkitGetDatabaseNames\",\n    \"webkitGetEntries\",\n    \"webkitGetEntriesByName\",\n    \"webkitGetEntriesByType\",\n    \"webkitGetFlowByName\",\n    \"webkitGetGamepads\",\n    \"webkitGetImageDataHD\",\n    \"webkitGetNamedFlows\",\n    \"webkitGetRegionFlowRanges\",\n    \"webkitGetUserMedia\",\n    \"webkitHasClosedCaptions\",\n    \"webkitHidden\",\n    \"webkitIDBCursor\",\n    \"webkitIDBDatabase\",\n    \"webkitIDBDatabaseError\",\n    \"webkitIDBDatabaseException\",\n    \"webkitIDBFactory\",\n    \"webkitIDBIndex\",\n    \"webkitIDBKeyRange\",\n    \"webkitIDBObjectStore\",\n    \"webkitIDBRequest\",\n    \"webkitIDBTransaction\",\n    \"webkitImageSmoothingEnabled\",\n    \"webkitIndexedDB\",\n    \"webkitInitMessageEvent\",\n    \"webkitIsFullScreen\",\n    \"webkitKeys\",\n    \"webkitLineDashOffset\",\n    \"webkitLockOrientation\",\n    \"webkitMatchesSelector\",\n    \"webkitMediaStream\",\n    \"webkitNotifications\",\n    \"webkitOfflineAudioContext\",\n    \"webkitOrientation\",\n    \"webkitPeerConnection00\",\n    \"webkitPersistentStorage\",\n    \"webkitPointerLockElement\",\n    \"webkitPostMessage\",\n    \"webkitPreservesPitch\",\n    \"webkitPutImageDataHD\",\n    \"webkitRTCPeerConnection\",\n    \"webkitRegionOverset\",\n    \"webkitRequestAnimationFrame\",\n    \"webkitRequestFileSystem\",\n    \"webkitRequestFullScreen\",\n    \"webkitRequestFullscreen\",\n    \"webkitRequestPointerLock\",\n    \"webkitResolveLocalFileSystemURL\",\n    \"webkitSetMediaKeys\",\n    \"webkitSetResourceTimingBufferSize\",\n    \"webkitShadowRoot\",\n    \"webkitShowPlaybackTargetPicker\",\n    \"webkitSlice\",\n    \"webkitSpeechGrammar\",\n    \"webkitSpeechGrammarList\",\n    \"webkitSpeechRecognition\",\n    \"webkitSpeechRecognitionError\",\n    \"webkitSpeechRecognitionEvent\",\n    \"webkitStorageInfo\",\n    \"webkitSupportsFullscreen\",\n    \"webkitTemporaryStorage\",\n    \"webkitTextSizeAdjust\",\n    \"webkitTransform\",\n    \"webkitTransformOrigin\",\n    \"webkitTransition\",\n    \"webkitTransitionDelay\",\n    \"webkitTransitionDuration\",\n    \"webkitTransitionProperty\",\n    \"webkitTransitionTimingFunction\",\n    \"webkitURL\",\n    \"webkitUnlockOrientation\",\n    \"webkitUserSelect\",\n    \"webkitVideoDecodedByteCount\",\n    \"webkitVisibilityState\",\n    \"webkitWirelessVideoPlaybackDisabled\",\n    \"webkitdropzone\",\n    \"webstore\",\n    \"weight\",\n    \"whatToShow\",\n    \"wheelDelta\",\n    \"wheelDeltaX\",\n    \"wheelDeltaY\",\n    \"which\",\n    \"white-space\",\n    \"whiteSpace\",\n    \"wholeText\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"willChange\",\n    \"willValidate\",\n    \"window\",\n    \"withCredentials\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"wordBreak\",\n    \"wordSpacing\",\n    \"wordWrap\",\n    \"wrap\",\n    \"wrapKey\",\n    \"write\",\n    \"writeln\",\n    \"writingMode\",\n    \"x\",\n    \"x1\",\n    \"x2\",\n    \"xChannelSelector\",\n    \"xmlEncoding\",\n    \"xmlStandalone\",\n    \"xmlVersion\",\n    \"xmlbase\",\n    \"xmllang\",\n    \"xmlspace\",\n    \"y\",\n    \"y1\",\n    \"y2\",\n    \"yChannelSelector\",\n    \"yandex\",\n    \"z\",\n    \"z-index\",\n    \"zIndex\",\n    \"zoom\",\n    \"zoomAndPan\",\n    \"zoomRectScreen\"\n]\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n/* global global, self */\n\nimport {\n    defaults,\n    push_uniq,\n} from \"./utils\";\nimport { base54 } from \"./scope\";\nimport {\n    AST_Call,\n    AST_Conditional,\n    AST_Dot,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    TreeTransformer,\n    TreeWalker,\n} from \"./ast.js\";\nimport { domprops } from \"../tools/domprops.js\";\n\nfunction find_builtins(reserved) {\n    domprops.forEach(add);\n\n    // Compatibility fix for some standard defined globals not defined on every js environment\n    var new_globals = [\"Symbol\", \"Map\", \"Promise\", \"Proxy\", \"Reflect\", \"Set\", \"WeakMap\", \"WeakSet\"];\n    var objects = {};\n    var global_ref = typeof global === \"object\" ? global : self;\n\n    new_globals.forEach(function (new_global) {\n        objects[new_global] = global_ref[new_global] || new Function();\n    });\n\n    // NaN will be included due to Number.NaN\n    [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"Infinity\",\n        \"-Infinity\",\n        \"undefined\",\n    ].forEach(add);\n    [ Object, Array, Function, Number,\n      String, Boolean, Error, Math,\n      Date, RegExp, objects.Symbol, ArrayBuffer,\n      DataView, decodeURI, decodeURIComponent,\n      encodeURI, encodeURIComponent, eval, EvalError,\n      Float32Array, Float64Array, Int8Array, Int16Array,\n      Int32Array, isFinite, isNaN, JSON, objects.Map, parseFloat,\n      parseInt, objects.Promise, objects.Proxy, RangeError, ReferenceError,\n      objects.Reflect, objects.Set, SyntaxError, TypeError, Uint8Array,\n      Uint8ClampedArray, Uint16Array, Uint32Array, URIError,\n      objects.WeakMap, objects.WeakSet\n    ].forEach(function(ctor) {\n        Object.getOwnPropertyNames(ctor).map(add);\n        if (ctor.prototype) {\n            Object.getOwnPropertyNames(ctor.prototype).map(add);\n        }\n    });\n    function add(name) {\n        reserved.add(name);\n    }\n}\n\nfunction reserve_quoted_keys(ast, reserved) {\n    function add(name) {\n        push_uniq(reserved, name);\n    }\n\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal && node.quote) {\n            add(node.key);\n        } else if (node instanceof AST_ObjectProperty && node.quote) {\n            add(node.key.name);\n        } else if (node instanceof AST_Sub) {\n            addStrings(node.property, add);\n        }\n    }));\n}\n\nfunction addStrings(node, add) {\n    node.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Sequence) {\n            addStrings(node.tail_node(), add);\n        } else if (node instanceof AST_String) {\n            add(node.value);\n        } else if (node instanceof AST_Conditional) {\n            addStrings(node.consequent, add);\n            addStrings(node.alternative, add);\n        }\n        return true;\n    }));\n}\n\nfunction mangle_properties(ast, options) {\n    options = defaults(options, {\n        builtins: false,\n        cache: null,\n        debug: false,\n        keep_quoted: false,\n        only_cache: false,\n        regex: null,\n        reserved: null,\n    }, true);\n\n    var reserved_option = options.reserved;\n    if (!Array.isArray(reserved_option)) reserved_option = [reserved_option];\n    var reserved = new Set(reserved_option);\n    if (!options.builtins) find_builtins(reserved);\n\n    var cname = -1;\n    var cache;\n    if (options.cache) {\n        cache = options.cache.props;\n        cache.forEach(function(mangled_name) {\n            reserved.add(mangled_name);\n        });\n    } else {\n        cache = new Map();\n    }\n\n    var regex = options.regex && new RegExp(options.regex);\n\n    // note debug is either false (disabled), or a string of the debug suffix to use (enabled).\n    // note debug may be enabled as an empty string, which is falsey. Also treat passing 'true'\n    // the same as passing an empty string.\n    var debug = options.debug !== false;\n    var debug_name_suffix;\n    if (debug) {\n        debug_name_suffix = (options.debug === true ? \"\" : options.debug);\n    }\n\n    var names_to_mangle = new Set();\n    var unmangleable = new Set();\n\n    var keep_quoted_strict = options.keep_quoted === \"strict\";\n\n    // step 1: find candidates to mangle\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter, since KeyVal is handled above\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                add(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            var root = node;\n            while (root.expression) {\n                root = root.expression;\n            }\n            if (!(root.thedef && root.thedef.undeclared) &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.property);\n            }\n        } else if (node instanceof AST_Sub) {\n            if (!keep_quoted_strict) {\n                addStrings(node.property, add);\n            }\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            addStrings(node.args[1], add);\n        }\n    }));\n\n    // step 2: transform the tree, renaming properties\n    return ast.transform(new TreeTransformer(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                node.key = mangle(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                node.key.name = mangle(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            if (!keep_quoted_strict || !node.quote) {\n                node.property = mangle(node.property);\n            }\n        } else if (!options.keep_quoted && node instanceof AST_Sub) {\n            node.property = mangleStrings(node.property);\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            node.args[1] = mangleStrings(node.args[1]);\n        }\n    }));\n\n    // only function declarations after this line\n\n    function can_mangle(name) {\n        if (unmangleable.has(name)) return false;\n        if (reserved.has(name)) return false;\n        if (options.only_cache) {\n            return cache.has(name);\n        }\n        if (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n        return true;\n    }\n\n    function should_mangle(name) {\n        if (regex && !regex.test(name)) return false;\n        if (reserved.has(name)) return false;\n        return cache.has(name)\n            || names_to_mangle.has(name);\n    }\n\n    function add(name) {\n        if (can_mangle(name))\n            names_to_mangle.add(name);\n\n        if (!should_mangle(name)) {\n            unmangleable.add(name);\n        }\n    }\n\n    function mangle(name) {\n        if (!should_mangle(name)) {\n            return name;\n        }\n\n        var mangled = cache.get(name);\n        if (!mangled) {\n            if (debug) {\n                // debug mode: use a prefix and suffix to preserve readability, e.g. o.foo -> o._$foo$NNN_.\n                var debug_mangled = \"_$\" + name + \"$\" + debug_name_suffix + \"_\";\n\n                if (can_mangle(debug_mangled)) {\n                    mangled = debug_mangled;\n                }\n            }\n\n            // either debug mode is off, or it is on and we could not use the mangled name\n            if (!mangled) {\n                do {\n                    mangled = base54(++cname);\n                } while (!can_mangle(mangled));\n            }\n\n            cache.set(name, mangled);\n        }\n        return mangled;\n    }\n\n    function mangleStrings(node) {\n        return node.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Sequence) {\n                var last = node.expressions.length - 1;\n                node.expressions[last] = mangleStrings(node.expressions[last]);\n            } else if (node instanceof AST_String) {\n                node.value = mangle(node.value);\n            } else if (node instanceof AST_Conditional) {\n                node.consequent = mangleStrings(node.consequent);\n                node.alternative = mangleStrings(node.alternative);\n            }\n            return node;\n        }));\n    }\n}\n\nexport {\n    reserve_quoted_keys,\n    mangle_properties,\n};\n","\"use strict\";\n/* eslint-env browser, es6, node */\n\nimport {\n    defaults,\n    map_from_object,\n    map_to_object,\n    HOP,\n} from \"./utils.js\";\nimport {\n    AST_Node,\n    AST_Toplevel,\n} from \"./ast.js\";\nimport { parse } from \"./parse.js\";\nimport { OutputStream } from \"./output.js\";\nimport { Compressor } from \"./compress/index.js\";\nimport { base54 } from \"./scope.js\";\nimport { SourceMap } from \"./sourcemap.js\";\nimport {\n    mangle_properties,\n    reserve_quoted_keys,\n} from \"./propmangle.js\";\n\nvar to_ascii = typeof atob == \"undefined\" ? function(b64) {\n    return Buffer.from(b64, \"base64\").toString();\n} : atob;\nvar to_base64 = typeof btoa == \"undefined\" ? function(str) {\n    return Buffer.from(str).toString(\"base64\");\n} : btoa;\n\nfunction read_source_map(code) {\n    var match = /(?:^|[^.])\\/\\/# sourceMappingURL=data:application\\/json(;[\\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\\s*$/.exec(code);\n    if (!match) {\n        AST_Node.warn(\"inline source map not found\");\n        return null;\n    }\n    return to_ascii(match[2]);\n}\n\nfunction set_shorthand(name, options, keys) {\n    if (options[name]) {\n        keys.forEach(function(key) {\n            if (options[key]) {\n                if (typeof options[key] != \"object\") options[key] = {};\n                if (!(name in options[key])) options[key][name] = options[name];\n            }\n        });\n    }\n}\n\nfunction init_cache(cache) {\n    if (!cache) return;\n    if (!(\"props\" in cache)) {\n        cache.props = new Map();\n    } else if (!(cache.props instanceof Map)) {\n        cache.props = map_from_object(cache.props);\n    }\n}\n\nfunction to_json(cache) {\n    return {\n        props: map_to_object(cache.props)\n    };\n}\n\nfunction minify(files, options) {\n    var warn_function = AST_Node.warn_function;\n    try {\n        options = defaults(options, {\n            compress: {},\n            ecma: undefined,\n            enclose: false,\n            ie8: false,\n            keep_classnames: undefined,\n            keep_fnames: false,\n            mangle: {},\n            module: false,\n            nameCache: null,\n            output: {},\n            parse: {},\n            rename: undefined,\n            safari10: false,\n            sourceMap: false,\n            timings: false,\n            toplevel: false,\n            warnings: false,\n            wrap: false,\n        }, true);\n        var timings = options.timings && {\n            start: Date.now()\n        };\n        if (options.keep_classnames === undefined) {\n            options.keep_classnames = options.keep_fnames;\n        }\n        if (options.rename === undefined) {\n            options.rename = options.compress && options.mangle;\n        }\n        set_shorthand(\"ecma\", options, [ \"parse\", \"compress\", \"output\" ]);\n        set_shorthand(\"ie8\", options, [ \"compress\", \"mangle\", \"output\" ]);\n        set_shorthand(\"keep_classnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"keep_fnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"module\", options, [ \"parse\", \"compress\", \"mangle\" ]);\n        set_shorthand(\"safari10\", options, [ \"mangle\", \"output\" ]);\n        set_shorthand(\"toplevel\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"warnings\", options, [ \"compress\" ]);\n        var quoted_props;\n        if (options.mangle) {\n            options.mangle = defaults(options.mangle, {\n                cache: options.nameCache && (options.nameCache.vars || {}),\n                eval: false,\n                ie8: false,\n                keep_classnames: false,\n                keep_fnames: false,\n                module: false,\n                properties: false,\n                reserved: [],\n                safari10: false,\n                toplevel: false,\n            }, true);\n            if (options.mangle.properties) {\n                if (typeof options.mangle.properties != \"object\") {\n                    options.mangle.properties = {};\n                }\n                if (options.mangle.properties.keep_quoted) {\n                    quoted_props = options.mangle.properties.reserved;\n                    if (!Array.isArray(quoted_props)) quoted_props = [];\n                    options.mangle.properties.reserved = quoted_props;\n                }\n                if (options.nameCache && !(\"cache\" in options.mangle.properties)) {\n                    options.mangle.properties.cache = options.nameCache.props || {};\n                }\n            }\n            init_cache(options.mangle.cache);\n            init_cache(options.mangle.properties.cache);\n        }\n        if (options.sourceMap) {\n            options.sourceMap = defaults(options.sourceMap, {\n                content: null,\n                filename: null,\n                includeSources: false,\n                root: null,\n                url: null,\n            }, true);\n        }\n        var warnings = [];\n        if (options.warnings && !AST_Node.warn_function) {\n            AST_Node.warn_function = function(warning) {\n                warnings.push(warning);\n            };\n        }\n        if (timings) timings.parse = Date.now();\n        var toplevel;\n        if (files instanceof AST_Toplevel) {\n            toplevel = files;\n        } else {\n            if (typeof files == \"string\") {\n                files = [ files ];\n            }\n            options.parse = options.parse || {};\n            options.parse.toplevel = null;\n            for (var name in files) if (HOP(files, name)) {\n                options.parse.filename = name;\n                options.parse.toplevel = parse(files[name], options.parse);\n                if (options.sourceMap && options.sourceMap.content == \"inline\") {\n                    if (Object.keys(files).length > 1)\n                        throw new Error(\"inline source map only works with singular input\");\n                    options.sourceMap.content = read_source_map(files[name]);\n                }\n            }\n            toplevel = options.parse.toplevel;\n        }\n        if (quoted_props && options.mangle.properties.keep_quoted !== \"strict\") {\n            reserve_quoted_keys(toplevel, quoted_props);\n        }\n        if (options.wrap) {\n            toplevel = toplevel.wrap_commonjs(options.wrap);\n        }\n        if (options.enclose) {\n            toplevel = toplevel.wrap_enclose(options.enclose);\n        }\n        if (timings) timings.rename = Date.now();\n        // disable rename on harmony due to expand_names bug in for-of loops\n        // https://github.com/mishoo/UglifyJS2/issues/2794\n        if (0 && options.rename) {\n            toplevel.figure_out_scope(options.mangle);\n            toplevel.expand_names(options.mangle);\n        }\n        if (timings) timings.compress = Date.now();\n        if (options.compress) toplevel = new Compressor(options.compress).compress(toplevel);\n        if (timings) timings.scope = Date.now();\n        if (options.mangle) toplevel.figure_out_scope(options.mangle);\n        if (timings) timings.mangle = Date.now();\n        if (options.mangle) {\n            base54.reset();\n            toplevel.compute_char_frequency(options.mangle);\n            toplevel.mangle_names(options.mangle);\n        }\n        if (timings) timings.properties = Date.now();\n        if (options.mangle && options.mangle.properties) {\n            toplevel = mangle_properties(toplevel, options.mangle.properties);\n        }\n        if (timings) timings.output = Date.now();\n        var result = {};\n        if (options.output.ast) {\n            result.ast = toplevel;\n        }\n        if (!HOP(options.output, \"code\") || options.output.code) {\n            if (options.sourceMap) {\n                if (typeof options.sourceMap.content == \"string\") {\n                    options.sourceMap.content = JSON.parse(options.sourceMap.content);\n                }\n                options.output.source_map = SourceMap({\n                    file: options.sourceMap.filename,\n                    orig: options.sourceMap.content,\n                    root: options.sourceMap.root\n                });\n                if (options.sourceMap.includeSources) {\n                    if (files instanceof AST_Toplevel) {\n                        throw new Error(\"original source content unavailable\");\n                    } else for (var name in files) if (HOP(files, name)) {\n                        options.output.source_map.get().setSourceContent(name, files[name]);\n                    }\n                }\n            }\n            delete options.output.ast;\n            delete options.output.code;\n            var stream = OutputStream(options.output);\n            toplevel.print(stream);\n            result.code = stream.get();\n            if (options.sourceMap) {\n                result.map = options.output.source_map.toString();\n                if (options.sourceMap.url == \"inline\") {\n                    result.code += \"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + to_base64(result.map);\n                } else if (options.sourceMap.url) {\n                    result.code += \"\\n//# sourceMappingURL=\" + options.sourceMap.url;\n                }\n            }\n        }\n        if (options.nameCache && options.mangle) {\n            if (options.mangle.cache) options.nameCache.vars = to_json(options.mangle.cache);\n            if (options.mangle.properties && options.mangle.properties.cache) {\n                options.nameCache.props = to_json(options.mangle.properties.cache);\n            }\n        }\n        if (timings) {\n            timings.end = Date.now();\n            result.timings = {\n                parse: 1e-3 * (timings.rename - timings.parse),\n                rename: 1e-3 * (timings.compress - timings.rename),\n                compress: 1e-3 * (timings.scope - timings.compress),\n                scope: 1e-3 * (timings.mangle - timings.scope),\n                mangle: 1e-3 * (timings.properties - timings.mangle),\n                properties: 1e-3 * (timings.output - timings.properties),\n                output: 1e-3 * (timings.end - timings.output),\n                total: 1e-3 * (timings.end - timings.start)\n            };\n        }\n        if (warnings.length) {\n            result.warnings = warnings;\n        }\n        return result;\n    } catch (ex) {\n        return { error: ex };\n    } finally {\n        AST_Node.warn_function = warn_function;\n    }\n}\n\nexport {\n  minify,\n  to_ascii,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport MOZ_SourceMap from \"source-map\";\nimport {\n    defaults,\n} from \"./utils.js\";\n\n// a small wrapper around fitzgen's source-map library\nfunction SourceMap(options) {\n    options = defaults(options, {\n        file : null,\n        root : null,\n        orig : null,\n\n        orig_line_diff : 0,\n        dest_line_diff : 0,\n    });\n    var generator = new MOZ_SourceMap.SourceMapGenerator({\n        file       : options.file,\n        sourceRoot : options.root\n    });\n    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);\n\n    if (orig_map) {\n        orig_map.sources.forEach(function(source) {\n            var sourceContent = orig_map.sourceContentFor(source, true);\n            if (sourceContent) {\n                generator.setSourceContent(source, sourceContent);\n            }\n        });\n    }\n\n    function add(source, gen_line, gen_col, orig_line, orig_col, name) {\n        if (orig_map) {\n            var info = orig_map.originalPositionFor({\n                line: orig_line,\n                column: orig_col\n            });\n            if (info.source === null) {\n                return;\n            }\n            source = info.source;\n            orig_line = info.line;\n            orig_col = info.column;\n            name = info.name || name;\n        }\n        generator.addMapping({\n            generated : { line: gen_line + options.dest_line_diff, column: gen_col },\n            original  : { line: orig_line + options.orig_line_diff, column: orig_col },\n            source    : source,\n            name      : name\n        });\n    }\n    return {\n        add        : add,\n        get        : function() { return generator; },\n        toString   : function() { return JSON.stringify(generator.toJSON()); }\n    };\n}\n\nexport {\n    SourceMap,\n};\n","import { minify } from \"../lib/minify\";\n\nexport function default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nfunction infer_options(options) {\n    var result = minify(\"\", options);\n    return result.error && result.error.defs;\n}\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport * as ast from \"./ast.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\n(function() {\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        ArrayPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.elements.map(function(elm) {\n                    if (elm === null) {\n                        return new AST_Hole();\n                    }\n                    return from_moz(elm);\n                }),\n                is_array: true\n            });\n        },\n        ObjectPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.properties.map(from_moz),\n                is_array: false\n            });\n        },\n        AssignmentPattern: function(M) {\n            var Type = AST_Binary;\n            if(FROM_MOZ_STACK.length > 2) {\n                var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n                if(p.type === \"FunctionDeclaration\"\n                   || p.type === \"FunctionExpression\"\n                   || p.type === \"ArrowFunctionExpression\") {\n                    Type = AST_DefaultAssign;\n                }\n            }\n            return new Type({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                left: from_moz(M.left),\n                operator: \"=\",\n                right: from_moz(M.right)\n            });\n        },\n        SpreadElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        RestElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        TemplateElement: function(M) {\n            return new AST_TemplateSegment({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: M.value.cooked,\n                raw: M.value.raw\n            });\n        },\n        TemplateLiteral: function(M) {\n            var segments = [];\n            for (var i = 0; i < M.quasis.length; i++) {\n                segments.push(from_moz(M.quasis[i]));\n                if (M.expressions[i]) {\n                    segments.push(from_moz(M.expressions[i]));\n                }\n            }\n            return new AST_TemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                segments: segments\n            });\n        },\n        TaggedTemplateExpression: function(M) {\n            return new AST_PrefixedTemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                template_string: from_moz(M.quasi),\n                prefix: from_moz(M.tag)\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ArrowFunctionExpression: function(M) {\n            return new AST_Arrow({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                argnames: M.params.map(from_moz),\n                body: from_moz(M.body),\n                async: M.async,\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var args = {\n                start    : my_start_token(key || M.value),\n                end      : my_end_token(M.value),\n                key      : key.type == \"Identifier\" ? key.name : key.value,\n                value    : from_moz(M.value)\n            };\n            if (M.computed) {\n                args.key = from_moz(M.key);\n            }\n            if (M.method) {\n                args.is_generator = M.value.generator;\n                args.async = M.value.async;\n                if (!M.computed) {\n                    args.key = new AST_SymbolMethod({ name: args.key });\n                } else {\n                    args.key = from_moz(M.key);\n                }\n                return new AST_ConciseMethod(args);\n            }\n            if (M.kind == \"init\") {\n                if (key.type != \"Identifier\" && key.type != \"Literal\") {\n                    args.key = from_moz(key);\n                }\n                return new AST_ObjectKeyVal(args);\n            }\n            if (typeof args.key === \"string\" || typeof args.key === \"number\") {\n                args.key = new AST_SymbolMethod({\n                    name: args.key\n                });\n            }\n            args.value = new AST_Accessor(args.value);\n            if (M.kind == \"get\") return new AST_ObjectGetter(args);\n            if (M.kind == \"set\") return new AST_ObjectSetter(args);\n            if (M.kind == \"method\") {\n                args.async = M.value.async;\n                args.is_generator = M.value.generator;\n                args.quote = M.computed ? \"\\\"\" : null;\n                return new AST_ConciseMethod(args);\n            }\n        },\n        MethodDefinition: function(M) {\n            var args = {\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key      : M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value }),\n                value    : from_moz(M.value),\n                static   : M.static,\n            };\n            if (M.kind == \"get\") {\n                return new AST_ObjectGetter(args);\n            }\n            if (M.kind == \"set\") {\n                return new AST_ObjectSetter(args);\n            }\n            args.is_generator = M.value.generator;\n            args.async = M.value.async;\n            return new AST_ConciseMethod(args);\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem) {\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop) {\n                    if (prop.type === \"SpreadElement\") {\n                        return from_moz(prop);\n                    }\n                    prop.type = \"Property\";\n                    return from_moz(prop);\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return new AST_Sequence({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expressions: M.expressions.map(from_moz)\n            });\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const :\n                        M.kind === \"let\" ? AST_Let : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n\n        ImportDeclaration: function(M) {\n            var imported_name = null;\n            var imported_names = null;\n            M.specifiers.forEach(function (specifier) {\n                if (specifier.type === \"ImportSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: from_moz(specifier.imported),\n                        name: from_moz(specifier.local)\n                    }));\n                } else if (specifier.type === \"ImportDefaultSpecifier\") {\n                    imported_name = from_moz(specifier.local);\n                } else if (specifier.type === \"ImportNamespaceSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: new AST_SymbolImportForeign({ name: \"*\" }),\n                        name: from_moz(specifier.local)\n                    }));\n                }\n            });\n            return new AST_Import({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                imported_name: imported_name,\n                imported_names : imported_names,\n                module_name : from_moz(M.source)\n            });\n        },\n        ExportAllDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_names: [\n                    new AST_NameMapping({\n                        name: new AST_SymbolExportForeign({ name: \"*\" }),\n                        foreign_name: new AST_SymbolExportForeign({ name: \"*\" })\n                    })\n                ],\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportNamedDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_definition: from_moz(M.declaration),\n                exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function (specifier) {\n                    return new AST_NameMapping({\n                        foreign_name: from_moz(specifier.exported),\n                        name: from_moz(specifier.local)\n                    });\n                }) : null,\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportDefaultDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_value: from_moz(M.declaration),\n                is_default: true\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            var rx = M.regex;\n            if (rx && rx.pattern) {\n                // RegExpLiteral as per ESTree AST spec\n                args.value = new RegExp(rx.pattern, rx.flags);\n                var raw = args.value.toString();\n                args.value.raw_source = rx.flags\n                    ? raw.substring(0, raw.length - rx.flags.length) + rx.flags\n                    : raw;\n                return new AST_RegExp(args);\n            } else if (rx) {\n                // support legacy RegExp\n                args.value = M.regex && M.raw ? M.raw : val;\n                return new AST_RegExp(args);\n            }\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n            }\n        },\n        MetaProperty: function(M) {\n            if (M.meta.name === \"new\" && M.property.name === \"target\") {\n                return new AST_NewTarget({\n                    start: my_start_token(M),\n                    end: my_end_token(M)\n                });\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : p.kind == \"let\" ? AST_SymbolLet : AST_SymbolVar)\n                        : /Import.*Specifier/.test(p.type) ? (p.local === M ? AST_SymbolImport : AST_SymbolImportForeign)\n                        : p.type == \"ExportSpecifier\" ? (p.local === M ? AST_SymbolExport : AST_SymbolExportForeign)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"ArrowFunctionExpression\" ? (p.params.includes(M)) ? AST_SymbolFunarg : AST_SymbolRef\n                        : p.type == \"ClassExpression\" ? (p.id === M ? AST_SymbolClass : AST_SymbolRef)\n                        : p.type == \"Property\" ? (p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"ClassDeclaration\" ? (p.id === M ? AST_SymbolDefClass : AST_SymbolRef)\n                        : p.type == \"MethodDefinition\" ? (p.computed ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    MOZ_TO_ME.ClassDeclaration =\n    MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {\n        return new (M.type === \"ClassDeclaration\" ? AST_DefClass : AST_ClassExpression)({\n            start    : my_start_token(M),\n            end      : my_end_token(M),\n            name     : from_moz(M.id),\n            extends  : from_moz(M.superClass),\n            properties: M.body.body.map(from_moz)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"ForOfStatement\", AST_ForOf, \"left>init, right>object, body>body, await=await\");\n    map(\"AwaitExpression\", AST_Await, \"argument>expression\");\n    map(\"YieldExpression\", AST_Yield, \"argument>expression, delegate=is_star\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"Super\", AST_Super);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return to_moz_scope(\"Program\", M);\n    });\n\n    def_to_moz(AST_Expansion, function To_Moz_Spread(M, parent) {\n        return {\n            type: to_moz_in_destructuring() ? \"RestElement\" : \"SpreadElement\",\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {\n        return {\n            type: \"TaggedTemplateExpression\",\n            tag: to_moz(M.prefix),\n            quasi: to_moz(M.template_string)\n        };\n    });\n\n    def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {\n        var quasis = [];\n        var expressions = [];\n        for (var i = 0; i < M.segments.length; i++) {\n            if (i % 2 !== 0) {\n                expressions.push(to_moz(M.segments[i]));\n            } else {\n                quasis.push({\n                    type: \"TemplateElement\",\n                    value: {\n                        raw: M.segments[i].raw,\n                        cooked: M.segments[i].value\n                    },\n                    tail: i === M.segments.length - 1\n                });\n            }\n        }\n        return {\n            type: \"TemplateLiteral\",\n            quasis: quasis,\n            expressions: expressions\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: M.is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {\n        var is_generator = parent.is_generator !== undefined ?\n            parent.is_generator : M.is_generator;\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {\n        var body = M.body instanceof Array ? {\n            type: \"BlockStatement\",\n            body: M.body.map(to_moz)\n        } : to_moz(M.body);\n        return {\n            type: \"ArrowFunctionExpression\",\n            params: M.argnames.map(to_moz),\n            async: M.async,\n            body: body\n        };\n    });\n\n    def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {\n        if (M.is_array) {\n            return {\n                type: \"ArrayPattern\",\n                elements: M.names.map(to_moz)\n            };\n        }\n        return {\n            type: \"ObjectPattern\",\n            properties: M.names.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind:\n                M instanceof AST_Const ? \"const\" :\n                M instanceof AST_Let ? \"let\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {\n        if (M.exported_names) {\n            if (M.exported_names[0].name.name === \"*\") {\n                return {\n                    type: \"ExportAllDeclaration\",\n                    source: to_moz(M.module_name)\n                };\n            }\n            return {\n                type: \"ExportNamedDeclaration\",\n                specifiers: M.exported_names.map(function (name_mapping) {\n                    return {\n                        type: \"ExportSpecifier\",\n                        exported: to_moz(name_mapping.foreign_name),\n                        local: to_moz(name_mapping.name)\n                    };\n                }),\n                declaration: to_moz(M.exported_definition),\n                source: to_moz(M.module_name)\n            };\n        }\n        return {\n            type: M.is_default ? \"ExportDefaultDeclaration\" : \"ExportNamedDeclaration\",\n            declaration: to_moz(M.exported_value || M.exported_definition)\n        };\n    });\n\n    def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {\n        var specifiers = [];\n        if (M.imported_name) {\n            specifiers.push({\n                type: \"ImportDefaultSpecifier\",\n                local: to_moz(M.imported_name)\n            });\n        }\n        if (M.imported_names && M.imported_names[0].foreign_name.name === \"*\") {\n            specifiers.push({\n                type: \"ImportNamespaceSpecifier\",\n                local: to_moz(M.imported_names[0].name)\n            });\n        } else if (M.imported_names) {\n            M.imported_names.forEach(function(name_mapping) {\n                specifiers.push({\n                    type: \"ImportSpecifier\",\n                    local: to_moz(name_mapping.name),\n                    imported: to_moz(name_mapping.foreign_name)\n                });\n            });\n        }\n        return {\n            type: \"ImportDeclaration\",\n            specifiers: specifiers,\n            source: to_moz(M.module_name)\n        };\n    });\n\n    def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.expressions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        if (M.operator == \"=\" && to_moz_in_destructuring()) {\n            return {\n                type: \"AssignmentPattern\",\n                left: to_moz(M.left),\n                right: to_moz(M.right)\n            };\n        }\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {\n        var key = M.key instanceof AST_Node ? to_moz(M.key) : {\n            type: \"Identifier\",\n            value: M.key\n        };\n        if (typeof M.key === \"number\") {\n            key = {\n                type: \"Literal\",\n                value: Number(M.key)\n            };\n        }\n        if (typeof M.key === \"string\") {\n            key = {\n                type: \"Identifier\",\n                name: M.key\n            };\n        }\n        var kind;\n        var string_or_num = typeof M.key === \"string\" || typeof M.key === \"number\";\n        var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n            computed = !string_or_num;\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        if (parent instanceof AST_Class) {\n            return {\n                type: \"MethodDefinition\",\n                computed: computed,\n                kind: kind,\n                static: M.static,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"Property\",\n            computed: computed,\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {\n        if (parent instanceof AST_Object) {\n            return {\n                type: \"Property\",\n                computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n                kind: \"init\",\n                method: true,\n                shorthand: false,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"MethodDefinition\",\n            computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n            kind: M.key === \"constructor\" ? \"constructor\" : \"method\",\n            static: M.static,\n            key: to_moz(M.key),\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Class, function To_Moz_Class(M) {\n        var type = M instanceof AST_ClassExpression ? \"ClassExpression\" : \"ClassDeclaration\";\n        return {\n            type: type,\n            superClass: to_moz(M.extends),\n            id: M.name ? to_moz(M.name) : null,\n            body: {\n                type: \"ClassBody\",\n                body: M.properties.map(to_moz)\n            }\n        };\n    });\n\n    def_to_moz(AST_NewTarget, function To_Moz_MetaProperty(M) {\n        return {\n            type: \"MetaProperty\",\n            meta: {\n                type: \"Identifier\",\n                name: \"new\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: \"target\"\n            }\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {\n        if (M instanceof AST_SymbolMethod && parent.quote) {\n            return {\n                type: \"Literal\",\n                value: M.name\n            };\n        }\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var pattern = M.value.source;\n        var flags = M.value.toString().match(/[gimuys]*$/)[0];\n        return {\n            type: \"Literal\",\n            value: new RegExp(pattern, flags),\n            raw: M.value.raw_source,\n            regex: {\n                pattern: pattern,\n                flags: flags,\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === \"number\" && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null; });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop) {\n            var m = /([a-z0-9$_]+)([=@>%])([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            ast, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"to_moz_scope\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block, to_moz_scope\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    }\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    }\n\n    AST_Node.from_mozilla_ast = function(node) {\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    }\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function(parent) {\n            return set_moz_loc(this, handler(this, parent));\n        });\n    }\n\n    var TO_MOZ_STACK = null;\n\n    function to_moz(node) {\n        if (TO_MOZ_STACK === null) { TO_MOZ_STACK = []; }\n        TO_MOZ_STACK.push(node);\n        var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;\n        TO_MOZ_STACK.pop();\n        if (TO_MOZ_STACK.length === 0) { TO_MOZ_STACK = null; }\n        return ast;\n    }\n\n    function to_moz_in_destructuring() {\n        var i = TO_MOZ_STACK.length;\n        while (i--) {\n            if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    }\n\n    function to_moz_scope(type, node) {\n        var body = node.body.map(to_moz);\n        if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {\n            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));\n        }\n        return {\n            type: type,\n            body: body\n        };\n    }\n})();\n"]}